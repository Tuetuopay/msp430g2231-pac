#![feature(abi_msp430_interrupt)]
#![doc = "Peripheral access API for MSP430G2231 microcontrollers (generated using svd2rust v0.19.0 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next]
svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.19.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![deny(const_err)]
#![deny(dead_code)]
#![deny(improper_ctypes)]
#![deny(missing_docs)]
#![deny(no_mangle_generic_items)]
#![deny(non_shorthand_field_patterns)]
#![deny(overflowing_literals)]
#![deny(path_statements)]
#![deny(patterns_in_fns_without_body)]
#![deny(private_in_public)]
#![deny(unconditional_recursion)]
#![deny(unused_allocation)]
#![deny(unused_comparisons)]
#![deny(unused_parens)]
#![deny(while_true)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
use core::marker::PhantomData;
use core::ops::Deref;
#[allow(unused_imports)]
use generic::*;
#[cfg(feature = "rt")]
pub use msp430_rt::interrupt;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic {
    use core::marker;
    #[doc = " Raw register type"]
    pub trait RegisterSpec {
        #[doc = " Raw register type (`u8`, `u16`, `u32`, ...)."]
        type Ux: Copy;
    }
    #[doc = " Trait implemented by readable registers to enable the `read` method."]
    #[doc = ""]
    #[doc = " Registers marked with `Writable` can be also `modify`'ed."]
    pub trait Readable: RegisterSpec {
        #[doc = " Result from a call to `read` and argument to `modify`."]
        type Reader: From<R<Self>> + core::ops::Deref<Target = R<Self>>;
    }
    #[doc = " Trait implemented by writeable registers."]
    #[doc = ""]
    #[doc = " This enables the  `write`, `write_with_zero` and `reset` methods."]
    #[doc = ""]
    #[doc = " Registers marked with `Readable` can be also `modify`'ed."]
    pub trait Writable: RegisterSpec {
        #[doc = " Writer type argument to `write`, et al."]
        type Writer: From<W<Self>> + core::ops::DerefMut<Target = W<Self>>;
    }
    #[doc = " Reset value of the register."]
    #[doc = ""]
    #[doc = " This value is the initial value for the `write` method. It can also be directly written to the"]
    #[doc = " register by using the `reset` method."]
    pub trait Resettable: RegisterSpec {
        #[doc = " Reset value of the register."]
        fn reset_value() -> Self::Ux;
    }
    #[doc = " This structure provides volatile access to registers."]
    #[repr(transparent)]
    pub struct Reg<REG: RegisterSpec> {
        register: vcell::VolatileCell<REG::Ux>,
        _marker: marker::PhantomData<REG>,
    }
    unsafe impl<REG: RegisterSpec> Send for Reg<REG> where REG::Ux: Send {}
    impl<REG: RegisterSpec> Reg<REG> {
        #[doc = " Returns the underlying memory address of register."]
        #[doc = ""]
        #[doc = " ```ignore"]
        #[doc = " let reg_ptr = periph.reg.as_ptr();"]
        #[doc = " ```"]
        #[inline(always)]
        pub fn as_ptr(&self) -> *mut REG::Ux {
            self.register.as_ptr()
        }
    }
    impl<REG: Readable> Reg<REG> {
        #[doc = " Reads the contents of a `Readable` register."]
        #[doc = ""]
        #[doc = " You can read the raw contents of a register by using `bits`:"]
        #[doc = " ```ignore"]
        #[doc = " let bits = periph.reg.read().bits();"]
        #[doc = " ```"]
        #[doc = " or get the content of a particular field of a register:"]
        #[doc = " ```ignore"]
        #[doc = " let reader = periph.reg.read();"]
        #[doc = " let bits = reader.field1().bits();"]
        #[doc = " let flag = reader.field2().bit_is_set();"]
        #[doc = " ```"]
        #[inline(always)]
        pub fn read(&self) -> REG::Reader {
            REG::Reader::from(R {
                bits: self.register.get(),
                _reg: marker::PhantomData,
            })
        }
    }
    impl<REG: Resettable + Writable> Reg<REG> {
        #[doc = " Writes the reset value to `Writable` register."]
        #[doc = ""]
        #[doc = " Resets the register to its initial state."]
        #[inline(always)]
        pub fn reset(&self) {
            self.register.set(REG::reset_value())
        }
        #[doc = " Writes bits to a `Writable` register."]
        #[doc = ""]
        #[doc = " You can write raw bits into a register:"]
        #[doc = " ```ignore"]
        #[doc = " periph.reg.write(|w| unsafe { w.bits(rawbits) });"]
        #[doc = " ```"]
        #[doc = " or write only the fields you need:"]
        #[doc = " ```ignore"]
        #[doc = " periph.reg.write(|w| w"]
        #[doc = "     .field1().bits(newfield1bits)"]
        #[doc = "     .field2().set_bit()"]
        #[doc = "     .field3().variant(VARIANT)"]
        #[doc = " );"]
        #[doc = " ```"]
        #[doc = " In the latter case, other fields will be set to their reset value."]
        #[inline(always)]
        pub fn write<F>(&self, f: F)
        where
            F: FnOnce(&mut REG::Writer) -> &mut W<REG>,
        {
            self.register.set(
                f(&mut REG::Writer::from(W {
                    bits: REG::reset_value(),
                    _reg: marker::PhantomData,
                }))
                .bits,
            );
        }
    }
    impl<REG: Writable> Reg<REG>
    where
        REG::Ux: Default,
    {
        #[doc = " Writes 0 to a `Writable` register."]
        #[doc = ""]
        #[doc = " Similar to `write`, but unused bits will contain 0."]
        #[inline(always)]
        pub unsafe fn write_with_zero<F>(&self, f: F)
        where
            F: FnOnce(&mut REG::Writer) -> &mut W<REG>,
        {
            self.register.set(
                (*f(&mut REG::Writer::from(W {
                    bits: REG::Ux::default(),
                    _reg: marker::PhantomData,
                })))
                .bits,
            );
        }
    }
    impl<REG: Readable + Writable> Reg<REG> {
        #[doc = " Modifies the contents of the register by reading and then writing it."]
        #[doc = ""]
        #[doc = " E.g. to do a read-modify-write sequence to change parts of a register:"]
        #[doc = " ```ignore"]
        #[doc = " periph.reg.modify(|r, w| unsafe { w.bits("]
        #[doc = "    r.bits() | 3"]
        #[doc = " ) });"]
        #[doc = " ```"]
        #[doc = " or"]
        #[doc = " ```ignore"]
        #[doc = " periph.reg.modify(|_, w| w"]
        #[doc = "     .field1().bits(newfield1bits)"]
        #[doc = "     .field2().set_bit()"]
        #[doc = "     .field3().variant(VARIANT)"]
        #[doc = " );"]
        #[doc = " ```"]
        #[doc = " Other fields will have the value they had before the call to `modify`."]
        #[inline(always)]
        pub fn modify<F>(&self, f: F)
        where
            for<'w> F: FnOnce(&REG::Reader, &'w mut REG::Writer) -> &'w mut W<REG>,
        {
            let bits = self.register.get();
            self.register.set(
                f(
                    &REG::Reader::from(R {
                        bits,
                        _reg: marker::PhantomData,
                    }),
                    &mut REG::Writer::from(W {
                        bits,
                        _reg: marker::PhantomData,
                    }),
                )
                .bits,
            );
        }
    }
    #[doc = " Register reader."]
    #[doc = ""]
    #[doc = " Result of the `read` methods of registers. Also used as a closure argument in the `modify`"]
    #[doc = " method."]
    pub struct R<REG: RegisterSpec + ?Sized> {
        pub(crate) bits: REG::Ux,
        _reg: marker::PhantomData<REG>,
    }
    impl<REG: RegisterSpec> R<REG> {
        #[doc = " Reads raw bits from register."]
        #[inline(always)]
        pub fn bits(&self) -> REG::Ux {
            self.bits
        }
    }
    impl<REG: RegisterSpec, FI> PartialEq<FI> for R<REG>
    where
        REG::Ux: PartialEq,
        FI: Copy + Into<REG::Ux>,
    {
        #[inline(always)]
        fn eq(&self, other: &FI) -> bool {
            self.bits.eq(&(*other).into())
        }
    }
    #[doc = " Register writer."]
    #[doc = ""]
    #[doc = " Used as an argument to the closures in the `write` and `modify` methods of the register."]
    pub struct W<REG: RegisterSpec + ?Sized> {
        #[doc = "Writable bits"]
        pub(crate) bits: REG::Ux,
        _reg: marker::PhantomData<REG>,
    }
    impl<REG: RegisterSpec> W<REG> {
        #[doc = " Writes raw bits to the register."]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: REG::Ux) -> &mut Self {
            self.bits = bits;
            self
        }
    }
    #[doc = " Field reader."]
    #[doc = ""]
    #[doc = " Result of the `read` methods of fields."]
    pub struct FieldReader<U, T> {
        pub(crate) bits: U,
        _reg: marker::PhantomData<T>,
    }
    impl<U, T> FieldReader<U, T>
    where
        U: Copy,
    {
        #[doc = " Creates a new instance of the reader."]
        #[allow(unused)]
        #[inline(always)]
        pub(crate) fn new(bits: U) -> Self {
            Self {
                bits,
                _reg: marker::PhantomData,
            }
        }
        #[doc = " Reads raw bits from field."]
        #[inline(always)]
        pub fn bits(&self) -> U {
            self.bits
        }
    }
    impl<U, T, FI> PartialEq<FI> for FieldReader<U, T>
    where
        U: PartialEq,
        FI: Copy + Into<U>,
    {
        #[inline(always)]
        fn eq(&self, other: &FI) -> bool {
            self.bits.eq(&(*other).into())
        }
    }
    impl<FI> FieldReader<bool, FI> {
        #[doc = " Value of the field as raw bits."]
        #[inline(always)]
        pub fn bit(&self) -> bool {
            self.bits
        }
        #[doc = " Returns `true` if the bit is clear (0)."]
        #[inline(always)]
        pub fn bit_is_clear(&self) -> bool {
            !self.bit()
        }
        #[doc = " Returns `true` if the bit is set (1)."]
        #[inline(always)]
        pub fn bit_is_set(&self) -> bool {
            self.bit()
        }
    }
    use msp430_atomic::AtomicOperations;
    impl<REG: Writable> Reg<REG>
    where
        Self: Readable + Writable,
        REG::Ux: AtomicOperations + Default + core::ops::Not<Output = REG::Ux>,
    {
        #[doc = " Set high every bit in the register that was set in the write proxy. Leave other bits"]
        #[doc = " untouched. The write is done in a single atomic instruction."]
        #[inline(always)]
        pub unsafe fn set_bits<F>(&self, f: F)
        where
            F: FnOnce(&mut W<REG>) -> &mut W<REG>,
        {
            let bits = f(&mut W {
                bits: Default::default(),
                _reg: marker::PhantomData,
            })
            .bits;
            REG::Ux::atomic_or(self.register.as_ptr(), bits);
        }
        #[doc = " Clear every bit in the register that was cleared in the write proxy. Leave other bits"]
        #[doc = " untouched. The write is done in a single atomic instruction."]
        #[inline(always)]
        pub unsafe fn clear_bits<F>(&self, f: F)
        where
            F: FnOnce(&mut W<REG>) -> &mut W<REG>,
        {
            let bits = f(&mut W {
                bits: !REG::Ux::default(),
                _reg: marker::PhantomData,
            })
            .bits;
            REG::Ux::atomic_and(self.register.as_ptr(), bits);
        }
        #[doc = " Toggle every bit in the register that was set in the write proxy. Leave other bits"]
        #[doc = " untouched. The write is done in a single atomic instruction."]
        #[inline(always)]
        pub unsafe fn toggle_bits<F>(&self, f: F)
        where
            F: FnOnce(&mut W<REG>) -> &mut W<REG>,
        {
            let bits = f(&mut W {
                bits: Default::default(),
                _reg: marker::PhantomData,
            })
            .bits;
            REG::Ux::atomic_xor(self.register.as_ptr(), bits);
        }
    }
}
#[cfg(feature = "rt")]
extern "msp430-interrupt" {
    fn PORT1();
    fn PORT2();
    fn USI();
    fn ADC10();
    fn TIMERA1();
    fn TIMERA0();
    fn WDT();
    fn NMI();
}
#[doc(hidden)]
pub union Vector {
    _handler: unsafe extern "msp430-interrupt" fn(),
    _reserved: u16,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
#[used]
pub static __INTERRUPTS: [Vector; 15] = [
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: PORT1 },
    Vector { _handler: PORT2 },
    Vector { _handler: USI },
    Vector { _handler: ADC10 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: TIMERA1 },
    Vector { _handler: TIMERA0 },
    Vector { _handler: WDT },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: NMI },
];
#[doc = r"Enumeration of all the interrupts. This enum is seldom used in application or library crates. It is present primarily for documenting the device's implemented interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "2 - 0xFFE4 Port 1"]
    PORT1 = 2,
    #[doc = "3 - 0xFFE6 Port 2"]
    PORT2 = 3,
    #[doc = "4 - 0xFFE8 USI"]
    USI = 4,
    #[doc = "5 - 0xFFEA ADC10"]
    ADC10 = 5,
    #[doc = "8 - 0xFFF0 Timer A CC1, TA"]
    TIMERA1 = 8,
    #[doc = "9 - 0xFFF2 Timer A CC0"]
    TIMERA0 = 9,
    #[doc = "10 - 0xFFF4 Watchdog Timer"]
    WDT = 10,
    #[doc = "14 - 0xFFFC Non-maskable"]
    NMI = 14,
}
#[doc = "Special Function"]
pub struct SPECIAL_FUNCTION {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPECIAL_FUNCTION {}
impl SPECIAL_FUNCTION {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const special_function::RegisterBlock = 0 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const special_function::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPECIAL_FUNCTION {
    type Target = special_function::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPECIAL_FUNCTION {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPECIAL_FUNCTION").finish()
    }
}
#[doc = "Special Function"]
pub mod special_function {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Interrupt Enable 1"]
        pub ie1: crate::Reg<ie1::IE1_SPEC>,
        _reserved1: [u8; 0x01],
        #[doc = "0x02 - Interrupt Flag 1"]
        pub ifg1: crate::Reg<ifg1::IFG1_SPEC>,
    }
    #[doc = "IE1 register accessor: an alias for `Reg<IE1_SPEC>`"]
    pub type IE1 = crate::Reg<ie1::IE1_SPEC>;
    #[doc = "Interrupt Enable 1"]
    pub mod ie1 {
        #[doc = "Register `IE1` reader"]
        pub struct R(crate::R<IE1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IE1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IE1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IE1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IE1` writer"]
        pub struct W(crate::W<IE1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IE1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IE1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IE1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `WDTIE` reader - Watchdog Interrupt Enable"]
        pub struct WDTIE_R(crate::FieldReader<bool, bool>);
        impl WDTIE_R {
            pub(crate) fn new(bits: bool) -> Self {
                WDTIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WDTIE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WDTIE` writer - Watchdog Interrupt Enable"]
        pub struct WDTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u8 & 0x01);
                self.w
            }
        }
        #[doc = "Field `OFIE` reader - Osc. Fault Interrupt Enable"]
        pub struct OFIE_R(crate::FieldReader<bool, bool>);
        impl OFIE_R {
            pub(crate) fn new(bits: bool) -> Self {
                OFIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OFIE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OFIE` writer - Osc. Fault Interrupt Enable"]
        pub struct OFIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OFIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u8 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `NMIIE` reader - NMI Interrupt Enable"]
        pub struct NMIIE_R(crate::FieldReader<bool, bool>);
        impl NMIIE_R {
            pub(crate) fn new(bits: bool) -> Self {
                NMIIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NMIIE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NMIIE` writer - NMI Interrupt Enable"]
        pub struct NMIIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NMIIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u8 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `ACCVIE` reader - Flash Access Violation Interrupt Enable"]
        pub struct ACCVIE_R(crate::FieldReader<bool, bool>);
        impl ACCVIE_R {
            pub(crate) fn new(bits: bool) -> Self {
                ACCVIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ACCVIE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ACCVIE` writer - Flash Access Violation Interrupt Enable"]
        pub struct ACCVIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACCVIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u8 & 0x01) << 5);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Watchdog Interrupt Enable"]
            #[inline(always)]
            pub fn wdtie(&self) -> WDTIE_R {
                WDTIE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Osc. Fault Interrupt Enable"]
            #[inline(always)]
            pub fn ofie(&self) -> OFIE_R {
                OFIE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 4 - NMI Interrupt Enable"]
            #[inline(always)]
            pub fn nmiie(&self) -> NMIIE_R {
                NMIIE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Flash Access Violation Interrupt Enable"]
            #[inline(always)]
            pub fn accvie(&self) -> ACCVIE_R {
                ACCVIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Watchdog Interrupt Enable"]
            #[inline(always)]
            pub fn wdtie(&mut self) -> WDTIE_W {
                WDTIE_W { w: self }
            }
            #[doc = "Bit 1 - Osc. Fault Interrupt Enable"]
            #[inline(always)]
            pub fn ofie(&mut self) -> OFIE_W {
                OFIE_W { w: self }
            }
            #[doc = "Bit 4 - NMI Interrupt Enable"]
            #[inline(always)]
            pub fn nmiie(&mut self) -> NMIIE_W {
                NMIIE_W { w: self }
            }
            #[doc = "Bit 5 - Flash Access Violation Interrupt Enable"]
            #[inline(always)]
            pub fn accvie(&mut self) -> ACCVIE_W {
                ACCVIE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt Enable 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ie1](index.html) module"]
        pub struct IE1_SPEC;
        impl crate::RegisterSpec for IE1_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [ie1::R](R) reader structure"]
        impl crate::Readable for IE1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ie1::W](W) writer structure"]
        impl crate::Writable for IE1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IE1 to value 0"]
        impl crate::Resettable for IE1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "IFG1 register accessor: an alias for `Reg<IFG1_SPEC>`"]
    pub type IFG1 = crate::Reg<ifg1::IFG1_SPEC>;
    #[doc = "Interrupt Flag 1"]
    pub mod ifg1 {
        #[doc = "Register `IFG1` reader"]
        pub struct R(crate::R<IFG1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<IFG1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<IFG1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<IFG1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `IFG1` writer"]
        pub struct W(crate::W<IFG1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<IFG1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<IFG1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<IFG1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `WDTIFG` reader - Watchdog Interrupt Flag"]
        pub struct WDTIFG_R(crate::FieldReader<bool, bool>);
        impl WDTIFG_R {
            pub(crate) fn new(bits: bool) -> Self {
                WDTIFG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WDTIFG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WDTIFG` writer - Watchdog Interrupt Flag"]
        pub struct WDTIFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDTIFG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u8 & 0x01);
                self.w
            }
        }
        #[doc = "Field `OFIFG` reader - Osc. Fault Interrupt Flag"]
        pub struct OFIFG_R(crate::FieldReader<bool, bool>);
        impl OFIFG_R {
            pub(crate) fn new(bits: bool) -> Self {
                OFIFG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OFIFG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OFIFG` writer - Osc. Fault Interrupt Flag"]
        pub struct OFIFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OFIFG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u8 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `PORIFG` reader - Power On Interrupt Flag"]
        pub struct PORIFG_R(crate::FieldReader<bool, bool>);
        impl PORIFG_R {
            pub(crate) fn new(bits: bool) -> Self {
                PORIFG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for PORIFG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `PORIFG` writer - Power On Interrupt Flag"]
        pub struct PORIFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PORIFG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u8 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `RSTIFG` reader - Reset Interrupt Flag"]
        pub struct RSTIFG_R(crate::FieldReader<bool, bool>);
        impl RSTIFG_R {
            pub(crate) fn new(bits: bool) -> Self {
                RSTIFG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RSTIFG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RSTIFG` writer - Reset Interrupt Flag"]
        pub struct RSTIFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSTIFG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u8 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `NMIIFG` reader - NMI Interrupt Flag"]
        pub struct NMIIFG_R(crate::FieldReader<bool, bool>);
        impl NMIIFG_R {
            pub(crate) fn new(bits: bool) -> Self {
                NMIIFG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for NMIIFG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `NMIIFG` writer - NMI Interrupt Flag"]
        pub struct NMIIFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NMIIFG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u8 & 0x01) << 4);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Watchdog Interrupt Flag"]
            #[inline(always)]
            pub fn wdtifg(&self) -> WDTIFG_R {
                WDTIFG_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Osc. Fault Interrupt Flag"]
            #[inline(always)]
            pub fn ofifg(&self) -> OFIFG_R {
                OFIFG_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Power On Interrupt Flag"]
            #[inline(always)]
            pub fn porifg(&self) -> PORIFG_R {
                PORIFG_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Reset Interrupt Flag"]
            #[inline(always)]
            pub fn rstifg(&self) -> RSTIFG_R {
                RSTIFG_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - NMI Interrupt Flag"]
            #[inline(always)]
            pub fn nmiifg(&self) -> NMIIFG_R {
                NMIIFG_R::new(((self.bits >> 4) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Watchdog Interrupt Flag"]
            #[inline(always)]
            pub fn wdtifg(&mut self) -> WDTIFG_W {
                WDTIFG_W { w: self }
            }
            #[doc = "Bit 1 - Osc. Fault Interrupt Flag"]
            #[inline(always)]
            pub fn ofifg(&mut self) -> OFIFG_W {
                OFIFG_W { w: self }
            }
            #[doc = "Bit 2 - Power On Interrupt Flag"]
            #[inline(always)]
            pub fn porifg(&mut self) -> PORIFG_W {
                PORIFG_W { w: self }
            }
            #[doc = "Bit 3 - Reset Interrupt Flag"]
            #[inline(always)]
            pub fn rstifg(&mut self) -> RSTIFG_W {
                RSTIFG_W { w: self }
            }
            #[doc = "Bit 4 - NMI Interrupt Flag"]
            #[inline(always)]
            pub fn nmiifg(&mut self) -> NMIIFG_W {
                NMIIFG_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Interrupt Flag 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ifg1](index.html) module"]
        pub struct IFG1_SPEC;
        impl crate::RegisterSpec for IFG1_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [ifg1::R](R) reader structure"]
        impl crate::Readable for IFG1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [ifg1::W](W) writer structure"]
        impl crate::Writable for IFG1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets IFG1 to value 0"]
        impl crate::Resettable for IFG1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "Port 1/2"]
pub struct PORT_1_2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PORT_1_2 {}
impl PORT_1_2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const port_1_2::RegisterBlock = 0x20 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const port_1_2::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PORT_1_2 {
    type Target = port_1_2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PORT_1_2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PORT_1_2").finish()
    }
}
#[doc = "Port 1/2"]
pub mod port_1_2 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Port 1 Input"]
        pub p1in: crate::Reg<p1in::P1IN_SPEC>,
        #[doc = "0x01 - Port 1 Output"]
        pub p1out: crate::Reg<p1out::P1OUT_SPEC>,
        #[doc = "0x02 - Port 1 Direction"]
        pub p1dir: crate::Reg<p1dir::P1DIR_SPEC>,
        #[doc = "0x03 - Port 1 Interrupt Flag"]
        pub p1ifg: crate::Reg<p1ifg::P1IFG_SPEC>,
        #[doc = "0x04 - Port 1 Interrupt Edge Select"]
        pub p1ies: crate::Reg<p1ies::P1IES_SPEC>,
        #[doc = "0x05 - Port 1 Interrupt Enable"]
        pub p1ie: crate::Reg<p1ie::P1IE_SPEC>,
        #[doc = "0x06 - Port 1 Selection"]
        pub p1sel: crate::Reg<p1sel::P1SEL_SPEC>,
        #[doc = "0x07 - Port 1 Resistor Enable"]
        pub p1ren: crate::Reg<p1ren::P1REN_SPEC>,
        #[doc = "0x08 - Port 2 Input"]
        pub p2in: crate::Reg<p2in::P2IN_SPEC>,
        #[doc = "0x09 - Port 2 Output"]
        pub p2out: crate::Reg<p2out::P2OUT_SPEC>,
        #[doc = "0x0a - Port 2 Direction"]
        pub p2dir: crate::Reg<p2dir::P2DIR_SPEC>,
        #[doc = "0x0b - Port 2 Interrupt Flag"]
        pub p2ifg: crate::Reg<p2ifg::P2IFG_SPEC>,
        #[doc = "0x0c - Port 2 Interrupt Edge Select"]
        pub p2ies: crate::Reg<p2ies::P2IES_SPEC>,
        #[doc = "0x0d - Port 2 Interrupt Enable"]
        pub p2ie: crate::Reg<p2ie::P2IE_SPEC>,
        #[doc = "0x0e - Port 2 Selection"]
        pub p2sel: crate::Reg<p2sel::P2SEL_SPEC>,
        #[doc = "0x0f - Port 2 Resistor Enable"]
        pub p2ren: crate::Reg<p2ren::P2REN_SPEC>,
    }
    #[doc = "P1IN register accessor: an alias for `Reg<P1IN_SPEC>`"]
    pub type P1IN = crate::Reg<p1in::P1IN_SPEC>;
    #[doc = "Port 1 Input"]
    pub mod p1in {
        #[doc = "Register `P1IN` reader"]
        pub struct R(crate::R<P1IN_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<P1IN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<P1IN_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<P1IN_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `P1IN` writer"]
        pub struct W(crate::W<P1IN_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<P1IN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<P1IN_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<P1IN_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `P0` reader - P0"]
        pub struct P0_R(crate::FieldReader<bool, bool>);
        impl P0_R {
            pub(crate) fn new(bits: bool) -> Self {
                P0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P0` writer - P0"]
        pub struct P0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u8 & 0x01);
                self.w
            }
        }
        #[doc = "Field `P1` reader - P1"]
        pub struct P1_R(crate::FieldReader<bool, bool>);
        impl P1_R {
            pub(crate) fn new(bits: bool) -> Self {
                P1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P1` writer - P1"]
        pub struct P1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u8 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `P2` reader - P2"]
        pub struct P2_R(crate::FieldReader<bool, bool>);
        impl P2_R {
            pub(crate) fn new(bits: bool) -> Self {
                P2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P2` writer - P2"]
        pub struct P2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u8 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `P3` reader - P3"]
        pub struct P3_R(crate::FieldReader<bool, bool>);
        impl P3_R {
            pub(crate) fn new(bits: bool) -> Self {
                P3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P3` writer - P3"]
        pub struct P3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u8 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `P4` reader - P4"]
        pub struct P4_R(crate::FieldReader<bool, bool>);
        impl P4_R {
            pub(crate) fn new(bits: bool) -> Self {
                P4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P4` writer - P4"]
        pub struct P4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u8 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `P5` reader - P5"]
        pub struct P5_R(crate::FieldReader<bool, bool>);
        impl P5_R {
            pub(crate) fn new(bits: bool) -> Self {
                P5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P5` writer - P5"]
        pub struct P5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u8 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `P6` reader - P6"]
        pub struct P6_R(crate::FieldReader<bool, bool>);
        impl P6_R {
            pub(crate) fn new(bits: bool) -> Self {
                P6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P6` writer - P6"]
        pub struct P6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u8 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `P7` reader - P7"]
        pub struct P7_R(crate::FieldReader<bool, bool>);
        impl P7_R {
            pub(crate) fn new(bits: bool) -> Self {
                P7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P7` writer - P7"]
        pub struct P7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u8 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `P1IN` reader - Port 1 Input register"]
        pub struct P1IN_R(crate::FieldReader<u8, u8>);
        impl P1IN_R {
            pub(crate) fn new(bits: u8) -> Self {
                P1IN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P1IN_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P1IN` writer - Port 1 Input register"]
        pub struct P1IN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P1IN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u8 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&self) -> P0_R {
                P0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&self) -> P1_R {
                P1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&self) -> P2_R {
                P2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&self) -> P3_R {
                P3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&self) -> P4_R {
                P4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&self) -> P5_R {
                P5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&self) -> P6_R {
                P6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&self) -> P7_R {
                P7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 0:7 - Port 1 Input register"]
            #[inline(always)]
            pub fn p1in(&self) -> P1IN_R {
                P1IN_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&mut self) -> P0_W {
                P0_W { w: self }
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&mut self) -> P1_W {
                P1_W { w: self }
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&mut self) -> P2_W {
                P2_W { w: self }
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&mut self) -> P3_W {
                P3_W { w: self }
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&mut self) -> P4_W {
                P4_W { w: self }
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&mut self) -> P5_W {
                P5_W { w: self }
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&mut self) -> P6_W {
                P6_W { w: self }
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&mut self) -> P7_W {
                P7_W { w: self }
            }
            #[doc = "Bits 0:7 - Port 1 Input register"]
            #[inline(always)]
            pub fn p1in(&mut self) -> P1IN_W {
                P1IN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Port 1 Input\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [p1in](index.html) module"]
        pub struct P1IN_SPEC;
        impl crate::RegisterSpec for P1IN_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [p1in::R](R) reader structure"]
        impl crate::Readable for P1IN_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [p1in::W](W) writer structure"]
        impl crate::Writable for P1IN_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets P1IN to value 0"]
        impl crate::Resettable for P1IN_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "P1OUT register accessor: an alias for `Reg<P1OUT_SPEC>`"]
    pub type P1OUT = crate::Reg<p1out::P1OUT_SPEC>;
    #[doc = "Port 1 Output"]
    pub mod p1out {
        #[doc = "Register `P1OUT` reader"]
        pub struct R(crate::R<P1OUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<P1OUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<P1OUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<P1OUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `P1OUT` writer"]
        pub struct W(crate::W<P1OUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<P1OUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<P1OUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<P1OUT_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `P0` reader - P0"]
        pub struct P0_R(crate::FieldReader<bool, bool>);
        impl P0_R {
            pub(crate) fn new(bits: bool) -> Self {
                P0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P0` writer - P0"]
        pub struct P0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u8 & 0x01);
                self.w
            }
        }
        #[doc = "Field `P1` reader - P1"]
        pub struct P1_R(crate::FieldReader<bool, bool>);
        impl P1_R {
            pub(crate) fn new(bits: bool) -> Self {
                P1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P1` writer - P1"]
        pub struct P1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u8 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `P2` reader - P2"]
        pub struct P2_R(crate::FieldReader<bool, bool>);
        impl P2_R {
            pub(crate) fn new(bits: bool) -> Self {
                P2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P2` writer - P2"]
        pub struct P2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u8 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `P3` reader - P3"]
        pub struct P3_R(crate::FieldReader<bool, bool>);
        impl P3_R {
            pub(crate) fn new(bits: bool) -> Self {
                P3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P3` writer - P3"]
        pub struct P3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u8 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `P4` reader - P4"]
        pub struct P4_R(crate::FieldReader<bool, bool>);
        impl P4_R {
            pub(crate) fn new(bits: bool) -> Self {
                P4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P4` writer - P4"]
        pub struct P4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u8 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `P5` reader - P5"]
        pub struct P5_R(crate::FieldReader<bool, bool>);
        impl P5_R {
            pub(crate) fn new(bits: bool) -> Self {
                P5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P5` writer - P5"]
        pub struct P5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u8 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `P6` reader - P6"]
        pub struct P6_R(crate::FieldReader<bool, bool>);
        impl P6_R {
            pub(crate) fn new(bits: bool) -> Self {
                P6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P6` writer - P6"]
        pub struct P6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u8 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `P7` reader - P7"]
        pub struct P7_R(crate::FieldReader<bool, bool>);
        impl P7_R {
            pub(crate) fn new(bits: bool) -> Self {
                P7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P7` writer - P7"]
        pub struct P7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u8 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `P1OUT` reader - Port 1 Output register"]
        pub struct P1OUT_R(crate::FieldReader<u8, u8>);
        impl P1OUT_R {
            pub(crate) fn new(bits: u8) -> Self {
                P1OUT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P1OUT_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P1OUT` writer - Port 1 Output register"]
        pub struct P1OUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P1OUT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u8 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&self) -> P0_R {
                P0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&self) -> P1_R {
                P1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&self) -> P2_R {
                P2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&self) -> P3_R {
                P3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&self) -> P4_R {
                P4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&self) -> P5_R {
                P5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&self) -> P6_R {
                P6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&self) -> P7_R {
                P7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 0:7 - Port 1 Output register"]
            #[inline(always)]
            pub fn p1out(&self) -> P1OUT_R {
                P1OUT_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&mut self) -> P0_W {
                P0_W { w: self }
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&mut self) -> P1_W {
                P1_W { w: self }
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&mut self) -> P2_W {
                P2_W { w: self }
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&mut self) -> P3_W {
                P3_W { w: self }
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&mut self) -> P4_W {
                P4_W { w: self }
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&mut self) -> P5_W {
                P5_W { w: self }
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&mut self) -> P6_W {
                P6_W { w: self }
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&mut self) -> P7_W {
                P7_W { w: self }
            }
            #[doc = "Bits 0:7 - Port 1 Output register"]
            #[inline(always)]
            pub fn p1out(&mut self) -> P1OUT_W {
                P1OUT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Port 1 Output\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [p1out](index.html) module"]
        pub struct P1OUT_SPEC;
        impl crate::RegisterSpec for P1OUT_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [p1out::R](R) reader structure"]
        impl crate::Readable for P1OUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [p1out::W](W) writer structure"]
        impl crate::Writable for P1OUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets P1OUT to value 0"]
        impl crate::Resettable for P1OUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "P1DIR register accessor: an alias for `Reg<P1DIR_SPEC>`"]
    pub type P1DIR = crate::Reg<p1dir::P1DIR_SPEC>;
    #[doc = "Port 1 Direction"]
    pub mod p1dir {
        #[doc = "Register `P1DIR` reader"]
        pub struct R(crate::R<P1DIR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<P1DIR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<P1DIR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<P1DIR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `P1DIR` writer"]
        pub struct W(crate::W<P1DIR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<P1DIR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<P1DIR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<P1DIR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `P0` reader - P0"]
        pub struct P0_R(crate::FieldReader<bool, bool>);
        impl P0_R {
            pub(crate) fn new(bits: bool) -> Self {
                P0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P0` writer - P0"]
        pub struct P0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u8 & 0x01);
                self.w
            }
        }
        #[doc = "Field `P1` reader - P1"]
        pub struct P1_R(crate::FieldReader<bool, bool>);
        impl P1_R {
            pub(crate) fn new(bits: bool) -> Self {
                P1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P1` writer - P1"]
        pub struct P1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u8 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `P2` reader - P2"]
        pub struct P2_R(crate::FieldReader<bool, bool>);
        impl P2_R {
            pub(crate) fn new(bits: bool) -> Self {
                P2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P2` writer - P2"]
        pub struct P2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u8 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `P3` reader - P3"]
        pub struct P3_R(crate::FieldReader<bool, bool>);
        impl P3_R {
            pub(crate) fn new(bits: bool) -> Self {
                P3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P3` writer - P3"]
        pub struct P3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u8 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `P4` reader - P4"]
        pub struct P4_R(crate::FieldReader<bool, bool>);
        impl P4_R {
            pub(crate) fn new(bits: bool) -> Self {
                P4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P4` writer - P4"]
        pub struct P4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u8 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `P5` reader - P5"]
        pub struct P5_R(crate::FieldReader<bool, bool>);
        impl P5_R {
            pub(crate) fn new(bits: bool) -> Self {
                P5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P5` writer - P5"]
        pub struct P5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u8 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `P6` reader - P6"]
        pub struct P6_R(crate::FieldReader<bool, bool>);
        impl P6_R {
            pub(crate) fn new(bits: bool) -> Self {
                P6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P6` writer - P6"]
        pub struct P6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u8 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `P7` reader - P7"]
        pub struct P7_R(crate::FieldReader<bool, bool>);
        impl P7_R {
            pub(crate) fn new(bits: bool) -> Self {
                P7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P7` writer - P7"]
        pub struct P7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u8 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `P1DIR` reader - Port 1 Direction register"]
        pub struct P1DIR_R(crate::FieldReader<u8, u8>);
        impl P1DIR_R {
            pub(crate) fn new(bits: u8) -> Self {
                P1DIR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P1DIR_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P1DIR` writer - Port 1 Direction register"]
        pub struct P1DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P1DIR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u8 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&self) -> P0_R {
                P0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&self) -> P1_R {
                P1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&self) -> P2_R {
                P2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&self) -> P3_R {
                P3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&self) -> P4_R {
                P4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&self) -> P5_R {
                P5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&self) -> P6_R {
                P6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&self) -> P7_R {
                P7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 0:7 - Port 1 Direction register"]
            #[inline(always)]
            pub fn p1dir(&self) -> P1DIR_R {
                P1DIR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&mut self) -> P0_W {
                P0_W { w: self }
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&mut self) -> P1_W {
                P1_W { w: self }
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&mut self) -> P2_W {
                P2_W { w: self }
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&mut self) -> P3_W {
                P3_W { w: self }
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&mut self) -> P4_W {
                P4_W { w: self }
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&mut self) -> P5_W {
                P5_W { w: self }
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&mut self) -> P6_W {
                P6_W { w: self }
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&mut self) -> P7_W {
                P7_W { w: self }
            }
            #[doc = "Bits 0:7 - Port 1 Direction register"]
            #[inline(always)]
            pub fn p1dir(&mut self) -> P1DIR_W {
                P1DIR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Port 1 Direction\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [p1dir](index.html) module"]
        pub struct P1DIR_SPEC;
        impl crate::RegisterSpec for P1DIR_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [p1dir::R](R) reader structure"]
        impl crate::Readable for P1DIR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [p1dir::W](W) writer structure"]
        impl crate::Writable for P1DIR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets P1DIR to value 0"]
        impl crate::Resettable for P1DIR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "P1IFG register accessor: an alias for `Reg<P1IFG_SPEC>`"]
    pub type P1IFG = crate::Reg<p1ifg::P1IFG_SPEC>;
    #[doc = "Port 1 Interrupt Flag"]
    pub mod p1ifg {
        #[doc = "Register `P1IFG` reader"]
        pub struct R(crate::R<P1IFG_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<P1IFG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<P1IFG_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<P1IFG_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `P1IFG` writer"]
        pub struct W(crate::W<P1IFG_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<P1IFG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<P1IFG_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<P1IFG_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `P0` reader - P0"]
        pub struct P0_R(crate::FieldReader<bool, bool>);
        impl P0_R {
            pub(crate) fn new(bits: bool) -> Self {
                P0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P0` writer - P0"]
        pub struct P0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u8 & 0x01);
                self.w
            }
        }
        #[doc = "Field `P1` reader - P1"]
        pub struct P1_R(crate::FieldReader<bool, bool>);
        impl P1_R {
            pub(crate) fn new(bits: bool) -> Self {
                P1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P1` writer - P1"]
        pub struct P1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u8 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `P2` reader - P2"]
        pub struct P2_R(crate::FieldReader<bool, bool>);
        impl P2_R {
            pub(crate) fn new(bits: bool) -> Self {
                P2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P2` writer - P2"]
        pub struct P2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u8 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `P3` reader - P3"]
        pub struct P3_R(crate::FieldReader<bool, bool>);
        impl P3_R {
            pub(crate) fn new(bits: bool) -> Self {
                P3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P3` writer - P3"]
        pub struct P3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u8 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `P4` reader - P4"]
        pub struct P4_R(crate::FieldReader<bool, bool>);
        impl P4_R {
            pub(crate) fn new(bits: bool) -> Self {
                P4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P4` writer - P4"]
        pub struct P4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u8 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `P5` reader - P5"]
        pub struct P5_R(crate::FieldReader<bool, bool>);
        impl P5_R {
            pub(crate) fn new(bits: bool) -> Self {
                P5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P5` writer - P5"]
        pub struct P5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u8 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `P6` reader - P6"]
        pub struct P6_R(crate::FieldReader<bool, bool>);
        impl P6_R {
            pub(crate) fn new(bits: bool) -> Self {
                P6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P6` writer - P6"]
        pub struct P6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u8 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `P7` reader - P7"]
        pub struct P7_R(crate::FieldReader<bool, bool>);
        impl P7_R {
            pub(crate) fn new(bits: bool) -> Self {
                P7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P7` writer - P7"]
        pub struct P7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u8 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `P1IFG` reader - Port 1 Interrupt Flag register"]
        pub struct P1IFG_R(crate::FieldReader<u8, u8>);
        impl P1IFG_R {
            pub(crate) fn new(bits: u8) -> Self {
                P1IFG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P1IFG_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P1IFG` writer - Port 1 Interrupt Flag register"]
        pub struct P1IFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P1IFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u8 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&self) -> P0_R {
                P0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&self) -> P1_R {
                P1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&self) -> P2_R {
                P2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&self) -> P3_R {
                P3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&self) -> P4_R {
                P4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&self) -> P5_R {
                P5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&self) -> P6_R {
                P6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&self) -> P7_R {
                P7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 0:7 - Port 1 Interrupt Flag register"]
            #[inline(always)]
            pub fn p1ifg(&self) -> P1IFG_R {
                P1IFG_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&mut self) -> P0_W {
                P0_W { w: self }
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&mut self) -> P1_W {
                P1_W { w: self }
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&mut self) -> P2_W {
                P2_W { w: self }
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&mut self) -> P3_W {
                P3_W { w: self }
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&mut self) -> P4_W {
                P4_W { w: self }
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&mut self) -> P5_W {
                P5_W { w: self }
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&mut self) -> P6_W {
                P6_W { w: self }
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&mut self) -> P7_W {
                P7_W { w: self }
            }
            #[doc = "Bits 0:7 - Port 1 Interrupt Flag register"]
            #[inline(always)]
            pub fn p1ifg(&mut self) -> P1IFG_W {
                P1IFG_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Port 1 Interrupt Flag\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [p1ifg](index.html) module"]
        pub struct P1IFG_SPEC;
        impl crate::RegisterSpec for P1IFG_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [p1ifg::R](R) reader structure"]
        impl crate::Readable for P1IFG_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [p1ifg::W](W) writer structure"]
        impl crate::Writable for P1IFG_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets P1IFG to value 0"]
        impl crate::Resettable for P1IFG_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "P1IES register accessor: an alias for `Reg<P1IES_SPEC>`"]
    pub type P1IES = crate::Reg<p1ies::P1IES_SPEC>;
    #[doc = "Port 1 Interrupt Edge Select"]
    pub mod p1ies {
        #[doc = "Register `P1IES` reader"]
        pub struct R(crate::R<P1IES_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<P1IES_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<P1IES_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<P1IES_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `P1IES` writer"]
        pub struct W(crate::W<P1IES_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<P1IES_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<P1IES_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<P1IES_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `P0` reader - P0"]
        pub struct P0_R(crate::FieldReader<bool, bool>);
        impl P0_R {
            pub(crate) fn new(bits: bool) -> Self {
                P0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P0` writer - P0"]
        pub struct P0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u8 & 0x01);
                self.w
            }
        }
        #[doc = "Field `P1` reader - P1"]
        pub struct P1_R(crate::FieldReader<bool, bool>);
        impl P1_R {
            pub(crate) fn new(bits: bool) -> Self {
                P1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P1` writer - P1"]
        pub struct P1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u8 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `P2` reader - P2"]
        pub struct P2_R(crate::FieldReader<bool, bool>);
        impl P2_R {
            pub(crate) fn new(bits: bool) -> Self {
                P2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P2` writer - P2"]
        pub struct P2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u8 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `P3` reader - P3"]
        pub struct P3_R(crate::FieldReader<bool, bool>);
        impl P3_R {
            pub(crate) fn new(bits: bool) -> Self {
                P3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P3` writer - P3"]
        pub struct P3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u8 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `P4` reader - P4"]
        pub struct P4_R(crate::FieldReader<bool, bool>);
        impl P4_R {
            pub(crate) fn new(bits: bool) -> Self {
                P4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P4` writer - P4"]
        pub struct P4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u8 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `P5` reader - P5"]
        pub struct P5_R(crate::FieldReader<bool, bool>);
        impl P5_R {
            pub(crate) fn new(bits: bool) -> Self {
                P5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P5` writer - P5"]
        pub struct P5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u8 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `P6` reader - P6"]
        pub struct P6_R(crate::FieldReader<bool, bool>);
        impl P6_R {
            pub(crate) fn new(bits: bool) -> Self {
                P6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P6` writer - P6"]
        pub struct P6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u8 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `P7` reader - P7"]
        pub struct P7_R(crate::FieldReader<bool, bool>);
        impl P7_R {
            pub(crate) fn new(bits: bool) -> Self {
                P7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P7` writer - P7"]
        pub struct P7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u8 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `P1IES` reader - Port 1 Interrupt Edge Select register"]
        pub struct P1IES_R(crate::FieldReader<u8, u8>);
        impl P1IES_R {
            pub(crate) fn new(bits: u8) -> Self {
                P1IES_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P1IES_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P1IES` writer - Port 1 Interrupt Edge Select register"]
        pub struct P1IES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P1IES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u8 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&self) -> P0_R {
                P0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&self) -> P1_R {
                P1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&self) -> P2_R {
                P2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&self) -> P3_R {
                P3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&self) -> P4_R {
                P4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&self) -> P5_R {
                P5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&self) -> P6_R {
                P6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&self) -> P7_R {
                P7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 0:7 - Port 1 Interrupt Edge Select register"]
            #[inline(always)]
            pub fn p1ies(&self) -> P1IES_R {
                P1IES_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&mut self) -> P0_W {
                P0_W { w: self }
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&mut self) -> P1_W {
                P1_W { w: self }
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&mut self) -> P2_W {
                P2_W { w: self }
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&mut self) -> P3_W {
                P3_W { w: self }
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&mut self) -> P4_W {
                P4_W { w: self }
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&mut self) -> P5_W {
                P5_W { w: self }
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&mut self) -> P6_W {
                P6_W { w: self }
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&mut self) -> P7_W {
                P7_W { w: self }
            }
            #[doc = "Bits 0:7 - Port 1 Interrupt Edge Select register"]
            #[inline(always)]
            pub fn p1ies(&mut self) -> P1IES_W {
                P1IES_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Port 1 Interrupt Edge Select\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [p1ies](index.html) module"]
        pub struct P1IES_SPEC;
        impl crate::RegisterSpec for P1IES_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [p1ies::R](R) reader structure"]
        impl crate::Readable for P1IES_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [p1ies::W](W) writer structure"]
        impl crate::Writable for P1IES_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets P1IES to value 0"]
        impl crate::Resettable for P1IES_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "P1IE register accessor: an alias for `Reg<P1IE_SPEC>`"]
    pub type P1IE = crate::Reg<p1ie::P1IE_SPEC>;
    #[doc = "Port 1 Interrupt Enable"]
    pub mod p1ie {
        #[doc = "Register `P1IE` reader"]
        pub struct R(crate::R<P1IE_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<P1IE_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<P1IE_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<P1IE_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `P1IE` writer"]
        pub struct W(crate::W<P1IE_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<P1IE_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<P1IE_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<P1IE_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `P0` reader - P0"]
        pub struct P0_R(crate::FieldReader<bool, bool>);
        impl P0_R {
            pub(crate) fn new(bits: bool) -> Self {
                P0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P0` writer - P0"]
        pub struct P0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u8 & 0x01);
                self.w
            }
        }
        #[doc = "Field `P1` reader - P1"]
        pub struct P1_R(crate::FieldReader<bool, bool>);
        impl P1_R {
            pub(crate) fn new(bits: bool) -> Self {
                P1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P1` writer - P1"]
        pub struct P1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u8 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `P2` reader - P2"]
        pub struct P2_R(crate::FieldReader<bool, bool>);
        impl P2_R {
            pub(crate) fn new(bits: bool) -> Self {
                P2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P2` writer - P2"]
        pub struct P2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u8 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `P3` reader - P3"]
        pub struct P3_R(crate::FieldReader<bool, bool>);
        impl P3_R {
            pub(crate) fn new(bits: bool) -> Self {
                P3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P3` writer - P3"]
        pub struct P3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u8 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `P4` reader - P4"]
        pub struct P4_R(crate::FieldReader<bool, bool>);
        impl P4_R {
            pub(crate) fn new(bits: bool) -> Self {
                P4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P4` writer - P4"]
        pub struct P4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u8 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `P5` reader - P5"]
        pub struct P5_R(crate::FieldReader<bool, bool>);
        impl P5_R {
            pub(crate) fn new(bits: bool) -> Self {
                P5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P5` writer - P5"]
        pub struct P5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u8 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `P6` reader - P6"]
        pub struct P6_R(crate::FieldReader<bool, bool>);
        impl P6_R {
            pub(crate) fn new(bits: bool) -> Self {
                P6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P6` writer - P6"]
        pub struct P6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u8 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `P7` reader - P7"]
        pub struct P7_R(crate::FieldReader<bool, bool>);
        impl P7_R {
            pub(crate) fn new(bits: bool) -> Self {
                P7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P7` writer - P7"]
        pub struct P7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u8 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `P1IE` reader - Port 1 Interrupt Enable register"]
        pub struct P1IE_R(crate::FieldReader<u8, u8>);
        impl P1IE_R {
            pub(crate) fn new(bits: u8) -> Self {
                P1IE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P1IE_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P1IE` writer - Port 1 Interrupt Enable register"]
        pub struct P1IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P1IE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u8 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&self) -> P0_R {
                P0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&self) -> P1_R {
                P1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&self) -> P2_R {
                P2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&self) -> P3_R {
                P3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&self) -> P4_R {
                P4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&self) -> P5_R {
                P5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&self) -> P6_R {
                P6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&self) -> P7_R {
                P7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 0:7 - Port 1 Interrupt Enable register"]
            #[inline(always)]
            pub fn p1ie(&self) -> P1IE_R {
                P1IE_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&mut self) -> P0_W {
                P0_W { w: self }
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&mut self) -> P1_W {
                P1_W { w: self }
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&mut self) -> P2_W {
                P2_W { w: self }
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&mut self) -> P3_W {
                P3_W { w: self }
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&mut self) -> P4_W {
                P4_W { w: self }
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&mut self) -> P5_W {
                P5_W { w: self }
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&mut self) -> P6_W {
                P6_W { w: self }
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&mut self) -> P7_W {
                P7_W { w: self }
            }
            #[doc = "Bits 0:7 - Port 1 Interrupt Enable register"]
            #[inline(always)]
            pub fn p1ie(&mut self) -> P1IE_W {
                P1IE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Port 1 Interrupt Enable\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [p1ie](index.html) module"]
        pub struct P1IE_SPEC;
        impl crate::RegisterSpec for P1IE_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [p1ie::R](R) reader structure"]
        impl crate::Readable for P1IE_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [p1ie::W](W) writer structure"]
        impl crate::Writable for P1IE_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets P1IE to value 0"]
        impl crate::Resettable for P1IE_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "P1SEL register accessor: an alias for `Reg<P1SEL_SPEC>`"]
    pub type P1SEL = crate::Reg<p1sel::P1SEL_SPEC>;
    #[doc = "Port 1 Selection"]
    pub mod p1sel {
        #[doc = "Register `P1SEL` reader"]
        pub struct R(crate::R<P1SEL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<P1SEL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<P1SEL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<P1SEL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `P1SEL` writer"]
        pub struct W(crate::W<P1SEL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<P1SEL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<P1SEL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<P1SEL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `P0` reader - P0"]
        pub struct P0_R(crate::FieldReader<bool, bool>);
        impl P0_R {
            pub(crate) fn new(bits: bool) -> Self {
                P0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P0` writer - P0"]
        pub struct P0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u8 & 0x01);
                self.w
            }
        }
        #[doc = "Field `P1` reader - P1"]
        pub struct P1_R(crate::FieldReader<bool, bool>);
        impl P1_R {
            pub(crate) fn new(bits: bool) -> Self {
                P1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P1` writer - P1"]
        pub struct P1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u8 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `P2` reader - P2"]
        pub struct P2_R(crate::FieldReader<bool, bool>);
        impl P2_R {
            pub(crate) fn new(bits: bool) -> Self {
                P2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P2` writer - P2"]
        pub struct P2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u8 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `P3` reader - P3"]
        pub struct P3_R(crate::FieldReader<bool, bool>);
        impl P3_R {
            pub(crate) fn new(bits: bool) -> Self {
                P3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P3` writer - P3"]
        pub struct P3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u8 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `P4` reader - P4"]
        pub struct P4_R(crate::FieldReader<bool, bool>);
        impl P4_R {
            pub(crate) fn new(bits: bool) -> Self {
                P4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P4` writer - P4"]
        pub struct P4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u8 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `P5` reader - P5"]
        pub struct P5_R(crate::FieldReader<bool, bool>);
        impl P5_R {
            pub(crate) fn new(bits: bool) -> Self {
                P5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P5` writer - P5"]
        pub struct P5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u8 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `P6` reader - P6"]
        pub struct P6_R(crate::FieldReader<bool, bool>);
        impl P6_R {
            pub(crate) fn new(bits: bool) -> Self {
                P6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P6` writer - P6"]
        pub struct P6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u8 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `P7` reader - P7"]
        pub struct P7_R(crate::FieldReader<bool, bool>);
        impl P7_R {
            pub(crate) fn new(bits: bool) -> Self {
                P7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P7` writer - P7"]
        pub struct P7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u8 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `P1SEL` reader - Port 1 Selection register"]
        pub struct P1SEL_R(crate::FieldReader<u8, u8>);
        impl P1SEL_R {
            pub(crate) fn new(bits: u8) -> Self {
                P1SEL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P1SEL_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P1SEL` writer - Port 1 Selection register"]
        pub struct P1SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P1SEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u8 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&self) -> P0_R {
                P0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&self) -> P1_R {
                P1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&self) -> P2_R {
                P2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&self) -> P3_R {
                P3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&self) -> P4_R {
                P4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&self) -> P5_R {
                P5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&self) -> P6_R {
                P6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&self) -> P7_R {
                P7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 0:7 - Port 1 Selection register"]
            #[inline(always)]
            pub fn p1sel(&self) -> P1SEL_R {
                P1SEL_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&mut self) -> P0_W {
                P0_W { w: self }
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&mut self) -> P1_W {
                P1_W { w: self }
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&mut self) -> P2_W {
                P2_W { w: self }
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&mut self) -> P3_W {
                P3_W { w: self }
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&mut self) -> P4_W {
                P4_W { w: self }
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&mut self) -> P5_W {
                P5_W { w: self }
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&mut self) -> P6_W {
                P6_W { w: self }
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&mut self) -> P7_W {
                P7_W { w: self }
            }
            #[doc = "Bits 0:7 - Port 1 Selection register"]
            #[inline(always)]
            pub fn p1sel(&mut self) -> P1SEL_W {
                P1SEL_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Port 1 Selection\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [p1sel](index.html) module"]
        pub struct P1SEL_SPEC;
        impl crate::RegisterSpec for P1SEL_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [p1sel::R](R) reader structure"]
        impl crate::Readable for P1SEL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [p1sel::W](W) writer structure"]
        impl crate::Writable for P1SEL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets P1SEL to value 0"]
        impl crate::Resettable for P1SEL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "P1REN register accessor: an alias for `Reg<P1REN_SPEC>`"]
    pub type P1REN = crate::Reg<p1ren::P1REN_SPEC>;
    #[doc = "Port 1 Resistor Enable"]
    pub mod p1ren {
        #[doc = "Register `P1REN` reader"]
        pub struct R(crate::R<P1REN_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<P1REN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<P1REN_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<P1REN_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `P1REN` writer"]
        pub struct W(crate::W<P1REN_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<P1REN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<P1REN_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<P1REN_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `P0` reader - P0"]
        pub struct P0_R(crate::FieldReader<bool, bool>);
        impl P0_R {
            pub(crate) fn new(bits: bool) -> Self {
                P0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P0` writer - P0"]
        pub struct P0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u8 & 0x01);
                self.w
            }
        }
        #[doc = "Field `P1` reader - P1"]
        pub struct P1_R(crate::FieldReader<bool, bool>);
        impl P1_R {
            pub(crate) fn new(bits: bool) -> Self {
                P1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P1` writer - P1"]
        pub struct P1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u8 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `P2` reader - P2"]
        pub struct P2_R(crate::FieldReader<bool, bool>);
        impl P2_R {
            pub(crate) fn new(bits: bool) -> Self {
                P2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P2` writer - P2"]
        pub struct P2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u8 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `P3` reader - P3"]
        pub struct P3_R(crate::FieldReader<bool, bool>);
        impl P3_R {
            pub(crate) fn new(bits: bool) -> Self {
                P3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P3` writer - P3"]
        pub struct P3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u8 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `P4` reader - P4"]
        pub struct P4_R(crate::FieldReader<bool, bool>);
        impl P4_R {
            pub(crate) fn new(bits: bool) -> Self {
                P4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P4` writer - P4"]
        pub struct P4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u8 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `P5` reader - P5"]
        pub struct P5_R(crate::FieldReader<bool, bool>);
        impl P5_R {
            pub(crate) fn new(bits: bool) -> Self {
                P5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P5` writer - P5"]
        pub struct P5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u8 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `P6` reader - P6"]
        pub struct P6_R(crate::FieldReader<bool, bool>);
        impl P6_R {
            pub(crate) fn new(bits: bool) -> Self {
                P6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P6` writer - P6"]
        pub struct P6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u8 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `P7` reader - P7"]
        pub struct P7_R(crate::FieldReader<bool, bool>);
        impl P7_R {
            pub(crate) fn new(bits: bool) -> Self {
                P7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P7` writer - P7"]
        pub struct P7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u8 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `P1REN` reader - Port 1 Resistor Enable register"]
        pub struct P1REN_R(crate::FieldReader<u8, u8>);
        impl P1REN_R {
            pub(crate) fn new(bits: u8) -> Self {
                P1REN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P1REN_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P1REN` writer - Port 1 Resistor Enable register"]
        pub struct P1REN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P1REN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u8 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&self) -> P0_R {
                P0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&self) -> P1_R {
                P1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&self) -> P2_R {
                P2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&self) -> P3_R {
                P3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&self) -> P4_R {
                P4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&self) -> P5_R {
                P5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&self) -> P6_R {
                P6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&self) -> P7_R {
                P7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 0:7 - Port 1 Resistor Enable register"]
            #[inline(always)]
            pub fn p1ren(&self) -> P1REN_R {
                P1REN_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&mut self) -> P0_W {
                P0_W { w: self }
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&mut self) -> P1_W {
                P1_W { w: self }
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&mut self) -> P2_W {
                P2_W { w: self }
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&mut self) -> P3_W {
                P3_W { w: self }
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&mut self) -> P4_W {
                P4_W { w: self }
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&mut self) -> P5_W {
                P5_W { w: self }
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&mut self) -> P6_W {
                P6_W { w: self }
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&mut self) -> P7_W {
                P7_W { w: self }
            }
            #[doc = "Bits 0:7 - Port 1 Resistor Enable register"]
            #[inline(always)]
            pub fn p1ren(&mut self) -> P1REN_W {
                P1REN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Port 1 Resistor Enable\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [p1ren](index.html) module"]
        pub struct P1REN_SPEC;
        impl crate::RegisterSpec for P1REN_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [p1ren::R](R) reader structure"]
        impl crate::Readable for P1REN_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [p1ren::W](W) writer structure"]
        impl crate::Writable for P1REN_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets P1REN to value 0"]
        impl crate::Resettable for P1REN_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "P2IN register accessor: an alias for `Reg<P2IN_SPEC>`"]
    pub type P2IN = crate::Reg<p2in::P2IN_SPEC>;
    #[doc = "Port 2 Input"]
    pub mod p2in {
        #[doc = "Register `P2IN` reader"]
        pub struct R(crate::R<P2IN_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<P2IN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<P2IN_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<P2IN_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `P2IN` writer"]
        pub struct W(crate::W<P2IN_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<P2IN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<P2IN_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<P2IN_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `P0` reader - P0"]
        pub struct P0_R(crate::FieldReader<bool, bool>);
        impl P0_R {
            pub(crate) fn new(bits: bool) -> Self {
                P0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P0` writer - P0"]
        pub struct P0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u8 & 0x01);
                self.w
            }
        }
        #[doc = "Field `P1` reader - P1"]
        pub struct P1_R(crate::FieldReader<bool, bool>);
        impl P1_R {
            pub(crate) fn new(bits: bool) -> Self {
                P1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P1` writer - P1"]
        pub struct P1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u8 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `P2` reader - P2"]
        pub struct P2_R(crate::FieldReader<bool, bool>);
        impl P2_R {
            pub(crate) fn new(bits: bool) -> Self {
                P2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P2` writer - P2"]
        pub struct P2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u8 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `P3` reader - P3"]
        pub struct P3_R(crate::FieldReader<bool, bool>);
        impl P3_R {
            pub(crate) fn new(bits: bool) -> Self {
                P3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P3` writer - P3"]
        pub struct P3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u8 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `P4` reader - P4"]
        pub struct P4_R(crate::FieldReader<bool, bool>);
        impl P4_R {
            pub(crate) fn new(bits: bool) -> Self {
                P4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P4` writer - P4"]
        pub struct P4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u8 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `P5` reader - P5"]
        pub struct P5_R(crate::FieldReader<bool, bool>);
        impl P5_R {
            pub(crate) fn new(bits: bool) -> Self {
                P5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P5` writer - P5"]
        pub struct P5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u8 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `P6` reader - P6"]
        pub struct P6_R(crate::FieldReader<bool, bool>);
        impl P6_R {
            pub(crate) fn new(bits: bool) -> Self {
                P6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P6` writer - P6"]
        pub struct P6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u8 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `P7` reader - P7"]
        pub struct P7_R(crate::FieldReader<bool, bool>);
        impl P7_R {
            pub(crate) fn new(bits: bool) -> Self {
                P7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P7` writer - P7"]
        pub struct P7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u8 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `P2IN` reader - Port 2 Input register"]
        pub struct P2IN_R(crate::FieldReader<u8, u8>);
        impl P2IN_R {
            pub(crate) fn new(bits: u8) -> Self {
                P2IN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P2IN_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P2IN` writer - Port 2 Input register"]
        pub struct P2IN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P2IN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u8 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&self) -> P0_R {
                P0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&self) -> P1_R {
                P1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&self) -> P2_R {
                P2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&self) -> P3_R {
                P3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&self) -> P4_R {
                P4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&self) -> P5_R {
                P5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&self) -> P6_R {
                P6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&self) -> P7_R {
                P7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 0:7 - Port 2 Input register"]
            #[inline(always)]
            pub fn p2in(&self) -> P2IN_R {
                P2IN_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&mut self) -> P0_W {
                P0_W { w: self }
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&mut self) -> P1_W {
                P1_W { w: self }
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&mut self) -> P2_W {
                P2_W { w: self }
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&mut self) -> P3_W {
                P3_W { w: self }
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&mut self) -> P4_W {
                P4_W { w: self }
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&mut self) -> P5_W {
                P5_W { w: self }
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&mut self) -> P6_W {
                P6_W { w: self }
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&mut self) -> P7_W {
                P7_W { w: self }
            }
            #[doc = "Bits 0:7 - Port 2 Input register"]
            #[inline(always)]
            pub fn p2in(&mut self) -> P2IN_W {
                P2IN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Port 2 Input\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [p2in](index.html) module"]
        pub struct P2IN_SPEC;
        impl crate::RegisterSpec for P2IN_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [p2in::R](R) reader structure"]
        impl crate::Readable for P2IN_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [p2in::W](W) writer structure"]
        impl crate::Writable for P2IN_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets P2IN to value 0"]
        impl crate::Resettable for P2IN_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "P2OUT register accessor: an alias for `Reg<P2OUT_SPEC>`"]
    pub type P2OUT = crate::Reg<p2out::P2OUT_SPEC>;
    #[doc = "Port 2 Output"]
    pub mod p2out {
        #[doc = "Register `P2OUT` reader"]
        pub struct R(crate::R<P2OUT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<P2OUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<P2OUT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<P2OUT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `P2OUT` writer"]
        pub struct W(crate::W<P2OUT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<P2OUT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<P2OUT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<P2OUT_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `P0` reader - P0"]
        pub struct P0_R(crate::FieldReader<bool, bool>);
        impl P0_R {
            pub(crate) fn new(bits: bool) -> Self {
                P0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P0` writer - P0"]
        pub struct P0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u8 & 0x01);
                self.w
            }
        }
        #[doc = "Field `P1` reader - P1"]
        pub struct P1_R(crate::FieldReader<bool, bool>);
        impl P1_R {
            pub(crate) fn new(bits: bool) -> Self {
                P1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P1` writer - P1"]
        pub struct P1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u8 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `P2` reader - P2"]
        pub struct P2_R(crate::FieldReader<bool, bool>);
        impl P2_R {
            pub(crate) fn new(bits: bool) -> Self {
                P2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P2` writer - P2"]
        pub struct P2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u8 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `P3` reader - P3"]
        pub struct P3_R(crate::FieldReader<bool, bool>);
        impl P3_R {
            pub(crate) fn new(bits: bool) -> Self {
                P3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P3` writer - P3"]
        pub struct P3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u8 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `P4` reader - P4"]
        pub struct P4_R(crate::FieldReader<bool, bool>);
        impl P4_R {
            pub(crate) fn new(bits: bool) -> Self {
                P4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P4` writer - P4"]
        pub struct P4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u8 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `P5` reader - P5"]
        pub struct P5_R(crate::FieldReader<bool, bool>);
        impl P5_R {
            pub(crate) fn new(bits: bool) -> Self {
                P5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P5` writer - P5"]
        pub struct P5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u8 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `P6` reader - P6"]
        pub struct P6_R(crate::FieldReader<bool, bool>);
        impl P6_R {
            pub(crate) fn new(bits: bool) -> Self {
                P6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P6` writer - P6"]
        pub struct P6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u8 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `P7` reader - P7"]
        pub struct P7_R(crate::FieldReader<bool, bool>);
        impl P7_R {
            pub(crate) fn new(bits: bool) -> Self {
                P7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P7` writer - P7"]
        pub struct P7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u8 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `P2OUT` reader - Port 2 Output register"]
        pub struct P2OUT_R(crate::FieldReader<u8, u8>);
        impl P2OUT_R {
            pub(crate) fn new(bits: u8) -> Self {
                P2OUT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P2OUT_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P2OUT` writer - Port 2 Output register"]
        pub struct P2OUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P2OUT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u8 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&self) -> P0_R {
                P0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&self) -> P1_R {
                P1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&self) -> P2_R {
                P2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&self) -> P3_R {
                P3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&self) -> P4_R {
                P4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&self) -> P5_R {
                P5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&self) -> P6_R {
                P6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&self) -> P7_R {
                P7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 0:7 - Port 2 Output register"]
            #[inline(always)]
            pub fn p2out(&self) -> P2OUT_R {
                P2OUT_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&mut self) -> P0_W {
                P0_W { w: self }
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&mut self) -> P1_W {
                P1_W { w: self }
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&mut self) -> P2_W {
                P2_W { w: self }
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&mut self) -> P3_W {
                P3_W { w: self }
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&mut self) -> P4_W {
                P4_W { w: self }
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&mut self) -> P5_W {
                P5_W { w: self }
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&mut self) -> P6_W {
                P6_W { w: self }
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&mut self) -> P7_W {
                P7_W { w: self }
            }
            #[doc = "Bits 0:7 - Port 2 Output register"]
            #[inline(always)]
            pub fn p2out(&mut self) -> P2OUT_W {
                P2OUT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Port 2 Output\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [p2out](index.html) module"]
        pub struct P2OUT_SPEC;
        impl crate::RegisterSpec for P2OUT_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [p2out::R](R) reader structure"]
        impl crate::Readable for P2OUT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [p2out::W](W) writer structure"]
        impl crate::Writable for P2OUT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets P2OUT to value 0"]
        impl crate::Resettable for P2OUT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "P2DIR register accessor: an alias for `Reg<P2DIR_SPEC>`"]
    pub type P2DIR = crate::Reg<p2dir::P2DIR_SPEC>;
    #[doc = "Port 2 Direction"]
    pub mod p2dir {
        #[doc = "Register `P2DIR` reader"]
        pub struct R(crate::R<P2DIR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<P2DIR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<P2DIR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<P2DIR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `P2DIR` writer"]
        pub struct W(crate::W<P2DIR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<P2DIR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<P2DIR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<P2DIR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `P0` reader - P0"]
        pub struct P0_R(crate::FieldReader<bool, bool>);
        impl P0_R {
            pub(crate) fn new(bits: bool) -> Self {
                P0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P0` writer - P0"]
        pub struct P0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u8 & 0x01);
                self.w
            }
        }
        #[doc = "Field `P1` reader - P1"]
        pub struct P1_R(crate::FieldReader<bool, bool>);
        impl P1_R {
            pub(crate) fn new(bits: bool) -> Self {
                P1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P1` writer - P1"]
        pub struct P1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u8 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `P2` reader - P2"]
        pub struct P2_R(crate::FieldReader<bool, bool>);
        impl P2_R {
            pub(crate) fn new(bits: bool) -> Self {
                P2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P2` writer - P2"]
        pub struct P2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u8 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `P3` reader - P3"]
        pub struct P3_R(crate::FieldReader<bool, bool>);
        impl P3_R {
            pub(crate) fn new(bits: bool) -> Self {
                P3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P3` writer - P3"]
        pub struct P3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u8 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `P4` reader - P4"]
        pub struct P4_R(crate::FieldReader<bool, bool>);
        impl P4_R {
            pub(crate) fn new(bits: bool) -> Self {
                P4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P4` writer - P4"]
        pub struct P4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u8 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `P5` reader - P5"]
        pub struct P5_R(crate::FieldReader<bool, bool>);
        impl P5_R {
            pub(crate) fn new(bits: bool) -> Self {
                P5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P5` writer - P5"]
        pub struct P5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u8 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `P6` reader - P6"]
        pub struct P6_R(crate::FieldReader<bool, bool>);
        impl P6_R {
            pub(crate) fn new(bits: bool) -> Self {
                P6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P6` writer - P6"]
        pub struct P6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u8 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `P7` reader - P7"]
        pub struct P7_R(crate::FieldReader<bool, bool>);
        impl P7_R {
            pub(crate) fn new(bits: bool) -> Self {
                P7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P7` writer - P7"]
        pub struct P7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u8 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `P2DIR` reader - Port 2 Direction register"]
        pub struct P2DIR_R(crate::FieldReader<u8, u8>);
        impl P2DIR_R {
            pub(crate) fn new(bits: u8) -> Self {
                P2DIR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P2DIR_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P2DIR` writer - Port 2 Direction register"]
        pub struct P2DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P2DIR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u8 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&self) -> P0_R {
                P0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&self) -> P1_R {
                P1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&self) -> P2_R {
                P2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&self) -> P3_R {
                P3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&self) -> P4_R {
                P4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&self) -> P5_R {
                P5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&self) -> P6_R {
                P6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&self) -> P7_R {
                P7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 0:7 - Port 2 Direction register"]
            #[inline(always)]
            pub fn p2dir(&self) -> P2DIR_R {
                P2DIR_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&mut self) -> P0_W {
                P0_W { w: self }
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&mut self) -> P1_W {
                P1_W { w: self }
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&mut self) -> P2_W {
                P2_W { w: self }
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&mut self) -> P3_W {
                P3_W { w: self }
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&mut self) -> P4_W {
                P4_W { w: self }
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&mut self) -> P5_W {
                P5_W { w: self }
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&mut self) -> P6_W {
                P6_W { w: self }
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&mut self) -> P7_W {
                P7_W { w: self }
            }
            #[doc = "Bits 0:7 - Port 2 Direction register"]
            #[inline(always)]
            pub fn p2dir(&mut self) -> P2DIR_W {
                P2DIR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Port 2 Direction\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [p2dir](index.html) module"]
        pub struct P2DIR_SPEC;
        impl crate::RegisterSpec for P2DIR_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [p2dir::R](R) reader structure"]
        impl crate::Readable for P2DIR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [p2dir::W](W) writer structure"]
        impl crate::Writable for P2DIR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets P2DIR to value 0"]
        impl crate::Resettable for P2DIR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "P2IFG register accessor: an alias for `Reg<P2IFG_SPEC>`"]
    pub type P2IFG = crate::Reg<p2ifg::P2IFG_SPEC>;
    #[doc = "Port 2 Interrupt Flag"]
    pub mod p2ifg {
        #[doc = "Register `P2IFG` reader"]
        pub struct R(crate::R<P2IFG_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<P2IFG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<P2IFG_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<P2IFG_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `P2IFG` writer"]
        pub struct W(crate::W<P2IFG_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<P2IFG_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<P2IFG_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<P2IFG_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `P0` reader - P0"]
        pub struct P0_R(crate::FieldReader<bool, bool>);
        impl P0_R {
            pub(crate) fn new(bits: bool) -> Self {
                P0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P0` writer - P0"]
        pub struct P0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u8 & 0x01);
                self.w
            }
        }
        #[doc = "Field `P1` reader - P1"]
        pub struct P1_R(crate::FieldReader<bool, bool>);
        impl P1_R {
            pub(crate) fn new(bits: bool) -> Self {
                P1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P1` writer - P1"]
        pub struct P1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u8 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `P2` reader - P2"]
        pub struct P2_R(crate::FieldReader<bool, bool>);
        impl P2_R {
            pub(crate) fn new(bits: bool) -> Self {
                P2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P2` writer - P2"]
        pub struct P2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u8 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `P3` reader - P3"]
        pub struct P3_R(crate::FieldReader<bool, bool>);
        impl P3_R {
            pub(crate) fn new(bits: bool) -> Self {
                P3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P3` writer - P3"]
        pub struct P3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u8 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `P4` reader - P4"]
        pub struct P4_R(crate::FieldReader<bool, bool>);
        impl P4_R {
            pub(crate) fn new(bits: bool) -> Self {
                P4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P4` writer - P4"]
        pub struct P4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u8 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `P5` reader - P5"]
        pub struct P5_R(crate::FieldReader<bool, bool>);
        impl P5_R {
            pub(crate) fn new(bits: bool) -> Self {
                P5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P5` writer - P5"]
        pub struct P5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u8 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `P6` reader - P6"]
        pub struct P6_R(crate::FieldReader<bool, bool>);
        impl P6_R {
            pub(crate) fn new(bits: bool) -> Self {
                P6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P6` writer - P6"]
        pub struct P6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u8 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `P7` reader - P7"]
        pub struct P7_R(crate::FieldReader<bool, bool>);
        impl P7_R {
            pub(crate) fn new(bits: bool) -> Self {
                P7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P7` writer - P7"]
        pub struct P7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u8 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `P2IFG` reader - Port 2 Interrupt Flag register"]
        pub struct P2IFG_R(crate::FieldReader<u8, u8>);
        impl P2IFG_R {
            pub(crate) fn new(bits: u8) -> Self {
                P2IFG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P2IFG_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P2IFG` writer - Port 2 Interrupt Flag register"]
        pub struct P2IFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P2IFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u8 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&self) -> P0_R {
                P0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&self) -> P1_R {
                P1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&self) -> P2_R {
                P2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&self) -> P3_R {
                P3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&self) -> P4_R {
                P4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&self) -> P5_R {
                P5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&self) -> P6_R {
                P6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&self) -> P7_R {
                P7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 0:7 - Port 2 Interrupt Flag register"]
            #[inline(always)]
            pub fn p2ifg(&self) -> P2IFG_R {
                P2IFG_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&mut self) -> P0_W {
                P0_W { w: self }
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&mut self) -> P1_W {
                P1_W { w: self }
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&mut self) -> P2_W {
                P2_W { w: self }
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&mut self) -> P3_W {
                P3_W { w: self }
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&mut self) -> P4_W {
                P4_W { w: self }
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&mut self) -> P5_W {
                P5_W { w: self }
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&mut self) -> P6_W {
                P6_W { w: self }
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&mut self) -> P7_W {
                P7_W { w: self }
            }
            #[doc = "Bits 0:7 - Port 2 Interrupt Flag register"]
            #[inline(always)]
            pub fn p2ifg(&mut self) -> P2IFG_W {
                P2IFG_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Port 2 Interrupt Flag\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [p2ifg](index.html) module"]
        pub struct P2IFG_SPEC;
        impl crate::RegisterSpec for P2IFG_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [p2ifg::R](R) reader structure"]
        impl crate::Readable for P2IFG_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [p2ifg::W](W) writer structure"]
        impl crate::Writable for P2IFG_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets P2IFG to value 0"]
        impl crate::Resettable for P2IFG_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "P2IES register accessor: an alias for `Reg<P2IES_SPEC>`"]
    pub type P2IES = crate::Reg<p2ies::P2IES_SPEC>;
    #[doc = "Port 2 Interrupt Edge Select"]
    pub mod p2ies {
        #[doc = "Register `P2IES` reader"]
        pub struct R(crate::R<P2IES_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<P2IES_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<P2IES_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<P2IES_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `P2IES` writer"]
        pub struct W(crate::W<P2IES_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<P2IES_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<P2IES_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<P2IES_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `P0` reader - P0"]
        pub struct P0_R(crate::FieldReader<bool, bool>);
        impl P0_R {
            pub(crate) fn new(bits: bool) -> Self {
                P0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P0` writer - P0"]
        pub struct P0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u8 & 0x01);
                self.w
            }
        }
        #[doc = "Field `P1` reader - P1"]
        pub struct P1_R(crate::FieldReader<bool, bool>);
        impl P1_R {
            pub(crate) fn new(bits: bool) -> Self {
                P1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P1` writer - P1"]
        pub struct P1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u8 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `P2` reader - P2"]
        pub struct P2_R(crate::FieldReader<bool, bool>);
        impl P2_R {
            pub(crate) fn new(bits: bool) -> Self {
                P2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P2` writer - P2"]
        pub struct P2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u8 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `P3` reader - P3"]
        pub struct P3_R(crate::FieldReader<bool, bool>);
        impl P3_R {
            pub(crate) fn new(bits: bool) -> Self {
                P3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P3` writer - P3"]
        pub struct P3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u8 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `P4` reader - P4"]
        pub struct P4_R(crate::FieldReader<bool, bool>);
        impl P4_R {
            pub(crate) fn new(bits: bool) -> Self {
                P4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P4` writer - P4"]
        pub struct P4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u8 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `P5` reader - P5"]
        pub struct P5_R(crate::FieldReader<bool, bool>);
        impl P5_R {
            pub(crate) fn new(bits: bool) -> Self {
                P5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P5` writer - P5"]
        pub struct P5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u8 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `P6` reader - P6"]
        pub struct P6_R(crate::FieldReader<bool, bool>);
        impl P6_R {
            pub(crate) fn new(bits: bool) -> Self {
                P6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P6` writer - P6"]
        pub struct P6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u8 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `P7` reader - P7"]
        pub struct P7_R(crate::FieldReader<bool, bool>);
        impl P7_R {
            pub(crate) fn new(bits: bool) -> Self {
                P7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P7` writer - P7"]
        pub struct P7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u8 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `P2IES` reader - Port 2 Interrupt Edge Select register"]
        pub struct P2IES_R(crate::FieldReader<u8, u8>);
        impl P2IES_R {
            pub(crate) fn new(bits: u8) -> Self {
                P2IES_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P2IES_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P2IES` writer - Port 2 Interrupt Edge Select register"]
        pub struct P2IES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P2IES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u8 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&self) -> P0_R {
                P0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&self) -> P1_R {
                P1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&self) -> P2_R {
                P2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&self) -> P3_R {
                P3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&self) -> P4_R {
                P4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&self) -> P5_R {
                P5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&self) -> P6_R {
                P6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&self) -> P7_R {
                P7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 0:7 - Port 2 Interrupt Edge Select register"]
            #[inline(always)]
            pub fn p2ies(&self) -> P2IES_R {
                P2IES_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&mut self) -> P0_W {
                P0_W { w: self }
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&mut self) -> P1_W {
                P1_W { w: self }
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&mut self) -> P2_W {
                P2_W { w: self }
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&mut self) -> P3_W {
                P3_W { w: self }
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&mut self) -> P4_W {
                P4_W { w: self }
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&mut self) -> P5_W {
                P5_W { w: self }
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&mut self) -> P6_W {
                P6_W { w: self }
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&mut self) -> P7_W {
                P7_W { w: self }
            }
            #[doc = "Bits 0:7 - Port 2 Interrupt Edge Select register"]
            #[inline(always)]
            pub fn p2ies(&mut self) -> P2IES_W {
                P2IES_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Port 2 Interrupt Edge Select\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [p2ies](index.html) module"]
        pub struct P2IES_SPEC;
        impl crate::RegisterSpec for P2IES_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [p2ies::R](R) reader structure"]
        impl crate::Readable for P2IES_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [p2ies::W](W) writer structure"]
        impl crate::Writable for P2IES_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets P2IES to value 0"]
        impl crate::Resettable for P2IES_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "P2IE register accessor: an alias for `Reg<P2IE_SPEC>`"]
    pub type P2IE = crate::Reg<p2ie::P2IE_SPEC>;
    #[doc = "Port 2 Interrupt Enable"]
    pub mod p2ie {
        #[doc = "Register `P2IE` reader"]
        pub struct R(crate::R<P2IE_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<P2IE_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<P2IE_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<P2IE_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `P2IE` writer"]
        pub struct W(crate::W<P2IE_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<P2IE_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<P2IE_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<P2IE_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `P0` reader - P0"]
        pub struct P0_R(crate::FieldReader<bool, bool>);
        impl P0_R {
            pub(crate) fn new(bits: bool) -> Self {
                P0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P0` writer - P0"]
        pub struct P0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u8 & 0x01);
                self.w
            }
        }
        #[doc = "Field `P1` reader - P1"]
        pub struct P1_R(crate::FieldReader<bool, bool>);
        impl P1_R {
            pub(crate) fn new(bits: bool) -> Self {
                P1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P1` writer - P1"]
        pub struct P1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u8 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `P2` reader - P2"]
        pub struct P2_R(crate::FieldReader<bool, bool>);
        impl P2_R {
            pub(crate) fn new(bits: bool) -> Self {
                P2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P2` writer - P2"]
        pub struct P2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u8 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `P3` reader - P3"]
        pub struct P3_R(crate::FieldReader<bool, bool>);
        impl P3_R {
            pub(crate) fn new(bits: bool) -> Self {
                P3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P3` writer - P3"]
        pub struct P3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u8 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `P4` reader - P4"]
        pub struct P4_R(crate::FieldReader<bool, bool>);
        impl P4_R {
            pub(crate) fn new(bits: bool) -> Self {
                P4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P4` writer - P4"]
        pub struct P4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u8 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `P5` reader - P5"]
        pub struct P5_R(crate::FieldReader<bool, bool>);
        impl P5_R {
            pub(crate) fn new(bits: bool) -> Self {
                P5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P5` writer - P5"]
        pub struct P5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u8 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `P6` reader - P6"]
        pub struct P6_R(crate::FieldReader<bool, bool>);
        impl P6_R {
            pub(crate) fn new(bits: bool) -> Self {
                P6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P6` writer - P6"]
        pub struct P6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u8 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `P7` reader - P7"]
        pub struct P7_R(crate::FieldReader<bool, bool>);
        impl P7_R {
            pub(crate) fn new(bits: bool) -> Self {
                P7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P7` writer - P7"]
        pub struct P7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u8 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `P2IE` reader - Port 2 Interrupt Enable register"]
        pub struct P2IE_R(crate::FieldReader<u8, u8>);
        impl P2IE_R {
            pub(crate) fn new(bits: u8) -> Self {
                P2IE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P2IE_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P2IE` writer - Port 2 Interrupt Enable register"]
        pub struct P2IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P2IE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u8 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&self) -> P0_R {
                P0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&self) -> P1_R {
                P1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&self) -> P2_R {
                P2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&self) -> P3_R {
                P3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&self) -> P4_R {
                P4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&self) -> P5_R {
                P5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&self) -> P6_R {
                P6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&self) -> P7_R {
                P7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 0:7 - Port 2 Interrupt Enable register"]
            #[inline(always)]
            pub fn p2ie(&self) -> P2IE_R {
                P2IE_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&mut self) -> P0_W {
                P0_W { w: self }
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&mut self) -> P1_W {
                P1_W { w: self }
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&mut self) -> P2_W {
                P2_W { w: self }
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&mut self) -> P3_W {
                P3_W { w: self }
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&mut self) -> P4_W {
                P4_W { w: self }
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&mut self) -> P5_W {
                P5_W { w: self }
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&mut self) -> P6_W {
                P6_W { w: self }
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&mut self) -> P7_W {
                P7_W { w: self }
            }
            #[doc = "Bits 0:7 - Port 2 Interrupt Enable register"]
            #[inline(always)]
            pub fn p2ie(&mut self) -> P2IE_W {
                P2IE_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Port 2 Interrupt Enable\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [p2ie](index.html) module"]
        pub struct P2IE_SPEC;
        impl crate::RegisterSpec for P2IE_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [p2ie::R](R) reader structure"]
        impl crate::Readable for P2IE_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [p2ie::W](W) writer structure"]
        impl crate::Writable for P2IE_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets P2IE to value 0"]
        impl crate::Resettable for P2IE_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "P2SEL register accessor: an alias for `Reg<P2SEL_SPEC>`"]
    pub type P2SEL = crate::Reg<p2sel::P2SEL_SPEC>;
    #[doc = "Port 2 Selection"]
    pub mod p2sel {
        #[doc = "Register `P2SEL` reader"]
        pub struct R(crate::R<P2SEL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<P2SEL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<P2SEL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<P2SEL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `P2SEL` writer"]
        pub struct W(crate::W<P2SEL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<P2SEL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<P2SEL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<P2SEL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `P0` reader - P0"]
        pub struct P0_R(crate::FieldReader<bool, bool>);
        impl P0_R {
            pub(crate) fn new(bits: bool) -> Self {
                P0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P0` writer - P0"]
        pub struct P0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u8 & 0x01);
                self.w
            }
        }
        #[doc = "Field `P1` reader - P1"]
        pub struct P1_R(crate::FieldReader<bool, bool>);
        impl P1_R {
            pub(crate) fn new(bits: bool) -> Self {
                P1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P1` writer - P1"]
        pub struct P1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u8 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `P2` reader - P2"]
        pub struct P2_R(crate::FieldReader<bool, bool>);
        impl P2_R {
            pub(crate) fn new(bits: bool) -> Self {
                P2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P2` writer - P2"]
        pub struct P2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u8 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `P3` reader - P3"]
        pub struct P3_R(crate::FieldReader<bool, bool>);
        impl P3_R {
            pub(crate) fn new(bits: bool) -> Self {
                P3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P3` writer - P3"]
        pub struct P3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u8 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `P4` reader - P4"]
        pub struct P4_R(crate::FieldReader<bool, bool>);
        impl P4_R {
            pub(crate) fn new(bits: bool) -> Self {
                P4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P4` writer - P4"]
        pub struct P4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u8 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `P5` reader - P5"]
        pub struct P5_R(crate::FieldReader<bool, bool>);
        impl P5_R {
            pub(crate) fn new(bits: bool) -> Self {
                P5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P5` writer - P5"]
        pub struct P5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u8 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `P6` reader - P6"]
        pub struct P6_R(crate::FieldReader<bool, bool>);
        impl P6_R {
            pub(crate) fn new(bits: bool) -> Self {
                P6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P6` writer - P6"]
        pub struct P6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u8 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `P7` reader - P7"]
        pub struct P7_R(crate::FieldReader<bool, bool>);
        impl P7_R {
            pub(crate) fn new(bits: bool) -> Self {
                P7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P7` writer - P7"]
        pub struct P7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u8 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `P2SEL` reader - Port 2 Selection register"]
        pub struct P2SEL_R(crate::FieldReader<u8, u8>);
        impl P2SEL_R {
            pub(crate) fn new(bits: u8) -> Self {
                P2SEL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P2SEL_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P2SEL` writer - Port 2 Selection register"]
        pub struct P2SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P2SEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u8 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&self) -> P0_R {
                P0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&self) -> P1_R {
                P1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&self) -> P2_R {
                P2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&self) -> P3_R {
                P3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&self) -> P4_R {
                P4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&self) -> P5_R {
                P5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&self) -> P6_R {
                P6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&self) -> P7_R {
                P7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 0:7 - Port 2 Selection register"]
            #[inline(always)]
            pub fn p2sel(&self) -> P2SEL_R {
                P2SEL_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&mut self) -> P0_W {
                P0_W { w: self }
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&mut self) -> P1_W {
                P1_W { w: self }
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&mut self) -> P2_W {
                P2_W { w: self }
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&mut self) -> P3_W {
                P3_W { w: self }
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&mut self) -> P4_W {
                P4_W { w: self }
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&mut self) -> P5_W {
                P5_W { w: self }
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&mut self) -> P6_W {
                P6_W { w: self }
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&mut self) -> P7_W {
                P7_W { w: self }
            }
            #[doc = "Bits 0:7 - Port 2 Selection register"]
            #[inline(always)]
            pub fn p2sel(&mut self) -> P2SEL_W {
                P2SEL_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Port 2 Selection\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [p2sel](index.html) module"]
        pub struct P2SEL_SPEC;
        impl crate::RegisterSpec for P2SEL_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [p2sel::R](R) reader structure"]
        impl crate::Readable for P2SEL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [p2sel::W](W) writer structure"]
        impl crate::Writable for P2SEL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets P2SEL to value 0"]
        impl crate::Resettable for P2SEL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "P2REN register accessor: an alias for `Reg<P2REN_SPEC>`"]
    pub type P2REN = crate::Reg<p2ren::P2REN_SPEC>;
    #[doc = "Port 2 Resistor Enable"]
    pub mod p2ren {
        #[doc = "Register `P2REN` reader"]
        pub struct R(crate::R<P2REN_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<P2REN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<P2REN_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<P2REN_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `P2REN` writer"]
        pub struct W(crate::W<P2REN_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<P2REN_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<P2REN_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<P2REN_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `P0` reader - P0"]
        pub struct P0_R(crate::FieldReader<bool, bool>);
        impl P0_R {
            pub(crate) fn new(bits: bool) -> Self {
                P0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P0_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P0` writer - P0"]
        pub struct P0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u8 & 0x01);
                self.w
            }
        }
        #[doc = "Field `P1` reader - P1"]
        pub struct P1_R(crate::FieldReader<bool, bool>);
        impl P1_R {
            pub(crate) fn new(bits: bool) -> Self {
                P1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P1` writer - P1"]
        pub struct P1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u8 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `P2` reader - P2"]
        pub struct P2_R(crate::FieldReader<bool, bool>);
        impl P2_R {
            pub(crate) fn new(bits: bool) -> Self {
                P2_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P2_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P2` writer - P2"]
        pub struct P2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u8 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `P3` reader - P3"]
        pub struct P3_R(crate::FieldReader<bool, bool>);
        impl P3_R {
            pub(crate) fn new(bits: bool) -> Self {
                P3_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P3_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P3` writer - P3"]
        pub struct P3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u8 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `P4` reader - P4"]
        pub struct P4_R(crate::FieldReader<bool, bool>);
        impl P4_R {
            pub(crate) fn new(bits: bool) -> Self {
                P4_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P4_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P4` writer - P4"]
        pub struct P4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u8 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `P5` reader - P5"]
        pub struct P5_R(crate::FieldReader<bool, bool>);
        impl P5_R {
            pub(crate) fn new(bits: bool) -> Self {
                P5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P5` writer - P5"]
        pub struct P5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u8 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `P6` reader - P6"]
        pub struct P6_R(crate::FieldReader<bool, bool>);
        impl P6_R {
            pub(crate) fn new(bits: bool) -> Self {
                P6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P6` writer - P6"]
        pub struct P6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u8 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `P7` reader - P7"]
        pub struct P7_R(crate::FieldReader<bool, bool>);
        impl P7_R {
            pub(crate) fn new(bits: bool) -> Self {
                P7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P7` writer - P7"]
        pub struct P7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u8 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `P2REN` reader - Port 2 Resistor Enable register"]
        pub struct P2REN_R(crate::FieldReader<u8, u8>);
        impl P2REN_R {
            pub(crate) fn new(bits: u8) -> Self {
                P2REN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for P2REN_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `P2REN` writer - Port 2 Resistor Enable register"]
        pub struct P2REN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> P2REN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u8 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&self) -> P0_R {
                P0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&self) -> P1_R {
                P1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&self) -> P2_R {
                P2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&self) -> P3_R {
                P3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&self) -> P4_R {
                P4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&self) -> P5_R {
                P5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&self) -> P6_R {
                P6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&self) -> P7_R {
                P7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 0:7 - Port 2 Resistor Enable register"]
            #[inline(always)]
            pub fn p2ren(&self) -> P2REN_R {
                P2REN_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - P0"]
            #[inline(always)]
            pub fn p0(&mut self) -> P0_W {
                P0_W { w: self }
            }
            #[doc = "Bit 1 - P1"]
            #[inline(always)]
            pub fn p1(&mut self) -> P1_W {
                P1_W { w: self }
            }
            #[doc = "Bit 2 - P2"]
            #[inline(always)]
            pub fn p2(&mut self) -> P2_W {
                P2_W { w: self }
            }
            #[doc = "Bit 3 - P3"]
            #[inline(always)]
            pub fn p3(&mut self) -> P3_W {
                P3_W { w: self }
            }
            #[doc = "Bit 4 - P4"]
            #[inline(always)]
            pub fn p4(&mut self) -> P4_W {
                P4_W { w: self }
            }
            #[doc = "Bit 5 - P5"]
            #[inline(always)]
            pub fn p5(&mut self) -> P5_W {
                P5_W { w: self }
            }
            #[doc = "Bit 6 - P6"]
            #[inline(always)]
            pub fn p6(&mut self) -> P6_W {
                P6_W { w: self }
            }
            #[doc = "Bit 7 - P7"]
            #[inline(always)]
            pub fn p7(&mut self) -> P7_W {
                P7_W { w: self }
            }
            #[doc = "Bits 0:7 - Port 2 Resistor Enable register"]
            #[inline(always)]
            pub fn p2ren(&mut self) -> P2REN_W {
                P2REN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Port 2 Resistor Enable\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [p2ren](index.html) module"]
        pub struct P2REN_SPEC;
        impl crate::RegisterSpec for P2REN_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [p2ren::R](R) reader structure"]
        impl crate::Readable for P2REN_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [p2ren::W](W) writer structure"]
        impl crate::Writable for P2REN_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets P2REN to value 0"]
        impl crate::Resettable for P2REN_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "ADC10"]
pub struct ADC10 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ADC10 {}
impl ADC10 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const adc10::RegisterBlock = 0x48 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const adc10::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ADC10 {
    type Target = adc10::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ADC10 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC10").finish()
    }
}
#[doc = "ADC10"]
pub mod adc10 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - ADC10 Data Transfer Control 0"]
        pub adc10dtc0: crate::Reg<adc10dtc0::ADC10DTC0_SPEC>,
        #[doc = "0x01 - ADC10 Data Transfer Control 1"]
        pub adc10dtc1: crate::Reg<adc10dtc1::ADC10DTC1_SPEC>,
        #[doc = "0x02 - ADC10 Analog Enable 0"]
        pub adc10ae0: crate::Reg<adc10ae0::ADC10AE0_SPEC>,
        _reserved3: [u8; 0x0165],
        #[doc = "0x168 - ADC10 Control 0"]
        pub adc10ctl0: crate::Reg<adc10ctl0::ADC10CTL0_SPEC>,
        #[doc = "0x16a - ADC10 Control 1"]
        pub adc10ctl1: crate::Reg<adc10ctl1::ADC10CTL1_SPEC>,
        #[doc = "0x16c - ADC10 Memory"]
        pub adc10mem: crate::Reg<adc10mem::ADC10MEM_SPEC>,
        _reserved6: [u8; 0x06],
        #[doc = "0x174 - ADC10 Data Transfer Start Address"]
        pub adc10sa: crate::Reg<adc10sa::ADC10SA_SPEC>,
    }
    #[doc = "ADC10DTC0 register accessor: an alias for `Reg<ADC10DTC0_SPEC>`"]
    pub type ADC10DTC0 = crate::Reg<adc10dtc0::ADC10DTC0_SPEC>;
    #[doc = "ADC10 Data Transfer Control 0"]
    pub mod adc10dtc0 {
        #[doc = "Register `ADC10DTC0` reader"]
        pub struct R(crate::R<ADC10DTC0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ADC10DTC0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ADC10DTC0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ADC10DTC0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ADC10DTC0` writer"]
        pub struct W(crate::W<ADC10DTC0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ADC10DTC0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ADC10DTC0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ADC10DTC0_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ADC10FETCH` reader - This bit should normally be reset"]
        pub struct ADC10FETCH_R(crate::FieldReader<bool, bool>);
        impl ADC10FETCH_R {
            pub(crate) fn new(bits: bool) -> Self {
                ADC10FETCH_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADC10FETCH_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADC10FETCH` writer - This bit should normally be reset"]
        pub struct ADC10FETCH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC10FETCH_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u8 & 0x01);
                self.w
            }
        }
        #[doc = "Field `ADC10B1` reader - ADC10 block one"]
        pub struct ADC10B1_R(crate::FieldReader<bool, bool>);
        impl ADC10B1_R {
            pub(crate) fn new(bits: bool) -> Self {
                ADC10B1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADC10B1_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADC10B1` writer - ADC10 block one"]
        pub struct ADC10B1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC10B1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u8 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `ADC10CT` reader - ADC10 continuous transfer"]
        pub struct ADC10CT_R(crate::FieldReader<bool, bool>);
        impl ADC10CT_R {
            pub(crate) fn new(bits: bool) -> Self {
                ADC10CT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADC10CT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADC10CT` writer - ADC10 continuous transfer"]
        pub struct ADC10CT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC10CT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u8 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `ADC10TB` reader - ADC10 two-block mode"]
        pub struct ADC10TB_R(crate::FieldReader<bool, bool>);
        impl ADC10TB_R {
            pub(crate) fn new(bits: bool) -> Self {
                ADC10TB_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADC10TB_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADC10TB` writer - ADC10 two-block mode"]
        pub struct ADC10TB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC10TB_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u8 & 0x01) << 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - This bit should normally be reset"]
            #[inline(always)]
            pub fn adc10fetch(&self) -> ADC10FETCH_R {
                ADC10FETCH_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - ADC10 block one"]
            #[inline(always)]
            pub fn adc10b1(&self) -> ADC10B1_R {
                ADC10B1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - ADC10 continuous transfer"]
            #[inline(always)]
            pub fn adc10ct(&self) -> ADC10CT_R {
                ADC10CT_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - ADC10 two-block mode"]
            #[inline(always)]
            pub fn adc10tb(&self) -> ADC10TB_R {
                ADC10TB_R::new(((self.bits >> 3) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - This bit should normally be reset"]
            #[inline(always)]
            pub fn adc10fetch(&mut self) -> ADC10FETCH_W {
                ADC10FETCH_W { w: self }
            }
            #[doc = "Bit 1 - ADC10 block one"]
            #[inline(always)]
            pub fn adc10b1(&mut self) -> ADC10B1_W {
                ADC10B1_W { w: self }
            }
            #[doc = "Bit 2 - ADC10 continuous transfer"]
            #[inline(always)]
            pub fn adc10ct(&mut self) -> ADC10CT_W {
                ADC10CT_W { w: self }
            }
            #[doc = "Bit 3 - ADC10 two-block mode"]
            #[inline(always)]
            pub fn adc10tb(&mut self) -> ADC10TB_W {
                ADC10TB_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "ADC10 Data Transfer Control 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [adc10dtc0](index.html) module"]
        pub struct ADC10DTC0_SPEC;
        impl crate::RegisterSpec for ADC10DTC0_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [adc10dtc0::R](R) reader structure"]
        impl crate::Readable for ADC10DTC0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [adc10dtc0::W](W) writer structure"]
        impl crate::Writable for ADC10DTC0_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ADC10DTC0 to value 0"]
        impl crate::Resettable for ADC10DTC0_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ADC10DTC1 register accessor: an alias for `Reg<ADC10DTC1_SPEC>`"]
    pub type ADC10DTC1 = crate::Reg<adc10dtc1::ADC10DTC1_SPEC>;
    #[doc = "ADC10 Data Transfer Control 1"]
    pub mod adc10dtc1 {
        #[doc = "Register `ADC10DTC1` reader"]
        pub struct R(crate::R<ADC10DTC1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ADC10DTC1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ADC10DTC1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ADC10DTC1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ADC10DTC1` writer"]
        pub struct W(crate::W<ADC10DTC1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ADC10DTC1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ADC10DTC1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ADC10DTC1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ADC10DTC1` reader - ADC10 Data Transfer Control 1 register"]
        pub struct ADC10DTC1_R(crate::FieldReader<u8, u8>);
        impl ADC10DTC1_R {
            pub(crate) fn new(bits: u8) -> Self {
                ADC10DTC1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADC10DTC1_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADC10DTC1` writer - ADC10 Data Transfer Control 1 register"]
        pub struct ADC10DTC1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC10DTC1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u8 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - ADC10 Data Transfer Control 1 register"]
            #[inline(always)]
            pub fn adc10dtc1(&self) -> ADC10DTC1_R {
                ADC10DTC1_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - ADC10 Data Transfer Control 1 register"]
            #[inline(always)]
            pub fn adc10dtc1(&mut self) -> ADC10DTC1_W {
                ADC10DTC1_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "ADC10 Data Transfer Control 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [adc10dtc1](index.html) module"]
        pub struct ADC10DTC1_SPEC;
        impl crate::RegisterSpec for ADC10DTC1_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [adc10dtc1::R](R) reader structure"]
        impl crate::Readable for ADC10DTC1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [adc10dtc1::W](W) writer structure"]
        impl crate::Writable for ADC10DTC1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ADC10DTC1 to value 0"]
        impl crate::Resettable for ADC10DTC1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ADC10AE0 register accessor: an alias for `Reg<ADC10AE0_SPEC>`"]
    pub type ADC10AE0 = crate::Reg<adc10ae0::ADC10AE0_SPEC>;
    #[doc = "ADC10 Analog Enable 0"]
    pub mod adc10ae0 {
        #[doc = "Register `ADC10AE0` reader"]
        pub struct R(crate::R<ADC10AE0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ADC10AE0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ADC10AE0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ADC10AE0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ADC10AE0` writer"]
        pub struct W(crate::W<ADC10AE0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ADC10AE0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ADC10AE0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ADC10AE0_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ADC10AE0` reader - ADC10 Analog Enable 0 register"]
        pub struct ADC10AE0_R(crate::FieldReader<u8, u8>);
        impl ADC10AE0_R {
            pub(crate) fn new(bits: u8) -> Self {
                ADC10AE0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADC10AE0_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADC10AE0` writer - ADC10 Analog Enable 0 register"]
        pub struct ADC10AE0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC10AE0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u8 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - ADC10 Analog Enable 0 register"]
            #[inline(always)]
            pub fn adc10ae0(&self) -> ADC10AE0_R {
                ADC10AE0_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - ADC10 Analog Enable 0 register"]
            #[inline(always)]
            pub fn adc10ae0(&mut self) -> ADC10AE0_W {
                ADC10AE0_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "ADC10 Analog Enable 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [adc10ae0](index.html) module"]
        pub struct ADC10AE0_SPEC;
        impl crate::RegisterSpec for ADC10AE0_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [adc10ae0::R](R) reader structure"]
        impl crate::Readable for ADC10AE0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [adc10ae0::W](W) writer structure"]
        impl crate::Writable for ADC10AE0_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ADC10AE0 to value 0"]
        impl crate::Resettable for ADC10AE0_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ADC10CTL0 register accessor: an alias for `Reg<ADC10CTL0_SPEC>`"]
    pub type ADC10CTL0 = crate::Reg<adc10ctl0::ADC10CTL0_SPEC>;
    #[doc = "ADC10 Control 0"]
    pub mod adc10ctl0 {
        #[doc = "Register `ADC10CTL0` reader"]
        pub struct R(crate::R<ADC10CTL0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ADC10CTL0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ADC10CTL0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ADC10CTL0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ADC10CTL0` writer"]
        pub struct W(crate::W<ADC10CTL0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ADC10CTL0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ADC10CTL0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ADC10CTL0_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ADC10SC` reader - ADC10 Start Conversion"]
        pub struct ADC10SC_R(crate::FieldReader<bool, bool>);
        impl ADC10SC_R {
            pub(crate) fn new(bits: bool) -> Self {
                ADC10SC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADC10SC_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADC10SC` writer - ADC10 Start Conversion"]
        pub struct ADC10SC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC10SC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u16 & 0x01);
                self.w
            }
        }
        #[doc = "Field `ENC` reader - ADC10 Enable Conversion"]
        pub struct ENC_R(crate::FieldReader<bool, bool>);
        impl ENC_R {
            pub(crate) fn new(bits: bool) -> Self {
                ENC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ENC_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ENC` writer - ADC10 Enable Conversion"]
        pub struct ENC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u16 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `ADC10IFG` reader - ADC10 Interrupt Flag"]
        pub struct ADC10IFG_R(crate::FieldReader<bool, bool>);
        impl ADC10IFG_R {
            pub(crate) fn new(bits: bool) -> Self {
                ADC10IFG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADC10IFG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADC10IFG` writer - ADC10 Interrupt Flag"]
        pub struct ADC10IFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC10IFG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u16 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `ADC10IE` reader - ADC10 Interrupt Enalbe"]
        pub struct ADC10IE_R(crate::FieldReader<bool, bool>);
        impl ADC10IE_R {
            pub(crate) fn new(bits: bool) -> Self {
                ADC10IE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADC10IE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADC10IE` writer - ADC10 Interrupt Enalbe"]
        pub struct ADC10IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC10IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u16 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `ADC10ON` reader - ADC10 On/Enable"]
        pub struct ADC10ON_R(crate::FieldReader<bool, bool>);
        impl ADC10ON_R {
            pub(crate) fn new(bits: bool) -> Self {
                ADC10ON_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADC10ON_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADC10ON` writer - ADC10 On/Enable"]
        pub struct ADC10ON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC10ON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u16 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `REFON` reader - ADC10 Reference on"]
        pub struct REFON_R(crate::FieldReader<bool, bool>);
        impl REFON_R {
            pub(crate) fn new(bits: bool) -> Self {
                REFON_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REFON_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REFON` writer - ADC10 Reference on"]
        pub struct REFON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REFON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u16 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `REF2_5V` reader - ADC10 Ref 0:1.5V / 1:2.5V"]
        pub struct REF2_5V_R(crate::FieldReader<bool, bool>);
        impl REF2_5V_R {
            pub(crate) fn new(bits: bool) -> Self {
                REF2_5V_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REF2_5V_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REF2_5V` writer - ADC10 Ref 0:1.5V / 1:2.5V"]
        pub struct REF2_5V_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REF2_5V_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u16 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `MSC` reader - ADC10 Multiple SampleConversion"]
        pub struct MSC_R(crate::FieldReader<bool, bool>);
        impl MSC_R {
            pub(crate) fn new(bits: bool) -> Self {
                MSC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MSC_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MSC` writer - ADC10 Multiple SampleConversion"]
        pub struct MSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u16 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `REFBURST` reader - ADC10 Reference Burst Mode"]
        pub struct REFBURST_R(crate::FieldReader<bool, bool>);
        impl REFBURST_R {
            pub(crate) fn new(bits: bool) -> Self {
                REFBURST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REFBURST_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REFBURST` writer - ADC10 Reference Burst Mode"]
        pub struct REFBURST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REFBURST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u16 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `REFOUT` reader - ADC10 Enalbe output of Ref."]
        pub struct REFOUT_R(crate::FieldReader<bool, bool>);
        impl REFOUT_R {
            pub(crate) fn new(bits: bool) -> Self {
                REFOUT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for REFOUT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `REFOUT` writer - ADC10 Enalbe output of Ref."]
        pub struct REFOUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REFOUT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u16 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Field `ADC10SR` reader - ADC10 Sampling Rate 0:200ksps / 1:50ksps"]
        pub struct ADC10SR_R(crate::FieldReader<bool, bool>);
        impl ADC10SR_R {
            pub(crate) fn new(bits: bool) -> Self {
                ADC10SR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADC10SR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADC10SR` writer - ADC10 Sampling Rate 0:200ksps / 1:50ksps"]
        pub struct ADC10SR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC10SR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u16 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "ADC10 Sample Hold Select Bit: 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ADC10SHT_A {
            #[doc = "0: 4 x ADC10CLKs"]
            ADC10SHT_0 = 0,
            #[doc = "1: 8 x ADC10CLKs"]
            ADC10SHT_1 = 1,
            #[doc = "2: 16 x ADC10CLKs"]
            ADC10SHT_2 = 2,
            #[doc = "3: 64 x ADC10CLKs"]
            ADC10SHT_3 = 3,
        }
        impl From<ADC10SHT_A> for u8 {
            #[inline(always)]
            fn from(variant: ADC10SHT_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `ADC10SHT` reader - ADC10 Sample Hold Select Bit: 0"]
        pub struct ADC10SHT_R(crate::FieldReader<u8, ADC10SHT_A>);
        impl ADC10SHT_R {
            pub(crate) fn new(bits: u8) -> Self {
                ADC10SHT_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADC10SHT_A {
                match self.bits {
                    0 => ADC10SHT_A::ADC10SHT_0,
                    1 => ADC10SHT_A::ADC10SHT_1,
                    2 => ADC10SHT_A::ADC10SHT_2,
                    3 => ADC10SHT_A::ADC10SHT_3,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `ADC10SHT_0`"]
            #[inline(always)]
            pub fn is_adc10sht_0(&self) -> bool {
                **self == ADC10SHT_A::ADC10SHT_0
            }
            #[doc = "Checks if the value of the field is `ADC10SHT_1`"]
            #[inline(always)]
            pub fn is_adc10sht_1(&self) -> bool {
                **self == ADC10SHT_A::ADC10SHT_1
            }
            #[doc = "Checks if the value of the field is `ADC10SHT_2`"]
            #[inline(always)]
            pub fn is_adc10sht_2(&self) -> bool {
                **self == ADC10SHT_A::ADC10SHT_2
            }
            #[doc = "Checks if the value of the field is `ADC10SHT_3`"]
            #[inline(always)]
            pub fn is_adc10sht_3(&self) -> bool {
                **self == ADC10SHT_A::ADC10SHT_3
            }
        }
        impl core::ops::Deref for ADC10SHT_R {
            type Target = crate::FieldReader<u8, ADC10SHT_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADC10SHT` writer - ADC10 Sample Hold Select Bit: 0"]
        pub struct ADC10SHT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC10SHT_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADC10SHT_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "4 x ADC10CLKs"]
            #[inline(always)]
            pub fn adc10sht_0(self) -> &'a mut W {
                self.variant(ADC10SHT_A::ADC10SHT_0)
            }
            #[doc = "8 x ADC10CLKs"]
            #[inline(always)]
            pub fn adc10sht_1(self) -> &'a mut W {
                self.variant(ADC10SHT_A::ADC10SHT_1)
            }
            #[doc = "16 x ADC10CLKs"]
            #[inline(always)]
            pub fn adc10sht_2(self) -> &'a mut W {
                self.variant(ADC10SHT_A::ADC10SHT_2)
            }
            #[doc = "64 x ADC10CLKs"]
            #[inline(always)]
            pub fn adc10sht_3(self) -> &'a mut W {
                self.variant(ADC10SHT_A::ADC10SHT_3)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 11)) | ((value as u16 & 0x03) << 11);
                self.w
            }
        }
        #[doc = "ADC10 Reference Select Bit: 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum SREF_A {
            #[doc = "0: VR+ = AVCC and VR- = AVSS"]
            SREF_0 = 0,
            #[doc = "1: VR+ = VREF+ and VR- = AVSS"]
            SREF_1 = 1,
            #[doc = "2: VR+ = VEREF+ and VR- = AVSS"]
            SREF_2 = 2,
            #[doc = "3: VR+ = VEREF+ and VR- = AVSS"]
            SREF_3 = 3,
            #[doc = "4: VR+ = AVCC and VR- = VREF-/VEREF-"]
            SREF_4 = 4,
            #[doc = "5: VR+ = VREF+ and VR- = VREF-/VEREF-"]
            SREF_5 = 5,
            #[doc = "6: VR+ = VEREF+ and VR- = VREF-/VEREF-"]
            SREF_6 = 6,
            #[doc = "7: VR+ = VEREF+ and VR- = VREF-/VEREF-"]
            SREF_7 = 7,
        }
        impl From<SREF_A> for u8 {
            #[inline(always)]
            fn from(variant: SREF_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `SREF` reader - ADC10 Reference Select Bit: 0"]
        pub struct SREF_R(crate::FieldReader<u8, SREF_A>);
        impl SREF_R {
            pub(crate) fn new(bits: u8) -> Self {
                SREF_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SREF_A {
                match self.bits {
                    0 => SREF_A::SREF_0,
                    1 => SREF_A::SREF_1,
                    2 => SREF_A::SREF_2,
                    3 => SREF_A::SREF_3,
                    4 => SREF_A::SREF_4,
                    5 => SREF_A::SREF_5,
                    6 => SREF_A::SREF_6,
                    7 => SREF_A::SREF_7,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `SREF_0`"]
            #[inline(always)]
            pub fn is_sref_0(&self) -> bool {
                **self == SREF_A::SREF_0
            }
            #[doc = "Checks if the value of the field is `SREF_1`"]
            #[inline(always)]
            pub fn is_sref_1(&self) -> bool {
                **self == SREF_A::SREF_1
            }
            #[doc = "Checks if the value of the field is `SREF_2`"]
            #[inline(always)]
            pub fn is_sref_2(&self) -> bool {
                **self == SREF_A::SREF_2
            }
            #[doc = "Checks if the value of the field is `SREF_3`"]
            #[inline(always)]
            pub fn is_sref_3(&self) -> bool {
                **self == SREF_A::SREF_3
            }
            #[doc = "Checks if the value of the field is `SREF_4`"]
            #[inline(always)]
            pub fn is_sref_4(&self) -> bool {
                **self == SREF_A::SREF_4
            }
            #[doc = "Checks if the value of the field is `SREF_5`"]
            #[inline(always)]
            pub fn is_sref_5(&self) -> bool {
                **self == SREF_A::SREF_5
            }
            #[doc = "Checks if the value of the field is `SREF_6`"]
            #[inline(always)]
            pub fn is_sref_6(&self) -> bool {
                **self == SREF_A::SREF_6
            }
            #[doc = "Checks if the value of the field is `SREF_7`"]
            #[inline(always)]
            pub fn is_sref_7(&self) -> bool {
                **self == SREF_A::SREF_7
            }
        }
        impl core::ops::Deref for SREF_R {
            type Target = crate::FieldReader<u8, SREF_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SREF` writer - ADC10 Reference Select Bit: 0"]
        pub struct SREF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SREF_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SREF_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "VR+ = AVCC and VR- = AVSS"]
            #[inline(always)]
            pub fn sref_0(self) -> &'a mut W {
                self.variant(SREF_A::SREF_0)
            }
            #[doc = "VR+ = VREF+ and VR- = AVSS"]
            #[inline(always)]
            pub fn sref_1(self) -> &'a mut W {
                self.variant(SREF_A::SREF_1)
            }
            #[doc = "VR+ = VEREF+ and VR- = AVSS"]
            #[inline(always)]
            pub fn sref_2(self) -> &'a mut W {
                self.variant(SREF_A::SREF_2)
            }
            #[doc = "VR+ = VEREF+ and VR- = AVSS"]
            #[inline(always)]
            pub fn sref_3(self) -> &'a mut W {
                self.variant(SREF_A::SREF_3)
            }
            #[doc = "VR+ = AVCC and VR- = VREF-/VEREF-"]
            #[inline(always)]
            pub fn sref_4(self) -> &'a mut W {
                self.variant(SREF_A::SREF_4)
            }
            #[doc = "VR+ = VREF+ and VR- = VREF-/VEREF-"]
            #[inline(always)]
            pub fn sref_5(self) -> &'a mut W {
                self.variant(SREF_A::SREF_5)
            }
            #[doc = "VR+ = VEREF+ and VR- = VREF-/VEREF-"]
            #[inline(always)]
            pub fn sref_6(self) -> &'a mut W {
                self.variant(SREF_A::SREF_6)
            }
            #[doc = "VR+ = VEREF+ and VR- = VREF-/VEREF-"]
            #[inline(always)]
            pub fn sref_7(self) -> &'a mut W {
                self.variant(SREF_A::SREF_7)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 13)) | ((value as u16 & 0x07) << 13);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - ADC10 Start Conversion"]
            #[inline(always)]
            pub fn adc10sc(&self) -> ADC10SC_R {
                ADC10SC_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - ADC10 Enable Conversion"]
            #[inline(always)]
            pub fn enc(&self) -> ENC_R {
                ENC_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - ADC10 Interrupt Flag"]
            #[inline(always)]
            pub fn adc10ifg(&self) -> ADC10IFG_R {
                ADC10IFG_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - ADC10 Interrupt Enalbe"]
            #[inline(always)]
            pub fn adc10ie(&self) -> ADC10IE_R {
                ADC10IE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - ADC10 On/Enable"]
            #[inline(always)]
            pub fn adc10on(&self) -> ADC10ON_R {
                ADC10ON_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - ADC10 Reference on"]
            #[inline(always)]
            pub fn refon(&self) -> REFON_R {
                REFON_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - ADC10 Ref 0:1.5V / 1:2.5V"]
            #[inline(always)]
            pub fn ref2_5v(&self) -> REF2_5V_R {
                REF2_5V_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - ADC10 Multiple SampleConversion"]
            #[inline(always)]
            pub fn msc(&self) -> MSC_R {
                MSC_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - ADC10 Reference Burst Mode"]
            #[inline(always)]
            pub fn refburst(&self) -> REFBURST_R {
                REFBURST_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - ADC10 Enalbe output of Ref."]
            #[inline(always)]
            pub fn refout(&self) -> REFOUT_R {
                REFOUT_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - ADC10 Sampling Rate 0:200ksps / 1:50ksps"]
            #[inline(always)]
            pub fn adc10sr(&self) -> ADC10SR_R {
                ADC10SR_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bits 11:12 - ADC10 Sample Hold Select Bit: 0"]
            #[inline(always)]
            pub fn adc10sht(&self) -> ADC10SHT_R {
                ADC10SHT_R::new(((self.bits >> 11) & 0x03) as u8)
            }
            #[doc = "Bits 13:15 - ADC10 Reference Select Bit: 0"]
            #[inline(always)]
            pub fn sref(&self) -> SREF_R {
                SREF_R::new(((self.bits >> 13) & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - ADC10 Start Conversion"]
            #[inline(always)]
            pub fn adc10sc(&mut self) -> ADC10SC_W {
                ADC10SC_W { w: self }
            }
            #[doc = "Bit 1 - ADC10 Enable Conversion"]
            #[inline(always)]
            pub fn enc(&mut self) -> ENC_W {
                ENC_W { w: self }
            }
            #[doc = "Bit 2 - ADC10 Interrupt Flag"]
            #[inline(always)]
            pub fn adc10ifg(&mut self) -> ADC10IFG_W {
                ADC10IFG_W { w: self }
            }
            #[doc = "Bit 3 - ADC10 Interrupt Enalbe"]
            #[inline(always)]
            pub fn adc10ie(&mut self) -> ADC10IE_W {
                ADC10IE_W { w: self }
            }
            #[doc = "Bit 4 - ADC10 On/Enable"]
            #[inline(always)]
            pub fn adc10on(&mut self) -> ADC10ON_W {
                ADC10ON_W { w: self }
            }
            #[doc = "Bit 5 - ADC10 Reference on"]
            #[inline(always)]
            pub fn refon(&mut self) -> REFON_W {
                REFON_W { w: self }
            }
            #[doc = "Bit 6 - ADC10 Ref 0:1.5V / 1:2.5V"]
            #[inline(always)]
            pub fn ref2_5v(&mut self) -> REF2_5V_W {
                REF2_5V_W { w: self }
            }
            #[doc = "Bit 7 - ADC10 Multiple SampleConversion"]
            #[inline(always)]
            pub fn msc(&mut self) -> MSC_W {
                MSC_W { w: self }
            }
            #[doc = "Bit 8 - ADC10 Reference Burst Mode"]
            #[inline(always)]
            pub fn refburst(&mut self) -> REFBURST_W {
                REFBURST_W { w: self }
            }
            #[doc = "Bit 9 - ADC10 Enalbe output of Ref."]
            #[inline(always)]
            pub fn refout(&mut self) -> REFOUT_W {
                REFOUT_W { w: self }
            }
            #[doc = "Bit 10 - ADC10 Sampling Rate 0:200ksps / 1:50ksps"]
            #[inline(always)]
            pub fn adc10sr(&mut self) -> ADC10SR_W {
                ADC10SR_W { w: self }
            }
            #[doc = "Bits 11:12 - ADC10 Sample Hold Select Bit: 0"]
            #[inline(always)]
            pub fn adc10sht(&mut self) -> ADC10SHT_W {
                ADC10SHT_W { w: self }
            }
            #[doc = "Bits 13:15 - ADC10 Reference Select Bit: 0"]
            #[inline(always)]
            pub fn sref(&mut self) -> SREF_W {
                SREF_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "ADC10 Control 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [adc10ctl0](index.html) module"]
        pub struct ADC10CTL0_SPEC;
        impl crate::RegisterSpec for ADC10CTL0_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [adc10ctl0::R](R) reader structure"]
        impl crate::Readable for ADC10CTL0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [adc10ctl0::W](W) writer structure"]
        impl crate::Writable for ADC10CTL0_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ADC10CTL0 to value 0"]
        impl crate::Resettable for ADC10CTL0_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ADC10CTL1 register accessor: an alias for `Reg<ADC10CTL1_SPEC>`"]
    pub type ADC10CTL1 = crate::Reg<adc10ctl1::ADC10CTL1_SPEC>;
    #[doc = "ADC10 Control 1"]
    pub mod adc10ctl1 {
        #[doc = "Register `ADC10CTL1` reader"]
        pub struct R(crate::R<ADC10CTL1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ADC10CTL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ADC10CTL1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ADC10CTL1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ADC10CTL1` writer"]
        pub struct W(crate::W<ADC10CTL1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ADC10CTL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ADC10CTL1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ADC10CTL1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ADC10BUSY` reader - ADC10 BUSY"]
        pub struct ADC10BUSY_R(crate::FieldReader<bool, bool>);
        impl ADC10BUSY_R {
            pub(crate) fn new(bits: bool) -> Self {
                ADC10BUSY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADC10BUSY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADC10BUSY` writer - ADC10 BUSY"]
        pub struct ADC10BUSY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC10BUSY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u16 & 0x01);
                self.w
            }
        }
        #[doc = "ADC10 Conversion Sequence Select 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CONSEQ_A {
            #[doc = "0: Single channel single conversion"]
            CONSEQ_0 = 0,
            #[doc = "1: Sequence of channels"]
            CONSEQ_1 = 1,
            #[doc = "2: Repeat single channel"]
            CONSEQ_2 = 2,
            #[doc = "3: Repeat sequence of channels"]
            CONSEQ_3 = 3,
        }
        impl From<CONSEQ_A> for u8 {
            #[inline(always)]
            fn from(variant: CONSEQ_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `CONSEQ` reader - ADC10 Conversion Sequence Select 0"]
        pub struct CONSEQ_R(crate::FieldReader<u8, CONSEQ_A>);
        impl CONSEQ_R {
            pub(crate) fn new(bits: u8) -> Self {
                CONSEQ_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CONSEQ_A {
                match self.bits {
                    0 => CONSEQ_A::CONSEQ_0,
                    1 => CONSEQ_A::CONSEQ_1,
                    2 => CONSEQ_A::CONSEQ_2,
                    3 => CONSEQ_A::CONSEQ_3,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `CONSEQ_0`"]
            #[inline(always)]
            pub fn is_conseq_0(&self) -> bool {
                **self == CONSEQ_A::CONSEQ_0
            }
            #[doc = "Checks if the value of the field is `CONSEQ_1`"]
            #[inline(always)]
            pub fn is_conseq_1(&self) -> bool {
                **self == CONSEQ_A::CONSEQ_1
            }
            #[doc = "Checks if the value of the field is `CONSEQ_2`"]
            #[inline(always)]
            pub fn is_conseq_2(&self) -> bool {
                **self == CONSEQ_A::CONSEQ_2
            }
            #[doc = "Checks if the value of the field is `CONSEQ_3`"]
            #[inline(always)]
            pub fn is_conseq_3(&self) -> bool {
                **self == CONSEQ_A::CONSEQ_3
            }
        }
        impl core::ops::Deref for CONSEQ_R {
            type Target = crate::FieldReader<u8, CONSEQ_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CONSEQ` writer - ADC10 Conversion Sequence Select 0"]
        pub struct CONSEQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CONSEQ_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CONSEQ_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Single channel single conversion"]
            #[inline(always)]
            pub fn conseq_0(self) -> &'a mut W {
                self.variant(CONSEQ_A::CONSEQ_0)
            }
            #[doc = "Sequence of channels"]
            #[inline(always)]
            pub fn conseq_1(self) -> &'a mut W {
                self.variant(CONSEQ_A::CONSEQ_1)
            }
            #[doc = "Repeat single channel"]
            #[inline(always)]
            pub fn conseq_2(self) -> &'a mut W {
                self.variant(CONSEQ_A::CONSEQ_2)
            }
            #[doc = "Repeat sequence of channels"]
            #[inline(always)]
            pub fn conseq_3(self) -> &'a mut W {
                self.variant(CONSEQ_A::CONSEQ_3)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 1)) | ((value as u16 & 0x03) << 1);
                self.w
            }
        }
        #[doc = "ADC10 Clock Source Select Bit: 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ADC10SSEL_A {
            #[doc = "0: ADC10OSC"]
            ADC10SSEL_0 = 0,
            #[doc = "1: ACLK"]
            ADC10SSEL_1 = 1,
            #[doc = "2: MCLK"]
            ADC10SSEL_2 = 2,
            #[doc = "3: SMCLK"]
            ADC10SSEL_3 = 3,
        }
        impl From<ADC10SSEL_A> for u8 {
            #[inline(always)]
            fn from(variant: ADC10SSEL_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `ADC10SSEL` reader - ADC10 Clock Source Select Bit: 0"]
        pub struct ADC10SSEL_R(crate::FieldReader<u8, ADC10SSEL_A>);
        impl ADC10SSEL_R {
            pub(crate) fn new(bits: u8) -> Self {
                ADC10SSEL_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADC10SSEL_A {
                match self.bits {
                    0 => ADC10SSEL_A::ADC10SSEL_0,
                    1 => ADC10SSEL_A::ADC10SSEL_1,
                    2 => ADC10SSEL_A::ADC10SSEL_2,
                    3 => ADC10SSEL_A::ADC10SSEL_3,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `ADC10SSEL_0`"]
            #[inline(always)]
            pub fn is_adc10ssel_0(&self) -> bool {
                **self == ADC10SSEL_A::ADC10SSEL_0
            }
            #[doc = "Checks if the value of the field is `ADC10SSEL_1`"]
            #[inline(always)]
            pub fn is_adc10ssel_1(&self) -> bool {
                **self == ADC10SSEL_A::ADC10SSEL_1
            }
            #[doc = "Checks if the value of the field is `ADC10SSEL_2`"]
            #[inline(always)]
            pub fn is_adc10ssel_2(&self) -> bool {
                **self == ADC10SSEL_A::ADC10SSEL_2
            }
            #[doc = "Checks if the value of the field is `ADC10SSEL_3`"]
            #[inline(always)]
            pub fn is_adc10ssel_3(&self) -> bool {
                **self == ADC10SSEL_A::ADC10SSEL_3
            }
        }
        impl core::ops::Deref for ADC10SSEL_R {
            type Target = crate::FieldReader<u8, ADC10SSEL_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADC10SSEL` writer - ADC10 Clock Source Select Bit: 0"]
        pub struct ADC10SSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC10SSEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADC10SSEL_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "ADC10OSC"]
            #[inline(always)]
            pub fn adc10ssel_0(self) -> &'a mut W {
                self.variant(ADC10SSEL_A::ADC10SSEL_0)
            }
            #[doc = "ACLK"]
            #[inline(always)]
            pub fn adc10ssel_1(self) -> &'a mut W {
                self.variant(ADC10SSEL_A::ADC10SSEL_1)
            }
            #[doc = "MCLK"]
            #[inline(always)]
            pub fn adc10ssel_2(self) -> &'a mut W {
                self.variant(ADC10SSEL_A::ADC10SSEL_2)
            }
            #[doc = "SMCLK"]
            #[inline(always)]
            pub fn adc10ssel_3(self) -> &'a mut W {
                self.variant(ADC10SSEL_A::ADC10SSEL_3)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 3)) | ((value as u16 & 0x03) << 3);
                self.w
            }
        }
        #[doc = "ADC10 Clock Divider Select Bit: 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ADC10DIV_A {
            #[doc = "0: ADC10 Clock Divider Select 0"]
            ADC10DIV_0 = 0,
            #[doc = "1: ADC10 Clock Divider Select 1"]
            ADC10DIV_1 = 1,
            #[doc = "2: ADC10 Clock Divider Select 2"]
            ADC10DIV_2 = 2,
            #[doc = "3: ADC10 Clock Divider Select 3"]
            ADC10DIV_3 = 3,
            #[doc = "4: ADC10 Clock Divider Select 4"]
            ADC10DIV_4 = 4,
            #[doc = "5: ADC10 Clock Divider Select 5"]
            ADC10DIV_5 = 5,
            #[doc = "6: ADC10 Clock Divider Select 6"]
            ADC10DIV_6 = 6,
            #[doc = "7: ADC10 Clock Divider Select 7"]
            ADC10DIV_7 = 7,
        }
        impl From<ADC10DIV_A> for u8 {
            #[inline(always)]
            fn from(variant: ADC10DIV_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `ADC10DIV` reader - ADC10 Clock Divider Select Bit: 0"]
        pub struct ADC10DIV_R(crate::FieldReader<u8, ADC10DIV_A>);
        impl ADC10DIV_R {
            pub(crate) fn new(bits: u8) -> Self {
                ADC10DIV_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ADC10DIV_A {
                match self.bits {
                    0 => ADC10DIV_A::ADC10DIV_0,
                    1 => ADC10DIV_A::ADC10DIV_1,
                    2 => ADC10DIV_A::ADC10DIV_2,
                    3 => ADC10DIV_A::ADC10DIV_3,
                    4 => ADC10DIV_A::ADC10DIV_4,
                    5 => ADC10DIV_A::ADC10DIV_5,
                    6 => ADC10DIV_A::ADC10DIV_6,
                    7 => ADC10DIV_A::ADC10DIV_7,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `ADC10DIV_0`"]
            #[inline(always)]
            pub fn is_adc10div_0(&self) -> bool {
                **self == ADC10DIV_A::ADC10DIV_0
            }
            #[doc = "Checks if the value of the field is `ADC10DIV_1`"]
            #[inline(always)]
            pub fn is_adc10div_1(&self) -> bool {
                **self == ADC10DIV_A::ADC10DIV_1
            }
            #[doc = "Checks if the value of the field is `ADC10DIV_2`"]
            #[inline(always)]
            pub fn is_adc10div_2(&self) -> bool {
                **self == ADC10DIV_A::ADC10DIV_2
            }
            #[doc = "Checks if the value of the field is `ADC10DIV_3`"]
            #[inline(always)]
            pub fn is_adc10div_3(&self) -> bool {
                **self == ADC10DIV_A::ADC10DIV_3
            }
            #[doc = "Checks if the value of the field is `ADC10DIV_4`"]
            #[inline(always)]
            pub fn is_adc10div_4(&self) -> bool {
                **self == ADC10DIV_A::ADC10DIV_4
            }
            #[doc = "Checks if the value of the field is `ADC10DIV_5`"]
            #[inline(always)]
            pub fn is_adc10div_5(&self) -> bool {
                **self == ADC10DIV_A::ADC10DIV_5
            }
            #[doc = "Checks if the value of the field is `ADC10DIV_6`"]
            #[inline(always)]
            pub fn is_adc10div_6(&self) -> bool {
                **self == ADC10DIV_A::ADC10DIV_6
            }
            #[doc = "Checks if the value of the field is `ADC10DIV_7`"]
            #[inline(always)]
            pub fn is_adc10div_7(&self) -> bool {
                **self == ADC10DIV_A::ADC10DIV_7
            }
        }
        impl core::ops::Deref for ADC10DIV_R {
            type Target = crate::FieldReader<u8, ADC10DIV_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADC10DIV` writer - ADC10 Clock Divider Select Bit: 0"]
        pub struct ADC10DIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC10DIV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ADC10DIV_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "ADC10 Clock Divider Select 0"]
            #[inline(always)]
            pub fn adc10div_0(self) -> &'a mut W {
                self.variant(ADC10DIV_A::ADC10DIV_0)
            }
            #[doc = "ADC10 Clock Divider Select 1"]
            #[inline(always)]
            pub fn adc10div_1(self) -> &'a mut W {
                self.variant(ADC10DIV_A::ADC10DIV_1)
            }
            #[doc = "ADC10 Clock Divider Select 2"]
            #[inline(always)]
            pub fn adc10div_2(self) -> &'a mut W {
                self.variant(ADC10DIV_A::ADC10DIV_2)
            }
            #[doc = "ADC10 Clock Divider Select 3"]
            #[inline(always)]
            pub fn adc10div_3(self) -> &'a mut W {
                self.variant(ADC10DIV_A::ADC10DIV_3)
            }
            #[doc = "ADC10 Clock Divider Select 4"]
            #[inline(always)]
            pub fn adc10div_4(self) -> &'a mut W {
                self.variant(ADC10DIV_A::ADC10DIV_4)
            }
            #[doc = "ADC10 Clock Divider Select 5"]
            #[inline(always)]
            pub fn adc10div_5(self) -> &'a mut W {
                self.variant(ADC10DIV_A::ADC10DIV_5)
            }
            #[doc = "ADC10 Clock Divider Select 6"]
            #[inline(always)]
            pub fn adc10div_6(self) -> &'a mut W {
                self.variant(ADC10DIV_A::ADC10DIV_6)
            }
            #[doc = "ADC10 Clock Divider Select 7"]
            #[inline(always)]
            pub fn adc10div_7(self) -> &'a mut W {
                self.variant(ADC10DIV_A::ADC10DIV_7)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 5)) | ((value as u16 & 0x07) << 5);
                self.w
            }
        }
        #[doc = "Field `ISSH` reader - ADC10 Invert Sample Hold Signal"]
        pub struct ISSH_R(crate::FieldReader<bool, bool>);
        impl ISSH_R {
            pub(crate) fn new(bits: bool) -> Self {
                ISSH_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ISSH_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ISSH` writer - ADC10 Invert Sample Hold Signal"]
        pub struct ISSH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ISSH_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u16 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `ADC10DF` reader - ADC10 Data Format 0:binary 1:2's complement"]
        pub struct ADC10DF_R(crate::FieldReader<bool, bool>);
        impl ADC10DF_R {
            pub(crate) fn new(bits: bool) -> Self {
                ADC10DF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADC10DF_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADC10DF` writer - ADC10 Data Format 0:binary 1:2's complement"]
        pub struct ADC10DF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC10DF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | ((value as u16 & 0x01) << 9);
                self.w
            }
        }
        #[doc = "ADC10 Sample/Hold Source Bit: 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum SHS_A {
            #[doc = "0: ADC10SC"]
            SHS_0 = 0,
            #[doc = "1: TA3 OUT1"]
            SHS_1 = 1,
            #[doc = "2: TA3 OUT0"]
            SHS_2 = 2,
            #[doc = "3: TA3 OUT2"]
            SHS_3 = 3,
        }
        impl From<SHS_A> for u8 {
            #[inline(always)]
            fn from(variant: SHS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `SHS` reader - ADC10 Sample/Hold Source Bit: 0"]
        pub struct SHS_R(crate::FieldReader<u8, SHS_A>);
        impl SHS_R {
            pub(crate) fn new(bits: u8) -> Self {
                SHS_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SHS_A {
                match self.bits {
                    0 => SHS_A::SHS_0,
                    1 => SHS_A::SHS_1,
                    2 => SHS_A::SHS_2,
                    3 => SHS_A::SHS_3,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `SHS_0`"]
            #[inline(always)]
            pub fn is_shs_0(&self) -> bool {
                **self == SHS_A::SHS_0
            }
            #[doc = "Checks if the value of the field is `SHS_1`"]
            #[inline(always)]
            pub fn is_shs_1(&self) -> bool {
                **self == SHS_A::SHS_1
            }
            #[doc = "Checks if the value of the field is `SHS_2`"]
            #[inline(always)]
            pub fn is_shs_2(&self) -> bool {
                **self == SHS_A::SHS_2
            }
            #[doc = "Checks if the value of the field is `SHS_3`"]
            #[inline(always)]
            pub fn is_shs_3(&self) -> bool {
                **self == SHS_A::SHS_3
            }
        }
        impl core::ops::Deref for SHS_R {
            type Target = crate::FieldReader<u8, SHS_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SHS` writer - ADC10 Sample/Hold Source Bit: 0"]
        pub struct SHS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SHS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SHS_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "ADC10SC"]
            #[inline(always)]
            pub fn shs_0(self) -> &'a mut W {
                self.variant(SHS_A::SHS_0)
            }
            #[doc = "TA3 OUT1"]
            #[inline(always)]
            pub fn shs_1(self) -> &'a mut W {
                self.variant(SHS_A::SHS_1)
            }
            #[doc = "TA3 OUT0"]
            #[inline(always)]
            pub fn shs_2(self) -> &'a mut W {
                self.variant(SHS_A::SHS_2)
            }
            #[doc = "TA3 OUT2"]
            #[inline(always)]
            pub fn shs_3(self) -> &'a mut W {
                self.variant(SHS_A::SHS_3)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | ((value as u16 & 0x03) << 10);
                self.w
            }
        }
        #[doc = "ADC10 Input Channel Select Bit: 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum INCH_A {
            #[doc = "0: Selects Channel 0"]
            INCH_0 = 0,
            #[doc = "1: Selects Channel 1"]
            INCH_1 = 1,
            #[doc = "2: Selects Channel 2"]
            INCH_2 = 2,
            #[doc = "3: Selects Channel 3"]
            INCH_3 = 3,
            #[doc = "4: Selects Channel 4"]
            INCH_4 = 4,
            #[doc = "5: Selects Channel 5"]
            INCH_5 = 5,
            #[doc = "6: Selects Channel 6"]
            INCH_6 = 6,
            #[doc = "7: Selects Channel 7"]
            INCH_7 = 7,
            #[doc = "8: Selects Channel 8"]
            INCH_8 = 8,
            #[doc = "9: Selects Channel 9"]
            INCH_9 = 9,
            #[doc = "10: Selects Channel 10"]
            INCH_10 = 10,
            #[doc = "11: Selects Channel 11"]
            INCH_11 = 11,
            #[doc = "12: Selects Channel 12"]
            INCH_12 = 12,
            #[doc = "13: Selects Channel 13"]
            INCH_13 = 13,
            #[doc = "14: Selects Channel 14"]
            INCH_14 = 14,
            #[doc = "15: Selects Channel 15"]
            INCH_15 = 15,
        }
        impl From<INCH_A> for u8 {
            #[inline(always)]
            fn from(variant: INCH_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `INCH` reader - ADC10 Input Channel Select Bit: 0"]
        pub struct INCH_R(crate::FieldReader<u8, INCH_A>);
        impl INCH_R {
            pub(crate) fn new(bits: u8) -> Self {
                INCH_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> INCH_A {
                match self.bits {
                    0 => INCH_A::INCH_0,
                    1 => INCH_A::INCH_1,
                    2 => INCH_A::INCH_2,
                    3 => INCH_A::INCH_3,
                    4 => INCH_A::INCH_4,
                    5 => INCH_A::INCH_5,
                    6 => INCH_A::INCH_6,
                    7 => INCH_A::INCH_7,
                    8 => INCH_A::INCH_8,
                    9 => INCH_A::INCH_9,
                    10 => INCH_A::INCH_10,
                    11 => INCH_A::INCH_11,
                    12 => INCH_A::INCH_12,
                    13 => INCH_A::INCH_13,
                    14 => INCH_A::INCH_14,
                    15 => INCH_A::INCH_15,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `INCH_0`"]
            #[inline(always)]
            pub fn is_inch_0(&self) -> bool {
                **self == INCH_A::INCH_0
            }
            #[doc = "Checks if the value of the field is `INCH_1`"]
            #[inline(always)]
            pub fn is_inch_1(&self) -> bool {
                **self == INCH_A::INCH_1
            }
            #[doc = "Checks if the value of the field is `INCH_2`"]
            #[inline(always)]
            pub fn is_inch_2(&self) -> bool {
                **self == INCH_A::INCH_2
            }
            #[doc = "Checks if the value of the field is `INCH_3`"]
            #[inline(always)]
            pub fn is_inch_3(&self) -> bool {
                **self == INCH_A::INCH_3
            }
            #[doc = "Checks if the value of the field is `INCH_4`"]
            #[inline(always)]
            pub fn is_inch_4(&self) -> bool {
                **self == INCH_A::INCH_4
            }
            #[doc = "Checks if the value of the field is `INCH_5`"]
            #[inline(always)]
            pub fn is_inch_5(&self) -> bool {
                **self == INCH_A::INCH_5
            }
            #[doc = "Checks if the value of the field is `INCH_6`"]
            #[inline(always)]
            pub fn is_inch_6(&self) -> bool {
                **self == INCH_A::INCH_6
            }
            #[doc = "Checks if the value of the field is `INCH_7`"]
            #[inline(always)]
            pub fn is_inch_7(&self) -> bool {
                **self == INCH_A::INCH_7
            }
            #[doc = "Checks if the value of the field is `INCH_8`"]
            #[inline(always)]
            pub fn is_inch_8(&self) -> bool {
                **self == INCH_A::INCH_8
            }
            #[doc = "Checks if the value of the field is `INCH_9`"]
            #[inline(always)]
            pub fn is_inch_9(&self) -> bool {
                **self == INCH_A::INCH_9
            }
            #[doc = "Checks if the value of the field is `INCH_10`"]
            #[inline(always)]
            pub fn is_inch_10(&self) -> bool {
                **self == INCH_A::INCH_10
            }
            #[doc = "Checks if the value of the field is `INCH_11`"]
            #[inline(always)]
            pub fn is_inch_11(&self) -> bool {
                **self == INCH_A::INCH_11
            }
            #[doc = "Checks if the value of the field is `INCH_12`"]
            #[inline(always)]
            pub fn is_inch_12(&self) -> bool {
                **self == INCH_A::INCH_12
            }
            #[doc = "Checks if the value of the field is `INCH_13`"]
            #[inline(always)]
            pub fn is_inch_13(&self) -> bool {
                **self == INCH_A::INCH_13
            }
            #[doc = "Checks if the value of the field is `INCH_14`"]
            #[inline(always)]
            pub fn is_inch_14(&self) -> bool {
                **self == INCH_A::INCH_14
            }
            #[doc = "Checks if the value of the field is `INCH_15`"]
            #[inline(always)]
            pub fn is_inch_15(&self) -> bool {
                **self == INCH_A::INCH_15
            }
        }
        impl core::ops::Deref for INCH_R {
            type Target = crate::FieldReader<u8, INCH_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `INCH` writer - ADC10 Input Channel Select Bit: 0"]
        pub struct INCH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INCH_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: INCH_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Selects Channel 0"]
            #[inline(always)]
            pub fn inch_0(self) -> &'a mut W {
                self.variant(INCH_A::INCH_0)
            }
            #[doc = "Selects Channel 1"]
            #[inline(always)]
            pub fn inch_1(self) -> &'a mut W {
                self.variant(INCH_A::INCH_1)
            }
            #[doc = "Selects Channel 2"]
            #[inline(always)]
            pub fn inch_2(self) -> &'a mut W {
                self.variant(INCH_A::INCH_2)
            }
            #[doc = "Selects Channel 3"]
            #[inline(always)]
            pub fn inch_3(self) -> &'a mut W {
                self.variant(INCH_A::INCH_3)
            }
            #[doc = "Selects Channel 4"]
            #[inline(always)]
            pub fn inch_4(self) -> &'a mut W {
                self.variant(INCH_A::INCH_4)
            }
            #[doc = "Selects Channel 5"]
            #[inline(always)]
            pub fn inch_5(self) -> &'a mut W {
                self.variant(INCH_A::INCH_5)
            }
            #[doc = "Selects Channel 6"]
            #[inline(always)]
            pub fn inch_6(self) -> &'a mut W {
                self.variant(INCH_A::INCH_6)
            }
            #[doc = "Selects Channel 7"]
            #[inline(always)]
            pub fn inch_7(self) -> &'a mut W {
                self.variant(INCH_A::INCH_7)
            }
            #[doc = "Selects Channel 8"]
            #[inline(always)]
            pub fn inch_8(self) -> &'a mut W {
                self.variant(INCH_A::INCH_8)
            }
            #[doc = "Selects Channel 9"]
            #[inline(always)]
            pub fn inch_9(self) -> &'a mut W {
                self.variant(INCH_A::INCH_9)
            }
            #[doc = "Selects Channel 10"]
            #[inline(always)]
            pub fn inch_10(self) -> &'a mut W {
                self.variant(INCH_A::INCH_10)
            }
            #[doc = "Selects Channel 11"]
            #[inline(always)]
            pub fn inch_11(self) -> &'a mut W {
                self.variant(INCH_A::INCH_11)
            }
            #[doc = "Selects Channel 12"]
            #[inline(always)]
            pub fn inch_12(self) -> &'a mut W {
                self.variant(INCH_A::INCH_12)
            }
            #[doc = "Selects Channel 13"]
            #[inline(always)]
            pub fn inch_13(self) -> &'a mut W {
                self.variant(INCH_A::INCH_13)
            }
            #[doc = "Selects Channel 14"]
            #[inline(always)]
            pub fn inch_14(self) -> &'a mut W {
                self.variant(INCH_A::INCH_14)
            }
            #[doc = "Selects Channel 15"]
            #[inline(always)]
            pub fn inch_15(self) -> &'a mut W {
                self.variant(INCH_A::INCH_15)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | ((value as u16 & 0x0f) << 12);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - ADC10 BUSY"]
            #[inline(always)]
            pub fn adc10busy(&self) -> ADC10BUSY_R {
                ADC10BUSY_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bits 1:2 - ADC10 Conversion Sequence Select 0"]
            #[inline(always)]
            pub fn conseq(&self) -> CONSEQ_R {
                CONSEQ_R::new(((self.bits >> 1) & 0x03) as u8)
            }
            #[doc = "Bits 3:4 - ADC10 Clock Source Select Bit: 0"]
            #[inline(always)]
            pub fn adc10ssel(&self) -> ADC10SSEL_R {
                ADC10SSEL_R::new(((self.bits >> 3) & 0x03) as u8)
            }
            #[doc = "Bits 5:7 - ADC10 Clock Divider Select Bit: 0"]
            #[inline(always)]
            pub fn adc10div(&self) -> ADC10DIV_R {
                ADC10DIV_R::new(((self.bits >> 5) & 0x07) as u8)
            }
            #[doc = "Bit 8 - ADC10 Invert Sample Hold Signal"]
            #[inline(always)]
            pub fn issh(&self) -> ISSH_R {
                ISSH_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - ADC10 Data Format 0:binary 1:2's complement"]
            #[inline(always)]
            pub fn adc10df(&self) -> ADC10DF_R {
                ADC10DF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - ADC10 Sample/Hold Source Bit: 0"]
            #[inline(always)]
            pub fn shs(&self) -> SHS_R {
                SHS_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 12:15 - ADC10 Input Channel Select Bit: 0"]
            #[inline(always)]
            pub fn inch(&self) -> INCH_R {
                INCH_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - ADC10 BUSY"]
            #[inline(always)]
            pub fn adc10busy(&mut self) -> ADC10BUSY_W {
                ADC10BUSY_W { w: self }
            }
            #[doc = "Bits 1:2 - ADC10 Conversion Sequence Select 0"]
            #[inline(always)]
            pub fn conseq(&mut self) -> CONSEQ_W {
                CONSEQ_W { w: self }
            }
            #[doc = "Bits 3:4 - ADC10 Clock Source Select Bit: 0"]
            #[inline(always)]
            pub fn adc10ssel(&mut self) -> ADC10SSEL_W {
                ADC10SSEL_W { w: self }
            }
            #[doc = "Bits 5:7 - ADC10 Clock Divider Select Bit: 0"]
            #[inline(always)]
            pub fn adc10div(&mut self) -> ADC10DIV_W {
                ADC10DIV_W { w: self }
            }
            #[doc = "Bit 8 - ADC10 Invert Sample Hold Signal"]
            #[inline(always)]
            pub fn issh(&mut self) -> ISSH_W {
                ISSH_W { w: self }
            }
            #[doc = "Bit 9 - ADC10 Data Format 0:binary 1:2's complement"]
            #[inline(always)]
            pub fn adc10df(&mut self) -> ADC10DF_W {
                ADC10DF_W { w: self }
            }
            #[doc = "Bits 10:11 - ADC10 Sample/Hold Source Bit: 0"]
            #[inline(always)]
            pub fn shs(&mut self) -> SHS_W {
                SHS_W { w: self }
            }
            #[doc = "Bits 12:15 - ADC10 Input Channel Select Bit: 0"]
            #[inline(always)]
            pub fn inch(&mut self) -> INCH_W {
                INCH_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "ADC10 Control 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [adc10ctl1](index.html) module"]
        pub struct ADC10CTL1_SPEC;
        impl crate::RegisterSpec for ADC10CTL1_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [adc10ctl1::R](R) reader structure"]
        impl crate::Readable for ADC10CTL1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [adc10ctl1::W](W) writer structure"]
        impl crate::Writable for ADC10CTL1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ADC10CTL1 to value 0"]
        impl crate::Resettable for ADC10CTL1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ADC10MEM register accessor: an alias for `Reg<ADC10MEM_SPEC>`"]
    pub type ADC10MEM = crate::Reg<adc10mem::ADC10MEM_SPEC>;
    #[doc = "ADC10 Memory"]
    pub mod adc10mem {
        #[doc = "Register `ADC10MEM` reader"]
        pub struct R(crate::R<ADC10MEM_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ADC10MEM_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ADC10MEM_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ADC10MEM_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ADC10MEM` writer"]
        pub struct W(crate::W<ADC10MEM_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ADC10MEM_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ADC10MEM_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ADC10MEM_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ADC10MEM` reader - ADC10 Memory register"]
        pub struct ADC10MEM_R(crate::FieldReader<u16, u16>);
        impl ADC10MEM_R {
            pub(crate) fn new(bits: u16) -> Self {
                ADC10MEM_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADC10MEM_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADC10MEM` writer - ADC10 Memory register"]
        pub struct ADC10MEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC10MEM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u16 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - ADC10 Memory register"]
            #[inline(always)]
            pub fn adc10mem(&self) -> ADC10MEM_R {
                ADC10MEM_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - ADC10 Memory register"]
            #[inline(always)]
            pub fn adc10mem(&mut self) -> ADC10MEM_W {
                ADC10MEM_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "ADC10 Memory\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [adc10mem](index.html) module"]
        pub struct ADC10MEM_SPEC;
        impl crate::RegisterSpec for ADC10MEM_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [adc10mem::R](R) reader structure"]
        impl crate::Readable for ADC10MEM_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [adc10mem::W](W) writer structure"]
        impl crate::Writable for ADC10MEM_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ADC10MEM to value 0"]
        impl crate::Resettable for ADC10MEM_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "ADC10SA register accessor: an alias for `Reg<ADC10SA_SPEC>`"]
    pub type ADC10SA = crate::Reg<adc10sa::ADC10SA_SPEC>;
    #[doc = "ADC10 Data Transfer Start Address"]
    pub mod adc10sa {
        #[doc = "Register `ADC10SA` reader"]
        pub struct R(crate::R<ADC10SA_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<ADC10SA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<ADC10SA_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<ADC10SA_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `ADC10SA` writer"]
        pub struct W(crate::W<ADC10SA_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<ADC10SA_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<ADC10SA_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<ADC10SA_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ADC10SA` reader - ADC10 Data Transfer Start Address register"]
        pub struct ADC10SA_R(crate::FieldReader<u16, u16>);
        impl ADC10SA_R {
            pub(crate) fn new(bits: u16) -> Self {
                ADC10SA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ADC10SA_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ADC10SA` writer - ADC10 Data Transfer Start Address register"]
        pub struct ADC10SA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADC10SA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u16 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - ADC10 Data Transfer Start Address register"]
            #[inline(always)]
            pub fn adc10sa(&self) -> ADC10SA_R {
                ADC10SA_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - ADC10 Data Transfer Start Address register"]
            #[inline(always)]
            pub fn adc10sa(&mut self) -> ADC10SA_W {
                ADC10SA_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "ADC10 Data Transfer Start Address\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [adc10sa](index.html) module"]
        pub struct ADC10SA_SPEC;
        impl crate::RegisterSpec for ADC10SA_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [adc10sa::R](R) reader structure"]
        impl crate::Readable for ADC10SA_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [adc10sa::W](W) writer structure"]
        impl crate::Writable for ADC10SA_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets ADC10SA to value 0"]
        impl crate::Resettable for ADC10SA_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "System Clock"]
pub struct SYSTEM_CLOCK {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SYSTEM_CLOCK {}
impl SYSTEM_CLOCK {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const system_clock::RegisterBlock = 0x52 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const system_clock::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SYSTEM_CLOCK {
    type Target = system_clock::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SYSTEM_CLOCK {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SYSTEM_CLOCK").finish()
    }
}
#[doc = "System Clock"]
pub mod system_clock {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        _reserved0: [u8; 0x01],
        #[doc = "0x01 - Basic Clock System Control 3"]
        pub bcsctl3: crate::Reg<bcsctl3::BCSCTL3_SPEC>,
        _reserved1: [u8; 0x02],
        #[doc = "0x04 - DCO Clock Frequency Control"]
        pub dcoctl: crate::Reg<dcoctl::DCOCTL_SPEC>,
        #[doc = "0x05 - Basic Clock System Control 1"]
        pub bcsctl1: crate::Reg<bcsctl1::BCSCTL1_SPEC>,
        #[doc = "0x06 - Basic Clock System Control 2"]
        pub bcsctl2: crate::Reg<bcsctl2::BCSCTL2_SPEC>,
    }
    #[doc = "BCSCTL3 register accessor: an alias for `Reg<BCSCTL3_SPEC>`"]
    pub type BCSCTL3 = crate::Reg<bcsctl3::BCSCTL3_SPEC>;
    #[doc = "Basic Clock System Control 3"]
    pub mod bcsctl3 {
        #[doc = "Register `BCSCTL3` reader"]
        pub struct R(crate::R<BCSCTL3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<BCSCTL3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<BCSCTL3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<BCSCTL3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `BCSCTL3` writer"]
        pub struct W(crate::W<BCSCTL3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<BCSCTL3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<BCSCTL3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<BCSCTL3_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `LFXT1OF` reader - Low/high Frequency Oscillator Fault Flag"]
        pub struct LFXT1OF_R(crate::FieldReader<bool, bool>);
        impl LFXT1OF_R {
            pub(crate) fn new(bits: bool) -> Self {
                LFXT1OF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LFXT1OF_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LFXT1OF` writer - Low/high Frequency Oscillator Fault Flag"]
        pub struct LFXT1OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LFXT1OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u8 & 0x01);
                self.w
            }
        }
        #[doc = "Field `XT2OF` reader - High frequency oscillator 2 fault flag"]
        pub struct XT2OF_R(crate::FieldReader<bool, bool>);
        impl XT2OF_R {
            pub(crate) fn new(bits: bool) -> Self {
                XT2OF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for XT2OF_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `XT2OF` writer - High frequency oscillator 2 fault flag"]
        pub struct XT2OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> XT2OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u8 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "XIN/XOUT Cap 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum XCAP_A {
            #[doc = "0: XIN/XOUT Cap : 0 pF"]
            XCAP_0 = 0,
            #[doc = "1: XIN/XOUT Cap : 6 pF"]
            XCAP_1 = 1,
            #[doc = "2: XIN/XOUT Cap : 10 pF"]
            XCAP_2 = 2,
            #[doc = "3: XIN/XOUT Cap : 12.5 pF"]
            XCAP_3 = 3,
        }
        impl From<XCAP_A> for u8 {
            #[inline(always)]
            fn from(variant: XCAP_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `XCAP` reader - XIN/XOUT Cap 0"]
        pub struct XCAP_R(crate::FieldReader<u8, XCAP_A>);
        impl XCAP_R {
            pub(crate) fn new(bits: u8) -> Self {
                XCAP_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> XCAP_A {
                match self.bits {
                    0 => XCAP_A::XCAP_0,
                    1 => XCAP_A::XCAP_1,
                    2 => XCAP_A::XCAP_2,
                    3 => XCAP_A::XCAP_3,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `XCAP_0`"]
            #[inline(always)]
            pub fn is_xcap_0(&self) -> bool {
                **self == XCAP_A::XCAP_0
            }
            #[doc = "Checks if the value of the field is `XCAP_1`"]
            #[inline(always)]
            pub fn is_xcap_1(&self) -> bool {
                **self == XCAP_A::XCAP_1
            }
            #[doc = "Checks if the value of the field is `XCAP_2`"]
            #[inline(always)]
            pub fn is_xcap_2(&self) -> bool {
                **self == XCAP_A::XCAP_2
            }
            #[doc = "Checks if the value of the field is `XCAP_3`"]
            #[inline(always)]
            pub fn is_xcap_3(&self) -> bool {
                **self == XCAP_A::XCAP_3
            }
        }
        impl core::ops::Deref for XCAP_R {
            type Target = crate::FieldReader<u8, XCAP_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `XCAP` writer - XIN/XOUT Cap 0"]
        pub struct XCAP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> XCAP_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: XCAP_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "XIN/XOUT Cap : 0 pF"]
            #[inline(always)]
            pub fn xcap_0(self) -> &'a mut W {
                self.variant(XCAP_A::XCAP_0)
            }
            #[doc = "XIN/XOUT Cap : 6 pF"]
            #[inline(always)]
            pub fn xcap_1(self) -> &'a mut W {
                self.variant(XCAP_A::XCAP_1)
            }
            #[doc = "XIN/XOUT Cap : 10 pF"]
            #[inline(always)]
            pub fn xcap_2(self) -> &'a mut W {
                self.variant(XCAP_A::XCAP_2)
            }
            #[doc = "XIN/XOUT Cap : 12.5 pF"]
            #[inline(always)]
            pub fn xcap_3(self) -> &'a mut W {
                self.variant(XCAP_A::XCAP_3)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | ((value as u8 & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Mode 0 for LFXT1 (XTS = 0)\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum LFXT1S_A {
            #[doc = "0: Mode 0 for LFXT1 : Normal operation"]
            LFXT1S_0 = 0,
            #[doc = "1: Mode 1 for LFXT1 : Reserved"]
            LFXT1S_1 = 1,
            #[doc = "2: Mode 2 for LFXT1 : VLO"]
            LFXT1S_2 = 2,
            #[doc = "3: Mode 3 for LFXT1 : Digital input signal"]
            LFXT1S_3 = 3,
        }
        impl From<LFXT1S_A> for u8 {
            #[inline(always)]
            fn from(variant: LFXT1S_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `LFXT1S` reader - Mode 0 for LFXT1 (XTS = 0)"]
        pub struct LFXT1S_R(crate::FieldReader<u8, LFXT1S_A>);
        impl LFXT1S_R {
            pub(crate) fn new(bits: u8) -> Self {
                LFXT1S_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> LFXT1S_A {
                match self.bits {
                    0 => LFXT1S_A::LFXT1S_0,
                    1 => LFXT1S_A::LFXT1S_1,
                    2 => LFXT1S_A::LFXT1S_2,
                    3 => LFXT1S_A::LFXT1S_3,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `LFXT1S_0`"]
            #[inline(always)]
            pub fn is_lfxt1s_0(&self) -> bool {
                **self == LFXT1S_A::LFXT1S_0
            }
            #[doc = "Checks if the value of the field is `LFXT1S_1`"]
            #[inline(always)]
            pub fn is_lfxt1s_1(&self) -> bool {
                **self == LFXT1S_A::LFXT1S_1
            }
            #[doc = "Checks if the value of the field is `LFXT1S_2`"]
            #[inline(always)]
            pub fn is_lfxt1s_2(&self) -> bool {
                **self == LFXT1S_A::LFXT1S_2
            }
            #[doc = "Checks if the value of the field is `LFXT1S_3`"]
            #[inline(always)]
            pub fn is_lfxt1s_3(&self) -> bool {
                **self == LFXT1S_A::LFXT1S_3
            }
        }
        impl core::ops::Deref for LFXT1S_R {
            type Target = crate::FieldReader<u8, LFXT1S_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LFXT1S` writer - Mode 0 for LFXT1 (XTS = 0)"]
        pub struct LFXT1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LFXT1S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: LFXT1S_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Mode 0 for LFXT1 : Normal operation"]
            #[inline(always)]
            pub fn lfxt1s_0(self) -> &'a mut W {
                self.variant(LFXT1S_A::LFXT1S_0)
            }
            #[doc = "Mode 1 for LFXT1 : Reserved"]
            #[inline(always)]
            pub fn lfxt1s_1(self) -> &'a mut W {
                self.variant(LFXT1S_A::LFXT1S_1)
            }
            #[doc = "Mode 2 for LFXT1 : VLO"]
            #[inline(always)]
            pub fn lfxt1s_2(self) -> &'a mut W {
                self.variant(LFXT1S_A::LFXT1S_2)
            }
            #[doc = "Mode 3 for LFXT1 : Digital input signal"]
            #[inline(always)]
            pub fn lfxt1s_3(self) -> &'a mut W {
                self.variant(LFXT1S_A::LFXT1S_3)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | ((value as u8 & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Mode 0 for XT2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum XT2S_A {
            #[doc = "0: Mode 0 for XT2 : 0.4 - 1 MHz"]
            XT2S_0 = 0,
            #[doc = "1: Mode 1 for XT2 : 1 - 4 MHz"]
            XT2S_1 = 1,
            #[doc = "2: Mode 2 for XT2 : 2 - 16 MHz"]
            XT2S_2 = 2,
            #[doc = "3: Mode 3 for XT2 : Digital input signal"]
            XT2S_3 = 3,
        }
        impl From<XT2S_A> for u8 {
            #[inline(always)]
            fn from(variant: XT2S_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `XT2S` reader - Mode 0 for XT2"]
        pub struct XT2S_R(crate::FieldReader<u8, XT2S_A>);
        impl XT2S_R {
            pub(crate) fn new(bits: u8) -> Self {
                XT2S_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> XT2S_A {
                match self.bits {
                    0 => XT2S_A::XT2S_0,
                    1 => XT2S_A::XT2S_1,
                    2 => XT2S_A::XT2S_2,
                    3 => XT2S_A::XT2S_3,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `XT2S_0`"]
            #[inline(always)]
            pub fn is_xt2s_0(&self) -> bool {
                **self == XT2S_A::XT2S_0
            }
            #[doc = "Checks if the value of the field is `XT2S_1`"]
            #[inline(always)]
            pub fn is_xt2s_1(&self) -> bool {
                **self == XT2S_A::XT2S_1
            }
            #[doc = "Checks if the value of the field is `XT2S_2`"]
            #[inline(always)]
            pub fn is_xt2s_2(&self) -> bool {
                **self == XT2S_A::XT2S_2
            }
            #[doc = "Checks if the value of the field is `XT2S_3`"]
            #[inline(always)]
            pub fn is_xt2s_3(&self) -> bool {
                **self == XT2S_A::XT2S_3
            }
        }
        impl core::ops::Deref for XT2S_R {
            type Target = crate::FieldReader<u8, XT2S_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `XT2S` writer - Mode 0 for XT2"]
        pub struct XT2S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> XT2S_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: XT2S_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Mode 0 for XT2 : 0.4 - 1 MHz"]
            #[inline(always)]
            pub fn xt2s_0(self) -> &'a mut W {
                self.variant(XT2S_A::XT2S_0)
            }
            #[doc = "Mode 1 for XT2 : 1 - 4 MHz"]
            #[inline(always)]
            pub fn xt2s_1(self) -> &'a mut W {
                self.variant(XT2S_A::XT2S_1)
            }
            #[doc = "Mode 2 for XT2 : 2 - 16 MHz"]
            #[inline(always)]
            pub fn xt2s_2(self) -> &'a mut W {
                self.variant(XT2S_A::XT2S_2)
            }
            #[doc = "Mode 3 for XT2 : Digital input signal"]
            #[inline(always)]
            pub fn xt2s_3(self) -> &'a mut W {
                self.variant(XT2S_A::XT2S_3)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | ((value as u8 & 0x03) << 6);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Low/high Frequency Oscillator Fault Flag"]
            #[inline(always)]
            pub fn lfxt1of(&self) -> LFXT1OF_R {
                LFXT1OF_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - High frequency oscillator 2 fault flag"]
            #[inline(always)]
            pub fn xt2of(&self) -> XT2OF_R {
                XT2OF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bits 2:3 - XIN/XOUT Cap 0"]
            #[inline(always)]
            pub fn xcap(&self) -> XCAP_R {
                XCAP_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Mode 0 for LFXT1 (XTS = 0)"]
            #[inline(always)]
            pub fn lfxt1s(&self) -> LFXT1S_R {
                LFXT1S_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Mode 0 for XT2"]
            #[inline(always)]
            pub fn xt2s(&self) -> XT2S_R {
                XT2S_R::new(((self.bits >> 6) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - Low/high Frequency Oscillator Fault Flag"]
            #[inline(always)]
            pub fn lfxt1of(&mut self) -> LFXT1OF_W {
                LFXT1OF_W { w: self }
            }
            #[doc = "Bit 1 - High frequency oscillator 2 fault flag"]
            #[inline(always)]
            pub fn xt2of(&mut self) -> XT2OF_W {
                XT2OF_W { w: self }
            }
            #[doc = "Bits 2:3 - XIN/XOUT Cap 0"]
            #[inline(always)]
            pub fn xcap(&mut self) -> XCAP_W {
                XCAP_W { w: self }
            }
            #[doc = "Bits 4:5 - Mode 0 for LFXT1 (XTS = 0)"]
            #[inline(always)]
            pub fn lfxt1s(&mut self) -> LFXT1S_W {
                LFXT1S_W { w: self }
            }
            #[doc = "Bits 6:7 - Mode 0 for XT2"]
            #[inline(always)]
            pub fn xt2s(&mut self) -> XT2S_W {
                XT2S_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Basic Clock System Control 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bcsctl3](index.html) module"]
        pub struct BCSCTL3_SPEC;
        impl crate::RegisterSpec for BCSCTL3_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [bcsctl3::R](R) reader structure"]
        impl crate::Readable for BCSCTL3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [bcsctl3::W](W) writer structure"]
        impl crate::Writable for BCSCTL3_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets BCSCTL3 to value 0"]
        impl crate::Resettable for BCSCTL3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "DCOCTL register accessor: an alias for `Reg<DCOCTL_SPEC>`"]
    pub type DCOCTL = crate::Reg<dcoctl::DCOCTL_SPEC>;
    #[doc = "DCO Clock Frequency Control"]
    pub mod dcoctl {
        #[doc = "Register `DCOCTL` reader"]
        pub struct R(crate::R<DCOCTL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<DCOCTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<DCOCTL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<DCOCTL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `DCOCTL` writer"]
        pub struct W(crate::W<DCOCTL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<DCOCTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<DCOCTL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<DCOCTL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `DCOCTL` reader - DCO Clock Frequency Control register"]
        pub struct DCOCTL_R(crate::FieldReader<u8, u8>);
        impl DCOCTL_R {
            pub(crate) fn new(bits: u8) -> Self {
                DCOCTL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DCOCTL_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DCOCTL` writer - DCO Clock Frequency Control register"]
        pub struct DCOCTL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DCOCTL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u8 & 0xff);
                self.w
            }
        }
        #[doc = "Field `DCO` reader - DCO Select Bit 0"]
        pub struct DCO_R(crate::FieldReader<u8, u8>);
        impl DCO_R {
            pub(crate) fn new(bits: u8) -> Self {
                DCO_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for DCO_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DCO` writer - DCO Select Bit 0"]
        pub struct DCO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DCO_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 5)) | ((value as u8 & 0x07) << 5);
                self.w
            }
        }
        #[doc = "Field `MOD` reader - Modulation Bit 0"]
        pub struct MOD_R(crate::FieldReader<u8, u8>);
        impl MOD_R {
            pub(crate) fn new(bits: u8) -> Self {
                MOD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MOD_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MOD` writer - Modulation Bit 0"]
        pub struct MOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MOD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | (value as u8 & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - DCO Clock Frequency Control register"]
            #[inline(always)]
            pub fn dcoctl(&self) -> DCOCTL_R {
                DCOCTL_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 5:7 - DCO Select Bit 0"]
            #[inline(always)]
            pub fn dco(&self) -> DCO_R {
                DCO_R::new(((self.bits >> 5) & 0x07) as u8)
            }
            #[doc = "Bits 0:4 - Modulation Bit 0"]
            #[inline(always)]
            pub fn mod_(&self) -> MOD_R {
                MOD_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - DCO Clock Frequency Control register"]
            #[inline(always)]
            pub fn dcoctl(&mut self) -> DCOCTL_W {
                DCOCTL_W { w: self }
            }
            #[doc = "Bits 5:7 - DCO Select Bit 0"]
            #[inline(always)]
            pub fn dco(&mut self) -> DCO_W {
                DCO_W { w: self }
            }
            #[doc = "Bits 0:4 - Modulation Bit 0"]
            #[inline(always)]
            pub fn mod_(&mut self) -> MOD_W {
                MOD_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DCO Clock Frequency Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dcoctl](index.html) module"]
        pub struct DCOCTL_SPEC;
        impl crate::RegisterSpec for DCOCTL_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [dcoctl::R](R) reader structure"]
        impl crate::Readable for DCOCTL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [dcoctl::W](W) writer structure"]
        impl crate::Writable for DCOCTL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets DCOCTL to value 0"]
        impl crate::Resettable for DCOCTL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "BCSCTL1 register accessor: an alias for `Reg<BCSCTL1_SPEC>`"]
    pub type BCSCTL1 = crate::Reg<bcsctl1::BCSCTL1_SPEC>;
    #[doc = "Basic Clock System Control 1"]
    pub mod bcsctl1 {
        #[doc = "Register `BCSCTL1` reader"]
        pub struct R(crate::R<BCSCTL1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<BCSCTL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<BCSCTL1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<BCSCTL1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `BCSCTL1` writer"]
        pub struct W(crate::W<BCSCTL1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<BCSCTL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<BCSCTL1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<BCSCTL1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "ACLK Divider 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum DIVA_A {
            #[doc = "0: ACLK Divider 0: /1"]
            DIVA_0 = 0,
            #[doc = "1: ACLK Divider 1: /2"]
            DIVA_1 = 1,
            #[doc = "2: ACLK Divider 2: /4"]
            DIVA_2 = 2,
            #[doc = "3: ACLK Divider 3: /8"]
            DIVA_3 = 3,
        }
        impl From<DIVA_A> for u8 {
            #[inline(always)]
            fn from(variant: DIVA_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `DIVA` reader - ACLK Divider 0"]
        pub struct DIVA_R(crate::FieldReader<u8, DIVA_A>);
        impl DIVA_R {
            pub(crate) fn new(bits: u8) -> Self {
                DIVA_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DIVA_A {
                match self.bits {
                    0 => DIVA_A::DIVA_0,
                    1 => DIVA_A::DIVA_1,
                    2 => DIVA_A::DIVA_2,
                    3 => DIVA_A::DIVA_3,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DIVA_0`"]
            #[inline(always)]
            pub fn is_diva_0(&self) -> bool {
                **self == DIVA_A::DIVA_0
            }
            #[doc = "Checks if the value of the field is `DIVA_1`"]
            #[inline(always)]
            pub fn is_diva_1(&self) -> bool {
                **self == DIVA_A::DIVA_1
            }
            #[doc = "Checks if the value of the field is `DIVA_2`"]
            #[inline(always)]
            pub fn is_diva_2(&self) -> bool {
                **self == DIVA_A::DIVA_2
            }
            #[doc = "Checks if the value of the field is `DIVA_3`"]
            #[inline(always)]
            pub fn is_diva_3(&self) -> bool {
                **self == DIVA_A::DIVA_3
            }
        }
        impl core::ops::Deref for DIVA_R {
            type Target = crate::FieldReader<u8, DIVA_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DIVA` writer - ACLK Divider 0"]
        pub struct DIVA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIVA_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DIVA_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "ACLK Divider 0: /1"]
            #[inline(always)]
            pub fn diva_0(self) -> &'a mut W {
                self.variant(DIVA_A::DIVA_0)
            }
            #[doc = "ACLK Divider 1: /2"]
            #[inline(always)]
            pub fn diva_1(self) -> &'a mut W {
                self.variant(DIVA_A::DIVA_1)
            }
            #[doc = "ACLK Divider 2: /4"]
            #[inline(always)]
            pub fn diva_2(self) -> &'a mut W {
                self.variant(DIVA_A::DIVA_2)
            }
            #[doc = "ACLK Divider 3: /8"]
            #[inline(always)]
            pub fn diva_3(self) -> &'a mut W {
                self.variant(DIVA_A::DIVA_3)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | ((value as u8 & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Field `XTS` reader - LFXTCLK 0:Low Freq. / 1: High Freq."]
        pub struct XTS_R(crate::FieldReader<bool, bool>);
        impl XTS_R {
            pub(crate) fn new(bits: bool) -> Self {
                XTS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for XTS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `XTS` writer - LFXTCLK 0:Low Freq. / 1: High Freq."]
        pub struct XTS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> XTS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u8 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `XT2OFF` reader - Enable XT2CLK"]
        pub struct XT2OFF_R(crate::FieldReader<bool, bool>);
        impl XT2OFF_R {
            pub(crate) fn new(bits: bool) -> Self {
                XT2OFF_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for XT2OFF_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `XT2OFF` writer - Enable XT2CLK"]
        pub struct XT2OFF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> XT2OFF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u8 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `BCSCTL1` reader - Basic Clock System Control 1 register"]
        pub struct BCSCTL1_R(crate::FieldReader<u8, u8>);
        impl BCSCTL1_R {
            pub(crate) fn new(bits: u8) -> Self {
                BCSCTL1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BCSCTL1_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BCSCTL1` writer - Basic Clock System Control 1 register"]
        pub struct BCSCTL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BCSCTL1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u8 & 0xff);
                self.w
            }
        }
        #[doc = "Field `RSEL` reader - Range Select Bit 0"]
        pub struct RSEL_R(crate::FieldReader<u8, u8>);
        impl RSEL_R {
            pub(crate) fn new(bits: u8) -> Self {
                RSEL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for RSEL_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `RSEL` writer - Range Select Bit 0"]
        pub struct RSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | (value as u8 & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 4:5 - ACLK Divider 0"]
            #[inline(always)]
            pub fn diva(&self) -> DIVA_R {
                DIVA_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bit 6 - LFXTCLK 0:Low Freq. / 1: High Freq."]
            #[inline(always)]
            pub fn xts(&self) -> XTS_R {
                XTS_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Enable XT2CLK"]
            #[inline(always)]
            pub fn xt2off(&self) -> XT2OFF_R {
                XT2OFF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 0:7 - Basic Clock System Control 1 register"]
            #[inline(always)]
            pub fn bcsctl1(&self) -> BCSCTL1_R {
                BCSCTL1_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 0:3 - Range Select Bit 0"]
            #[inline(always)]
            pub fn rsel(&self) -> RSEL_R {
                RSEL_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 4:5 - ACLK Divider 0"]
            #[inline(always)]
            pub fn diva(&mut self) -> DIVA_W {
                DIVA_W { w: self }
            }
            #[doc = "Bit 6 - LFXTCLK 0:Low Freq. / 1: High Freq."]
            #[inline(always)]
            pub fn xts(&mut self) -> XTS_W {
                XTS_W { w: self }
            }
            #[doc = "Bit 7 - Enable XT2CLK"]
            #[inline(always)]
            pub fn xt2off(&mut self) -> XT2OFF_W {
                XT2OFF_W { w: self }
            }
            #[doc = "Bits 0:7 - Basic Clock System Control 1 register"]
            #[inline(always)]
            pub fn bcsctl1(&mut self) -> BCSCTL1_W {
                BCSCTL1_W { w: self }
            }
            #[doc = "Bits 0:3 - Range Select Bit 0"]
            #[inline(always)]
            pub fn rsel(&mut self) -> RSEL_W {
                RSEL_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Basic Clock System Control 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bcsctl1](index.html) module"]
        pub struct BCSCTL1_SPEC;
        impl crate::RegisterSpec for BCSCTL1_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [bcsctl1::R](R) reader structure"]
        impl crate::Readable for BCSCTL1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [bcsctl1::W](W) writer structure"]
        impl crate::Writable for BCSCTL1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets BCSCTL1 to value 0"]
        impl crate::Resettable for BCSCTL1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "BCSCTL2 register accessor: an alias for `Reg<BCSCTL2_SPEC>`"]
    pub type BCSCTL2 = crate::Reg<bcsctl2::BCSCTL2_SPEC>;
    #[doc = "Basic Clock System Control 2"]
    pub mod bcsctl2 {
        #[doc = "Register `BCSCTL2` reader"]
        pub struct R(crate::R<BCSCTL2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<BCSCTL2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<BCSCTL2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<BCSCTL2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `BCSCTL2` writer"]
        pub struct W(crate::W<BCSCTL2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<BCSCTL2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<BCSCTL2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<BCSCTL2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "SMCLK Divider 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum DIVS_A {
            #[doc = "0: SMCLK Divider 0: /1"]
            DIVS_0 = 0,
            #[doc = "1: SMCLK Divider 1: /2"]
            DIVS_1 = 1,
            #[doc = "2: SMCLK Divider 2: /4"]
            DIVS_2 = 2,
            #[doc = "3: SMCLK Divider 3: /8"]
            DIVS_3 = 3,
        }
        impl From<DIVS_A> for u8 {
            #[inline(always)]
            fn from(variant: DIVS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `DIVS` reader - SMCLK Divider 0"]
        pub struct DIVS_R(crate::FieldReader<u8, DIVS_A>);
        impl DIVS_R {
            pub(crate) fn new(bits: u8) -> Self {
                DIVS_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DIVS_A {
                match self.bits {
                    0 => DIVS_A::DIVS_0,
                    1 => DIVS_A::DIVS_1,
                    2 => DIVS_A::DIVS_2,
                    3 => DIVS_A::DIVS_3,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DIVS_0`"]
            #[inline(always)]
            pub fn is_divs_0(&self) -> bool {
                **self == DIVS_A::DIVS_0
            }
            #[doc = "Checks if the value of the field is `DIVS_1`"]
            #[inline(always)]
            pub fn is_divs_1(&self) -> bool {
                **self == DIVS_A::DIVS_1
            }
            #[doc = "Checks if the value of the field is `DIVS_2`"]
            #[inline(always)]
            pub fn is_divs_2(&self) -> bool {
                **self == DIVS_A::DIVS_2
            }
            #[doc = "Checks if the value of the field is `DIVS_3`"]
            #[inline(always)]
            pub fn is_divs_3(&self) -> bool {
                **self == DIVS_A::DIVS_3
            }
        }
        impl core::ops::Deref for DIVS_R {
            type Target = crate::FieldReader<u8, DIVS_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DIVS` writer - SMCLK Divider 0"]
        pub struct DIVS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIVS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DIVS_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "SMCLK Divider 0: /1"]
            #[inline(always)]
            pub fn divs_0(self) -> &'a mut W {
                self.variant(DIVS_A::DIVS_0)
            }
            #[doc = "SMCLK Divider 1: /2"]
            #[inline(always)]
            pub fn divs_1(self) -> &'a mut W {
                self.variant(DIVS_A::DIVS_1)
            }
            #[doc = "SMCLK Divider 2: /4"]
            #[inline(always)]
            pub fn divs_2(self) -> &'a mut W {
                self.variant(DIVS_A::DIVS_2)
            }
            #[doc = "SMCLK Divider 3: /8"]
            #[inline(always)]
            pub fn divs_3(self) -> &'a mut W {
                self.variant(DIVS_A::DIVS_3)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 1)) | ((value as u8 & 0x03) << 1);
                self.w
            }
        }
        #[doc = "Field `SELS` reader - SMCLK Source Select 0:DCOCLK / 1:XT2CLK/LFXTCLK"]
        pub struct SELS_R(crate::FieldReader<bool, bool>);
        impl SELS_R {
            pub(crate) fn new(bits: bool) -> Self {
                SELS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SELS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SELS` writer - SMCLK Source Select 0:DCOCLK / 1:XT2CLK/LFXTCLK"]
        pub struct SELS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SELS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u8 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "MCLK Divider 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum DIVM_A {
            #[doc = "0: MCLK Divider 0: /1"]
            DIVM_0 = 0,
            #[doc = "1: MCLK Divider 1: /2"]
            DIVM_1 = 1,
            #[doc = "2: MCLK Divider 2: /4"]
            DIVM_2 = 2,
            #[doc = "3: MCLK Divider 3: /8"]
            DIVM_3 = 3,
        }
        impl From<DIVM_A> for u8 {
            #[inline(always)]
            fn from(variant: DIVM_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `DIVM` reader - MCLK Divider 0"]
        pub struct DIVM_R(crate::FieldReader<u8, DIVM_A>);
        impl DIVM_R {
            pub(crate) fn new(bits: u8) -> Self {
                DIVM_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> DIVM_A {
                match self.bits {
                    0 => DIVM_A::DIVM_0,
                    1 => DIVM_A::DIVM_1,
                    2 => DIVM_A::DIVM_2,
                    3 => DIVM_A::DIVM_3,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DIVM_0`"]
            #[inline(always)]
            pub fn is_divm_0(&self) -> bool {
                **self == DIVM_A::DIVM_0
            }
            #[doc = "Checks if the value of the field is `DIVM_1`"]
            #[inline(always)]
            pub fn is_divm_1(&self) -> bool {
                **self == DIVM_A::DIVM_1
            }
            #[doc = "Checks if the value of the field is `DIVM_2`"]
            #[inline(always)]
            pub fn is_divm_2(&self) -> bool {
                **self == DIVM_A::DIVM_2
            }
            #[doc = "Checks if the value of the field is `DIVM_3`"]
            #[inline(always)]
            pub fn is_divm_3(&self) -> bool {
                **self == DIVM_A::DIVM_3
            }
        }
        impl core::ops::Deref for DIVM_R {
            type Target = crate::FieldReader<u8, DIVM_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `DIVM` writer - MCLK Divider 0"]
        pub struct DIVM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIVM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: DIVM_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "MCLK Divider 0: /1"]
            #[inline(always)]
            pub fn divm_0(self) -> &'a mut W {
                self.variant(DIVM_A::DIVM_0)
            }
            #[doc = "MCLK Divider 1: /2"]
            #[inline(always)]
            pub fn divm_1(self) -> &'a mut W {
                self.variant(DIVM_A::DIVM_1)
            }
            #[doc = "MCLK Divider 2: /4"]
            #[inline(always)]
            pub fn divm_2(self) -> &'a mut W {
                self.variant(DIVM_A::DIVM_2)
            }
            #[doc = "MCLK Divider 3: /8"]
            #[inline(always)]
            pub fn divm_3(self) -> &'a mut W {
                self.variant(DIVM_A::DIVM_3)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | ((value as u8 & 0x03) << 4);
                self.w
            }
        }
        #[doc = "MCLK Source Select 0\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum SELM_A {
            #[doc = "0: MCLK Source Select 0: DCOCLK"]
            SELM_0 = 0,
            #[doc = "1: MCLK Source Select 1: DCOCLK"]
            SELM_1 = 1,
            #[doc = "2: MCLK Source Select 2: XT2CLK/LFXTCLK"]
            SELM_2 = 2,
            #[doc = "3: MCLK Source Select 3: LFXTCLK"]
            SELM_3 = 3,
        }
        impl From<SELM_A> for u8 {
            #[inline(always)]
            fn from(variant: SELM_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `SELM` reader - MCLK Source Select 0"]
        pub struct SELM_R(crate::FieldReader<u8, SELM_A>);
        impl SELM_R {
            pub(crate) fn new(bits: u8) -> Self {
                SELM_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> SELM_A {
                match self.bits {
                    0 => SELM_A::SELM_0,
                    1 => SELM_A::SELM_1,
                    2 => SELM_A::SELM_2,
                    3 => SELM_A::SELM_3,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `SELM_0`"]
            #[inline(always)]
            pub fn is_selm_0(&self) -> bool {
                **self == SELM_A::SELM_0
            }
            #[doc = "Checks if the value of the field is `SELM_1`"]
            #[inline(always)]
            pub fn is_selm_1(&self) -> bool {
                **self == SELM_A::SELM_1
            }
            #[doc = "Checks if the value of the field is `SELM_2`"]
            #[inline(always)]
            pub fn is_selm_2(&self) -> bool {
                **self == SELM_A::SELM_2
            }
            #[doc = "Checks if the value of the field is `SELM_3`"]
            #[inline(always)]
            pub fn is_selm_3(&self) -> bool {
                **self == SELM_A::SELM_3
            }
        }
        impl core::ops::Deref for SELM_R {
            type Target = crate::FieldReader<u8, SELM_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SELM` writer - MCLK Source Select 0"]
        pub struct SELM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SELM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SELM_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "MCLK Source Select 0: DCOCLK"]
            #[inline(always)]
            pub fn selm_0(self) -> &'a mut W {
                self.variant(SELM_A::SELM_0)
            }
            #[doc = "MCLK Source Select 1: DCOCLK"]
            #[inline(always)]
            pub fn selm_1(self) -> &'a mut W {
                self.variant(SELM_A::SELM_1)
            }
            #[doc = "MCLK Source Select 2: XT2CLK/LFXTCLK"]
            #[inline(always)]
            pub fn selm_2(self) -> &'a mut W {
                self.variant(SELM_A::SELM_2)
            }
            #[doc = "MCLK Source Select 3: LFXTCLK"]
            #[inline(always)]
            pub fn selm_3(self) -> &'a mut W {
                self.variant(SELM_A::SELM_3)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | ((value as u8 & 0x03) << 6);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 1:2 - SMCLK Divider 0"]
            #[inline(always)]
            pub fn divs(&self) -> DIVS_R {
                DIVS_R::new(((self.bits >> 1) & 0x03) as u8)
            }
            #[doc = "Bit 3 - SMCLK Source Select 0:DCOCLK / 1:XT2CLK/LFXTCLK"]
            #[inline(always)]
            pub fn sels(&self) -> SELS_R {
                SELS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bits 4:5 - MCLK Divider 0"]
            #[inline(always)]
            pub fn divm(&self) -> DIVM_R {
                DIVM_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - MCLK Source Select 0"]
            #[inline(always)]
            pub fn selm(&self) -> SELM_R {
                SELM_R::new(((self.bits >> 6) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 1:2 - SMCLK Divider 0"]
            #[inline(always)]
            pub fn divs(&mut self) -> DIVS_W {
                DIVS_W { w: self }
            }
            #[doc = "Bit 3 - SMCLK Source Select 0:DCOCLK / 1:XT2CLK/LFXTCLK"]
            #[inline(always)]
            pub fn sels(&mut self) -> SELS_W {
                SELS_W { w: self }
            }
            #[doc = "Bits 4:5 - MCLK Divider 0"]
            #[inline(always)]
            pub fn divm(&mut self) -> DIVM_W {
                DIVM_W { w: self }
            }
            #[doc = "Bits 6:7 - MCLK Source Select 0"]
            #[inline(always)]
            pub fn selm(&mut self) -> SELM_W {
                SELM_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Basic Clock System Control 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bcsctl2](index.html) module"]
        pub struct BCSCTL2_SPEC;
        impl crate::RegisterSpec for BCSCTL2_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [bcsctl2::R](R) reader structure"]
        impl crate::Readable for BCSCTL2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [bcsctl2::W](W) writer structure"]
        impl crate::Writable for BCSCTL2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets BCSCTL2 to value 0"]
        impl crate::Resettable for BCSCTL2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "USI"]
pub struct USI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USI {}
impl USI {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usi::RegisterBlock = 0x78 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usi::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USI {
    type Target = usi::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USI").finish()
    }
}
#[doc = "USI"]
pub mod usi {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        _reserved_0_usisr: [u8; 0x02],
        #[doc = "0x02 - USI Clock Control Register"]
        pub usickctl: crate::Reg<usickctl::USICKCTL_SPEC>,
        #[doc = "0x03 - USI Bit Counter Register"]
        pub usicnt: crate::Reg<usicnt::USICNT_SPEC>,
        #[doc = "0x04 - USI Low Byte Shift Register"]
        pub usisrl: crate::Reg<usisrl::USISRL_SPEC>,
        #[doc = "0x05 - USI High Byte Shift Register"]
        pub usisrh: crate::Reg<usisrh::USISRH_SPEC>,
    }
    impl RegisterBlock {
        #[doc = "0x00 - USI Word Shift Register"]
        #[inline(always)]
        pub fn usisr(&self) -> &crate::Reg<usisr::USISR_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(0usize)
                    as *const crate::Reg<usisr::USISR_SPEC>)
            }
        }
        #[doc = "0x00 - USI Control Register 0"]
        #[inline(always)]
        pub fn usictl0(&self) -> &crate::Reg<usictl0::USICTL0_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(0usize)
                    as *const crate::Reg<usictl0::USICTL0_SPEC>)
            }
        }
        #[doc = "0x01 - USI Control Register 1"]
        #[inline(always)]
        pub fn usictl1(&self) -> &crate::Reg<usictl1::USICTL1_SPEC> {
            unsafe {
                &*(((self as *const Self) as *const u8).add(1usize)
                    as *const crate::Reg<usictl1::USICTL1_SPEC>)
            }
        }
    }
    #[doc = "USICTL0 register accessor: an alias for `Reg<USICTL0_SPEC>`"]
    pub type USICTL0 = crate::Reg<usictl0::USICTL0_SPEC>;
    #[doc = "USI Control Register 0"]
    pub mod usictl0 {
        #[doc = "Register `USICTL0` reader"]
        pub struct R(crate::R<USICTL0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<USICTL0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<USICTL0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<USICTL0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `USICTL0` writer"]
        pub struct W(crate::W<USICTL0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<USICTL0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<USICTL0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<USICTL0_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `USISWRST` reader - USI Software Reset"]
        pub struct USISWRST_R(crate::FieldReader<bool, bool>);
        impl USISWRST_R {
            pub(crate) fn new(bits: bool) -> Self {
                USISWRST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USISWRST_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USISWRST` writer - USI Software Reset"]
        pub struct USISWRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USISWRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u8 & 0x01);
                self.w
            }
        }
        #[doc = "Field `USIOE` reader - USI Output Enable"]
        pub struct USIOE_R(crate::FieldReader<bool, bool>);
        impl USIOE_R {
            pub(crate) fn new(bits: bool) -> Self {
                USIOE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USIOE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USIOE` writer - USI Output Enable"]
        pub struct USIOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USIOE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u8 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `USIGE` reader - USI General Output Enable Latch"]
        pub struct USIGE_R(crate::FieldReader<bool, bool>);
        impl USIGE_R {
            pub(crate) fn new(bits: bool) -> Self {
                USIGE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USIGE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USIGE` writer - USI General Output Enable Latch"]
        pub struct USIGE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USIGE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u8 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `USIMST` reader - USI Master Select 0:Slave / 1:Master"]
        pub struct USIMST_R(crate::FieldReader<bool, bool>);
        impl USIMST_R {
            pub(crate) fn new(bits: bool) -> Self {
                USIMST_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USIMST_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USIMST` writer - USI Master Select 0:Slave / 1:Master"]
        pub struct USIMST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USIMST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u8 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `USILSB` reader - USI LSB first 1:LSB / 0:MSB"]
        pub struct USILSB_R(crate::FieldReader<bool, bool>);
        impl USILSB_R {
            pub(crate) fn new(bits: bool) -> Self {
                USILSB_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USILSB_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USILSB` writer - USI LSB first 1:LSB / 0:MSB"]
        pub struct USILSB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USILSB_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u8 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `USIPE5` reader - USI Port Enable Px.5"]
        pub struct USIPE5_R(crate::FieldReader<bool, bool>);
        impl USIPE5_R {
            pub(crate) fn new(bits: bool) -> Self {
                USIPE5_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USIPE5_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USIPE5` writer - USI Port Enable Px.5"]
        pub struct USIPE5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USIPE5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u8 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `USIPE6` reader - USI Port Enable Px.6"]
        pub struct USIPE6_R(crate::FieldReader<bool, bool>);
        impl USIPE6_R {
            pub(crate) fn new(bits: bool) -> Self {
                USIPE6_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USIPE6_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USIPE6` writer - USI Port Enable Px.6"]
        pub struct USIPE6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USIPE6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u8 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `USIPE7` reader - USI Port Enable Px.7"]
        pub struct USIPE7_R(crate::FieldReader<bool, bool>);
        impl USIPE7_R {
            pub(crate) fn new(bits: bool) -> Self {
                USIPE7_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USIPE7_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USIPE7` writer - USI Port Enable Px.7"]
        pub struct USIPE7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USIPE7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u8 & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - USI Software Reset"]
            #[inline(always)]
            pub fn usiswrst(&self) -> USISWRST_R {
                USISWRST_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - USI Output Enable"]
            #[inline(always)]
            pub fn usioe(&self) -> USIOE_R {
                USIOE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - USI General Output Enable Latch"]
            #[inline(always)]
            pub fn usige(&self) -> USIGE_R {
                USIGE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - USI Master Select 0:Slave / 1:Master"]
            #[inline(always)]
            pub fn usimst(&self) -> USIMST_R {
                USIMST_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - USI LSB first 1:LSB / 0:MSB"]
            #[inline(always)]
            pub fn usilsb(&self) -> USILSB_R {
                USILSB_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - USI Port Enable Px.5"]
            #[inline(always)]
            pub fn usipe5(&self) -> USIPE5_R {
                USIPE5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - USI Port Enable Px.6"]
            #[inline(always)]
            pub fn usipe6(&self) -> USIPE6_R {
                USIPE6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - USI Port Enable Px.7"]
            #[inline(always)]
            pub fn usipe7(&self) -> USIPE7_R {
                USIPE7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - USI Software Reset"]
            #[inline(always)]
            pub fn usiswrst(&mut self) -> USISWRST_W {
                USISWRST_W { w: self }
            }
            #[doc = "Bit 1 - USI Output Enable"]
            #[inline(always)]
            pub fn usioe(&mut self) -> USIOE_W {
                USIOE_W { w: self }
            }
            #[doc = "Bit 2 - USI General Output Enable Latch"]
            #[inline(always)]
            pub fn usige(&mut self) -> USIGE_W {
                USIGE_W { w: self }
            }
            #[doc = "Bit 3 - USI Master Select 0:Slave / 1:Master"]
            #[inline(always)]
            pub fn usimst(&mut self) -> USIMST_W {
                USIMST_W { w: self }
            }
            #[doc = "Bit 4 - USI LSB first 1:LSB / 0:MSB"]
            #[inline(always)]
            pub fn usilsb(&mut self) -> USILSB_W {
                USILSB_W { w: self }
            }
            #[doc = "Bit 5 - USI Port Enable Px.5"]
            #[inline(always)]
            pub fn usipe5(&mut self) -> USIPE5_W {
                USIPE5_W { w: self }
            }
            #[doc = "Bit 6 - USI Port Enable Px.6"]
            #[inline(always)]
            pub fn usipe6(&mut self) -> USIPE6_W {
                USIPE6_W { w: self }
            }
            #[doc = "Bit 7 - USI Port Enable Px.7"]
            #[inline(always)]
            pub fn usipe7(&mut self) -> USIPE7_W {
                USIPE7_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "USI Control Register 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [usictl0](index.html) module"]
        pub struct USICTL0_SPEC;
        impl crate::RegisterSpec for USICTL0_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [usictl0::R](R) reader structure"]
        impl crate::Readable for USICTL0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [usictl0::W](W) writer structure"]
        impl crate::Writable for USICTL0_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets USICTL0 to value 0"]
        impl crate::Resettable for USICTL0_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "USICTL1 register accessor: an alias for `Reg<USICTL1_SPEC>`"]
    pub type USICTL1 = crate::Reg<usictl1::USICTL1_SPEC>;
    #[doc = "USI Control Register 1"]
    pub mod usictl1 {
        #[doc = "Register `USICTL1` reader"]
        pub struct R(crate::R<USICTL1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<USICTL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<USICTL1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<USICTL1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `USICTL1` writer"]
        pub struct W(crate::W<USICTL1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<USICTL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<USICTL1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<USICTL1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `USIIFG` reader - USI Counter Interrupt Flag"]
        pub struct USIIFG_R(crate::FieldReader<bool, bool>);
        impl USIIFG_R {
            pub(crate) fn new(bits: bool) -> Self {
                USIIFG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USIIFG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USIIFG` writer - USI Counter Interrupt Flag"]
        pub struct USIIFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USIIFG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u8 & 0x01);
                self.w
            }
        }
        #[doc = "Field `USISTTIFG` reader - USI START Condition interrupt Flag"]
        pub struct USISTTIFG_R(crate::FieldReader<bool, bool>);
        impl USISTTIFG_R {
            pub(crate) fn new(bits: bool) -> Self {
                USISTTIFG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USISTTIFG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USISTTIFG` writer - USI START Condition interrupt Flag"]
        pub struct USISTTIFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USISTTIFG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u8 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `USISTP` reader - USI STOP Condition received"]
        pub struct USISTP_R(crate::FieldReader<bool, bool>);
        impl USISTP_R {
            pub(crate) fn new(bits: bool) -> Self {
                USISTP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USISTP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USISTP` writer - USI STOP Condition received"]
        pub struct USISTP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USISTP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u8 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `USIAL` reader - USI Arbitration Lost"]
        pub struct USIAL_R(crate::FieldReader<bool, bool>);
        impl USIAL_R {
            pub(crate) fn new(bits: bool) -> Self {
                USIAL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USIAL_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USIAL` writer - USI Arbitration Lost"]
        pub struct USIAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USIAL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u8 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `USIIE` reader - USI Counter Interrupt enable"]
        pub struct USIIE_R(crate::FieldReader<bool, bool>);
        impl USIIE_R {
            pub(crate) fn new(bits: bool) -> Self {
                USIIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USIIE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USIIE` writer - USI Counter Interrupt enable"]
        pub struct USIIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USIIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u8 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `USISTTIE` reader - USI START Condition interrupt enable"]
        pub struct USISTTIE_R(crate::FieldReader<bool, bool>);
        impl USISTTIE_R {
            pub(crate) fn new(bits: bool) -> Self {
                USISTTIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USISTTIE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USISTTIE` writer - USI START Condition interrupt enable"]
        pub struct USISTTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USISTTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u8 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `USII2C` reader - USI I2C Mode"]
        pub struct USII2C_R(crate::FieldReader<bool, bool>);
        impl USII2C_R {
            pub(crate) fn new(bits: bool) -> Self {
                USII2C_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USII2C_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USII2C` writer - USI I2C Mode"]
        pub struct USII2C_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USII2C_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u8 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `USICKPH` reader - USI Sync. Mode: Clock Phase"]
        pub struct USICKPH_R(crate::FieldReader<bool, bool>);
        impl USICKPH_R {
            pub(crate) fn new(bits: bool) -> Self {
                USICKPH_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USICKPH_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USICKPH` writer - USI Sync. Mode: Clock Phase"]
        pub struct USICKPH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USICKPH_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u8 & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - USI Counter Interrupt Flag"]
            #[inline(always)]
            pub fn usiifg(&self) -> USIIFG_R {
                USIIFG_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - USI START Condition interrupt Flag"]
            #[inline(always)]
            pub fn usisttifg(&self) -> USISTTIFG_R {
                USISTTIFG_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - USI STOP Condition received"]
            #[inline(always)]
            pub fn usistp(&self) -> USISTP_R {
                USISTP_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - USI Arbitration Lost"]
            #[inline(always)]
            pub fn usial(&self) -> USIAL_R {
                USIAL_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - USI Counter Interrupt enable"]
            #[inline(always)]
            pub fn usiie(&self) -> USIIE_R {
                USIIE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - USI START Condition interrupt enable"]
            #[inline(always)]
            pub fn usisttie(&self) -> USISTTIE_R {
                USISTTIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - USI I2C Mode"]
            #[inline(always)]
            pub fn usii2c(&self) -> USII2C_R {
                USII2C_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - USI Sync. Mode: Clock Phase"]
            #[inline(always)]
            pub fn usickph(&self) -> USICKPH_R {
                USICKPH_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - USI Counter Interrupt Flag"]
            #[inline(always)]
            pub fn usiifg(&mut self) -> USIIFG_W {
                USIIFG_W { w: self }
            }
            #[doc = "Bit 1 - USI START Condition interrupt Flag"]
            #[inline(always)]
            pub fn usisttifg(&mut self) -> USISTTIFG_W {
                USISTTIFG_W { w: self }
            }
            #[doc = "Bit 2 - USI STOP Condition received"]
            #[inline(always)]
            pub fn usistp(&mut self) -> USISTP_W {
                USISTP_W { w: self }
            }
            #[doc = "Bit 3 - USI Arbitration Lost"]
            #[inline(always)]
            pub fn usial(&mut self) -> USIAL_W {
                USIAL_W { w: self }
            }
            #[doc = "Bit 4 - USI Counter Interrupt enable"]
            #[inline(always)]
            pub fn usiie(&mut self) -> USIIE_W {
                USIIE_W { w: self }
            }
            #[doc = "Bit 5 - USI START Condition interrupt enable"]
            #[inline(always)]
            pub fn usisttie(&mut self) -> USISTTIE_W {
                USISTTIE_W { w: self }
            }
            #[doc = "Bit 6 - USI I2C Mode"]
            #[inline(always)]
            pub fn usii2c(&mut self) -> USII2C_W {
                USII2C_W { w: self }
            }
            #[doc = "Bit 7 - USI Sync. Mode: Clock Phase"]
            #[inline(always)]
            pub fn usickph(&mut self) -> USICKPH_W {
                USICKPH_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "USI Control Register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [usictl1](index.html) module"]
        pub struct USICTL1_SPEC;
        impl crate::RegisterSpec for USICTL1_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [usictl1::R](R) reader structure"]
        impl crate::Readable for USICTL1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [usictl1::W](W) writer structure"]
        impl crate::Writable for USICTL1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets USICTL1 to value 0"]
        impl crate::Resettable for USICTL1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "USICKCTL register accessor: an alias for `Reg<USICKCTL_SPEC>`"]
    pub type USICKCTL = crate::Reg<usickctl::USICKCTL_SPEC>;
    #[doc = "USI Clock Control Register"]
    pub mod usickctl {
        #[doc = "Register `USICKCTL` reader"]
        pub struct R(crate::R<USICKCTL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<USICKCTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<USICKCTL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<USICKCTL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `USICKCTL` writer"]
        pub struct W(crate::W<USICKCTL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<USICKCTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<USICKCTL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<USICKCTL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `USISWCLK` reader - USI Software Clock"]
        pub struct USISWCLK_R(crate::FieldReader<bool, bool>);
        impl USISWCLK_R {
            pub(crate) fn new(bits: bool) -> Self {
                USISWCLK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USISWCLK_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USISWCLK` writer - USI Software Clock"]
        pub struct USISWCLK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USISWCLK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u8 & 0x01);
                self.w
            }
        }
        #[doc = "Field `USICKPL` reader - USI Clock Polarity 0:Inactive=Low / 1:Inactive=High"]
        pub struct USICKPL_R(crate::FieldReader<bool, bool>);
        impl USICKPL_R {
            pub(crate) fn new(bits: bool) -> Self {
                USICKPL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USICKPL_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USICKPL` writer - USI Clock Polarity 0:Inactive=Low / 1:Inactive=High"]
        pub struct USICKPL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USICKPL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u8 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "USI Clock Source Select 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum USISSEL_A {
            #[doc = "0: 000b = SCLK (Not used in SPI mode)"]
            SCLK = 0,
            #[doc = "1: 001b = ACLK"]
            ACLK = 1,
            #[doc = "3: 011b = SMCLK"]
            SMCLK = 3,
            #[doc = "4: 100b = USISWCLK bit"]
            USISWCLK = 4,
            #[doc = "5: 101b = TA0CCR0"]
            TA0CCR0 = 5,
            #[doc = "6: 110b = TA0CCR1"]
            TA0CCR1 = 6,
            #[doc = "7: 111b = TA0CCR2 (Reserved on MSP430F20xx devices)"]
            TA0CCR2 = 7,
        }
        impl From<USISSEL_A> for u8 {
            #[inline(always)]
            fn from(variant: USISSEL_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `USISSEL` reader - USI Clock Source Select 2"]
        pub struct USISSEL_R(crate::FieldReader<u8, USISSEL_A>);
        impl USISSEL_R {
            pub(crate) fn new(bits: u8) -> Self {
                USISSEL_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> Option<USISSEL_A> {
                match self.bits {
                    0 => Some(USISSEL_A::SCLK),
                    1 => Some(USISSEL_A::ACLK),
                    3 => Some(USISSEL_A::SMCLK),
                    4 => Some(USISSEL_A::USISWCLK),
                    5 => Some(USISSEL_A::TA0CCR0),
                    6 => Some(USISSEL_A::TA0CCR1),
                    7 => Some(USISSEL_A::TA0CCR2),
                    _ => None,
                }
            }
            #[doc = "Checks if the value of the field is `SCLK`"]
            #[inline(always)]
            pub fn is_sclk(&self) -> bool {
                **self == USISSEL_A::SCLK
            }
            #[doc = "Checks if the value of the field is `ACLK`"]
            #[inline(always)]
            pub fn is_aclk(&self) -> bool {
                **self == USISSEL_A::ACLK
            }
            #[doc = "Checks if the value of the field is `SMCLK`"]
            #[inline(always)]
            pub fn is_smclk(&self) -> bool {
                **self == USISSEL_A::SMCLK
            }
            #[doc = "Checks if the value of the field is `USISWCLK`"]
            #[inline(always)]
            pub fn is_usiswclk(&self) -> bool {
                **self == USISSEL_A::USISWCLK
            }
            #[doc = "Checks if the value of the field is `TA0CCR0`"]
            #[inline(always)]
            pub fn is_ta0ccr0(&self) -> bool {
                **self == USISSEL_A::TA0CCR0
            }
            #[doc = "Checks if the value of the field is `TA0CCR1`"]
            #[inline(always)]
            pub fn is_ta0ccr1(&self) -> bool {
                **self == USISSEL_A::TA0CCR1
            }
            #[doc = "Checks if the value of the field is `TA0CCR2`"]
            #[inline(always)]
            pub fn is_ta0ccr2(&self) -> bool {
                **self == USISSEL_A::TA0CCR2
            }
        }
        impl core::ops::Deref for USISSEL_R {
            type Target = crate::FieldReader<u8, USISSEL_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USISSEL` writer - USI Clock Source Select 2"]
        pub struct USISSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USISSEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: USISSEL_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "000b = SCLK (Not used in SPI mode)"]
            #[inline(always)]
            pub fn sclk(self) -> &'a mut W {
                self.variant(USISSEL_A::SCLK)
            }
            #[doc = "001b = ACLK"]
            #[inline(always)]
            pub fn aclk(self) -> &'a mut W {
                self.variant(USISSEL_A::ACLK)
            }
            #[doc = "011b = SMCLK"]
            #[inline(always)]
            pub fn smclk(self) -> &'a mut W {
                self.variant(USISSEL_A::SMCLK)
            }
            #[doc = "100b = USISWCLK bit"]
            #[inline(always)]
            pub fn usiswclk(self) -> &'a mut W {
                self.variant(USISSEL_A::USISWCLK)
            }
            #[doc = "101b = TA0CCR0"]
            #[inline(always)]
            pub fn ta0ccr0(self) -> &'a mut W {
                self.variant(USISSEL_A::TA0CCR0)
            }
            #[doc = "110b = TA0CCR1"]
            #[inline(always)]
            pub fn ta0ccr1(self) -> &'a mut W {
                self.variant(USISSEL_A::TA0CCR1)
            }
            #[doc = "111b = TA0CCR2 (Reserved on MSP430F20xx devices)"]
            #[inline(always)]
            pub fn ta0ccr2(self) -> &'a mut W {
                self.variant(USISSEL_A::TA0CCR2)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 2)) | ((value as u8 & 0x07) << 2);
                self.w
            }
        }
        #[doc = "USI Clock Divider 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum USIDIV_A {
            #[doc = "0: 000b = Divide by 1"]
            DIV_BY_1 = 0,
            #[doc = "1: 001b = Divide by 2"]
            DIV_BY_2 = 1,
            #[doc = "2: 010b = Divide by 4"]
            DIV_BY_4 = 2,
            #[doc = "3: 011b = Divide by 8"]
            DIV_BY_8 = 3,
            #[doc = "4: 100b = Divide by 16"]
            DIV_BY_16 = 4,
            #[doc = "5: 101b = Divide by 32"]
            DIV_BY_32 = 5,
            #[doc = "6: 110b = Divide by 64"]
            DIV_BY_64 = 6,
            #[doc = "7: 111b = Divide by 128"]
            DIV_BY_128 = 7,
        }
        impl From<USIDIV_A> for u8 {
            #[inline(always)]
            fn from(variant: USIDIV_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `USIDIV` reader - USI Clock Divider 2"]
        pub struct USIDIV_R(crate::FieldReader<u8, USIDIV_A>);
        impl USIDIV_R {
            pub(crate) fn new(bits: u8) -> Self {
                USIDIV_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> USIDIV_A {
                match self.bits {
                    0 => USIDIV_A::DIV_BY_1,
                    1 => USIDIV_A::DIV_BY_2,
                    2 => USIDIV_A::DIV_BY_4,
                    3 => USIDIV_A::DIV_BY_8,
                    4 => USIDIV_A::DIV_BY_16,
                    5 => USIDIV_A::DIV_BY_32,
                    6 => USIDIV_A::DIV_BY_64,
                    7 => USIDIV_A::DIV_BY_128,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `DIV_BY_1`"]
            #[inline(always)]
            pub fn is_div_by_1(&self) -> bool {
                **self == USIDIV_A::DIV_BY_1
            }
            #[doc = "Checks if the value of the field is `DIV_BY_2`"]
            #[inline(always)]
            pub fn is_div_by_2(&self) -> bool {
                **self == USIDIV_A::DIV_BY_2
            }
            #[doc = "Checks if the value of the field is `DIV_BY_4`"]
            #[inline(always)]
            pub fn is_div_by_4(&self) -> bool {
                **self == USIDIV_A::DIV_BY_4
            }
            #[doc = "Checks if the value of the field is `DIV_BY_8`"]
            #[inline(always)]
            pub fn is_div_by_8(&self) -> bool {
                **self == USIDIV_A::DIV_BY_8
            }
            #[doc = "Checks if the value of the field is `DIV_BY_16`"]
            #[inline(always)]
            pub fn is_div_by_16(&self) -> bool {
                **self == USIDIV_A::DIV_BY_16
            }
            #[doc = "Checks if the value of the field is `DIV_BY_32`"]
            #[inline(always)]
            pub fn is_div_by_32(&self) -> bool {
                **self == USIDIV_A::DIV_BY_32
            }
            #[doc = "Checks if the value of the field is `DIV_BY_64`"]
            #[inline(always)]
            pub fn is_div_by_64(&self) -> bool {
                **self == USIDIV_A::DIV_BY_64
            }
            #[doc = "Checks if the value of the field is `DIV_BY_128`"]
            #[inline(always)]
            pub fn is_div_by_128(&self) -> bool {
                **self == USIDIV_A::DIV_BY_128
            }
        }
        impl core::ops::Deref for USIDIV_R {
            type Target = crate::FieldReader<u8, USIDIV_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USIDIV` writer - USI Clock Divider 2"]
        pub struct USIDIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USIDIV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: USIDIV_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "000b = Divide by 1"]
            #[inline(always)]
            pub fn div_by_1(self) -> &'a mut W {
                self.variant(USIDIV_A::DIV_BY_1)
            }
            #[doc = "001b = Divide by 2"]
            #[inline(always)]
            pub fn div_by_2(self) -> &'a mut W {
                self.variant(USIDIV_A::DIV_BY_2)
            }
            #[doc = "010b = Divide by 4"]
            #[inline(always)]
            pub fn div_by_4(self) -> &'a mut W {
                self.variant(USIDIV_A::DIV_BY_4)
            }
            #[doc = "011b = Divide by 8"]
            #[inline(always)]
            pub fn div_by_8(self) -> &'a mut W {
                self.variant(USIDIV_A::DIV_BY_8)
            }
            #[doc = "100b = Divide by 16"]
            #[inline(always)]
            pub fn div_by_16(self) -> &'a mut W {
                self.variant(USIDIV_A::DIV_BY_16)
            }
            #[doc = "101b = Divide by 32"]
            #[inline(always)]
            pub fn div_by_32(self) -> &'a mut W {
                self.variant(USIDIV_A::DIV_BY_32)
            }
            #[doc = "110b = Divide by 64"]
            #[inline(always)]
            pub fn div_by_64(self) -> &'a mut W {
                self.variant(USIDIV_A::DIV_BY_64)
            }
            #[doc = "111b = Divide by 128"]
            #[inline(always)]
            pub fn div_by_128(self) -> &'a mut W {
                self.variant(USIDIV_A::DIV_BY_128)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 5)) | ((value as u8 & 0x07) << 5);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - USI Software Clock"]
            #[inline(always)]
            pub fn usiswclk(&self) -> USISWCLK_R {
                USISWCLK_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - USI Clock Polarity 0:Inactive=Low / 1:Inactive=High"]
            #[inline(always)]
            pub fn usickpl(&self) -> USICKPL_R {
                USICKPL_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bits 2:4 - USI Clock Source Select 2"]
            #[inline(always)]
            pub fn usissel(&self) -> USISSEL_R {
                USISSEL_R::new(((self.bits >> 2) & 0x07) as u8)
            }
            #[doc = "Bits 5:7 - USI Clock Divider 2"]
            #[inline(always)]
            pub fn usidiv(&self) -> USIDIV_R {
                USIDIV_R::new(((self.bits >> 5) & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - USI Software Clock"]
            #[inline(always)]
            pub fn usiswclk(&mut self) -> USISWCLK_W {
                USISWCLK_W { w: self }
            }
            #[doc = "Bit 1 - USI Clock Polarity 0:Inactive=Low / 1:Inactive=High"]
            #[inline(always)]
            pub fn usickpl(&mut self) -> USICKPL_W {
                USICKPL_W { w: self }
            }
            #[doc = "Bits 2:4 - USI Clock Source Select 2"]
            #[inline(always)]
            pub fn usissel(&mut self) -> USISSEL_W {
                USISSEL_W { w: self }
            }
            #[doc = "Bits 5:7 - USI Clock Divider 2"]
            #[inline(always)]
            pub fn usidiv(&mut self) -> USIDIV_W {
                USIDIV_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "USI Clock Control Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [usickctl](index.html) module"]
        pub struct USICKCTL_SPEC;
        impl crate::RegisterSpec for USICKCTL_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [usickctl::R](R) reader structure"]
        impl crate::Readable for USICKCTL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [usickctl::W](W) writer structure"]
        impl crate::Writable for USICKCTL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets USICKCTL to value 0"]
        impl crate::Resettable for USICKCTL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "USICNT register accessor: an alias for `Reg<USICNT_SPEC>`"]
    pub type USICNT = crate::Reg<usicnt::USICNT_SPEC>;
    #[doc = "USI Bit Counter Register"]
    pub mod usicnt {
        #[doc = "Register `USICNT` reader"]
        pub struct R(crate::R<USICNT_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<USICNT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<USICNT_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<USICNT_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `USICNT` writer"]
        pub struct W(crate::W<USICNT_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<USICNT_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<USICNT_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<USICNT_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `USIIFGCC` reader - USI Interrupt Flag Clear Control"]
        pub struct USIIFGCC_R(crate::FieldReader<bool, bool>);
        impl USIIFGCC_R {
            pub(crate) fn new(bits: bool) -> Self {
                USIIFGCC_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USIIFGCC_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USIIFGCC` writer - USI Interrupt Flag Clear Control"]
        pub struct USIIFGCC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USIIFGCC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u8 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `USI16B` reader - USI 16 Bit Shift Register Enable"]
        pub struct USI16B_R(crate::FieldReader<bool, bool>);
        impl USI16B_R {
            pub(crate) fn new(bits: bool) -> Self {
                USI16B_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USI16B_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USI16B` writer - USI 16 Bit Shift Register Enable"]
        pub struct USI16B_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USI16B_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u8 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `USISCLREL` reader - USI SCL Released"]
        pub struct USISCLREL_R(crate::FieldReader<bool, bool>);
        impl USISCLREL_R {
            pub(crate) fn new(bits: bool) -> Self {
                USISCLREL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USISCLREL_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USISCLREL` writer - USI SCL Released"]
        pub struct USISCLREL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USISCLREL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u8 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Field `USICNT` reader - USI bit count. The USICNT bits set the number of bits to be received or transmitted"]
        pub struct USICNT_R(crate::FieldReader<u8, u8>);
        impl USICNT_R {
            pub(crate) fn new(bits: u8) -> Self {
                USICNT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USICNT_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USICNT` writer - USI bit count. The USICNT bits set the number of bits to be received or transmitted"]
        pub struct USICNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USICNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | (value as u8 & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 5 - USI Interrupt Flag Clear Control"]
            #[inline(always)]
            pub fn usiifgcc(&self) -> USIIFGCC_R {
                USIIFGCC_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - USI 16 Bit Shift Register Enable"]
            #[inline(always)]
            pub fn usi16b(&self) -> USI16B_R {
                USI16B_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - USI SCL Released"]
            #[inline(always)]
            pub fn usisclrel(&self) -> USISCLREL_R {
                USISCLREL_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 0:4 - USI bit count. The USICNT bits set the number of bits to be received or transmitted"]
            #[inline(always)]
            pub fn usicnt(&self) -> USICNT_R {
                USICNT_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 5 - USI Interrupt Flag Clear Control"]
            #[inline(always)]
            pub fn usiifgcc(&mut self) -> USIIFGCC_W {
                USIIFGCC_W { w: self }
            }
            #[doc = "Bit 6 - USI 16 Bit Shift Register Enable"]
            #[inline(always)]
            pub fn usi16b(&mut self) -> USI16B_W {
                USI16B_W { w: self }
            }
            #[doc = "Bit 7 - USI SCL Released"]
            #[inline(always)]
            pub fn usisclrel(&mut self) -> USISCLREL_W {
                USISCLREL_W { w: self }
            }
            #[doc = "Bits 0:4 - USI bit count. The USICNT bits set the number of bits to be received or transmitted"]
            #[inline(always)]
            pub fn usicnt(&mut self) -> USICNT_W {
                USICNT_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "USI Bit Counter Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [usicnt](index.html) module"]
        pub struct USICNT_SPEC;
        impl crate::RegisterSpec for USICNT_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [usicnt::R](R) reader structure"]
        impl crate::Readable for USICNT_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [usicnt::W](W) writer structure"]
        impl crate::Writable for USICNT_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets USICNT to value 0"]
        impl crate::Resettable for USICNT_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "USISRL register accessor: an alias for `Reg<USISRL_SPEC>`"]
    pub type USISRL = crate::Reg<usisrl::USISRL_SPEC>;
    #[doc = "USI Low Byte Shift Register"]
    pub mod usisrl {
        #[doc = "Register `USISRL` reader"]
        pub struct R(crate::R<USISRL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<USISRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<USISRL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<USISRL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `USISRL` writer"]
        pub struct W(crate::W<USISRL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<USISRL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<USISRL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<USISRL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `USISRL` reader - Contents of the USI low byte shift register"]
        pub struct USISRL_R(crate::FieldReader<u8, u8>);
        impl USISRL_R {
            pub(crate) fn new(bits: u8) -> Self {
                USISRL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USISRL_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USISRL` writer - Contents of the USI low byte shift register"]
        pub struct USISRL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USISRL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u8 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Contents of the USI low byte shift register"]
            #[inline(always)]
            pub fn usisrl(&self) -> USISRL_R {
                USISRL_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Contents of the USI low byte shift register"]
            #[inline(always)]
            pub fn usisrl(&mut self) -> USISRL_W {
                USISRL_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "USI Low Byte Shift Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [usisrl](index.html) module"]
        pub struct USISRL_SPEC;
        impl crate::RegisterSpec for USISRL_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [usisrl::R](R) reader structure"]
        impl crate::Readable for USISRL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [usisrl::W](W) writer structure"]
        impl crate::Writable for USISRL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets USISRL to value 0"]
        impl crate::Resettable for USISRL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "USISRH register accessor: an alias for `Reg<USISRH_SPEC>`"]
    pub type USISRH = crate::Reg<usisrh::USISRH_SPEC>;
    #[doc = "USI High Byte Shift Register"]
    pub mod usisrh {
        #[doc = "Register `USISRH` reader"]
        pub struct R(crate::R<USISRH_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<USISRH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<USISRH_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<USISRH_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `USISRH` writer"]
        pub struct W(crate::W<USISRH_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<USISRH_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<USISRH_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<USISRH_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `USISRH` reader - Contents of the USI high byte shift register"]
        pub struct USISRH_R(crate::FieldReader<u8, u8>);
        impl USISRH_R {
            pub(crate) fn new(bits: u8) -> Self {
                USISRH_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USISRH_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USISRH` writer - Contents of the USI high byte shift register"]
        pub struct USISRH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USISRH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u8 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Contents of the USI high byte shift register"]
            #[inline(always)]
            pub fn usisrh(&self) -> USISRH_R {
                USISRH_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Contents of the USI high byte shift register"]
            #[inline(always)]
            pub fn usisrh(&mut self) -> USISRH_W {
                USISRH_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "USI High Byte Shift Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [usisrh](index.html) module"]
        pub struct USISRH_SPEC;
        impl crate::RegisterSpec for USISRH_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [usisrh::R](R) reader structure"]
        impl crate::Readable for USISRH_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [usisrh::W](W) writer structure"]
        impl crate::Writable for USISRH_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets USISRH to value 0"]
        impl crate::Resettable for USISRH_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "USISR register accessor: an alias for `Reg<USISR_SPEC>`"]
    pub type USISR = crate::Reg<usisr::USISR_SPEC>;
    #[doc = "USI Word Shift Register"]
    pub mod usisr {
        #[doc = "Register `USISR` reader"]
        pub struct R(crate::R<USISR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<USISR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<USISR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<USISR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `USISR` writer"]
        pub struct W(crate::W<USISR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<USISR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<USISR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<USISR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `USISR` reader - Contents of the USI word shift register"]
        pub struct USISR_R(crate::FieldReader<u16, u16>);
        impl USISR_R {
            pub(crate) fn new(bits: u16) -> Self {
                USISR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for USISR_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `USISR` writer - Contents of the USI word shift register"]
        pub struct USISR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USISR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u16 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Contents of the USI word shift register"]
            #[inline(always)]
            pub fn usisr(&self) -> USISR_R {
                USISR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Contents of the USI word shift register"]
            #[inline(always)]
            pub fn usisr(&mut self) -> USISR_W {
                USISR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "USI Word Shift Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [usisr](index.html) module"]
        pub struct USISR_SPEC;
        impl crate::RegisterSpec for USISR_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [usisr::R](R) reader structure"]
        impl crate::Readable for USISR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [usisr::W](W) writer structure"]
        impl crate::Writable for USISR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets USISR to value 0"]
        impl crate::Resettable for USISR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "Calibration Data"]
pub struct CALIBRATION_DATA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CALIBRATION_DATA {}
impl CALIBRATION_DATA {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const calibration_data::RegisterBlock = 0x10fe as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const calibration_data::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CALIBRATION_DATA {
    type Target = calibration_data::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CALIBRATION_DATA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CALIBRATION_DATA").finish()
    }
}
#[doc = "Calibration Data"]
pub mod calibration_data {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - DCOCTL Calibration Data for 1MHz"]
        pub caldco_1mhz: crate::Reg<caldco_1mhz::CALDCO_1MHZ_SPEC>,
        #[doc = "0x01 - BCSCTL1 Calibration Data for 1MHz"]
        pub calbc1_1mhz: crate::Reg<calbc1_1mhz::CALBC1_1MHZ_SPEC>,
    }
    #[doc = "CALDCO_1MHZ register accessor: an alias for `Reg<CALDCO_1MHZ_SPEC>`"]
    pub type CALDCO_1MHZ = crate::Reg<caldco_1mhz::CALDCO_1MHZ_SPEC>;
    #[doc = "DCOCTL Calibration Data for 1MHz"]
    pub mod caldco_1mhz {
        #[doc = "Register `CALDCO_1MHZ` reader"]
        pub struct R(crate::R<CALDCO_1MHZ_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CALDCO_1MHZ_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CALDCO_1MHZ_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CALDCO_1MHZ_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CALDCO_1MHZ` writer"]
        pub struct W(crate::W<CALDCO_1MHZ_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CALDCO_1MHZ_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CALDCO_1MHZ_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CALDCO_1MHZ_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CALDCO_1MHZ` reader - DCOCTL Calibration Data register"]
        pub struct CALDCO_1MHZ_R(crate::FieldReader<u8, u8>);
        impl CALDCO_1MHZ_R {
            pub(crate) fn new(bits: u8) -> Self {
                CALDCO_1MHZ_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CALDCO_1MHZ_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CALDCO_1MHZ` writer - DCOCTL Calibration Data register"]
        pub struct CALDCO_1MHZ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CALDCO_1MHZ_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u8 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - DCOCTL Calibration Data register"]
            #[inline(always)]
            pub fn caldco_1mhz(&self) -> CALDCO_1MHZ_R {
                CALDCO_1MHZ_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - DCOCTL Calibration Data register"]
            #[inline(always)]
            pub fn caldco_1mhz(&mut self) -> CALDCO_1MHZ_W {
                CALDCO_1MHZ_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "DCOCTL Calibration Data for 1MHz\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [caldco_1mhz](index.html) module"]
        pub struct CALDCO_1MHZ_SPEC;
        impl crate::RegisterSpec for CALDCO_1MHZ_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [caldco_1mhz::R](R) reader structure"]
        impl crate::Readable for CALDCO_1MHZ_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [caldco_1mhz::W](W) writer structure"]
        impl crate::Writable for CALDCO_1MHZ_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CALDCO_1MHZ to value 0"]
        impl crate::Resettable for CALDCO_1MHZ_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "CALBC1_1MHZ register accessor: an alias for `Reg<CALBC1_1MHZ_SPEC>`"]
    pub type CALBC1_1MHZ = crate::Reg<calbc1_1mhz::CALBC1_1MHZ_SPEC>;
    #[doc = "BCSCTL1 Calibration Data for 1MHz"]
    pub mod calbc1_1mhz {
        #[doc = "Register `CALBC1_1MHZ` reader"]
        pub struct R(crate::R<CALBC1_1MHZ_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<CALBC1_1MHZ_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<CALBC1_1MHZ_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<CALBC1_1MHZ_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `CALBC1_1MHZ` writer"]
        pub struct W(crate::W<CALBC1_1MHZ_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<CALBC1_1MHZ_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<CALBC1_1MHZ_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<CALBC1_1MHZ_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CALBC1_1MHZ` reader - BCSCTL1 Calibration Data register"]
        pub struct CALBC1_1MHZ_R(crate::FieldReader<u8, u8>);
        impl CALBC1_1MHZ_R {
            pub(crate) fn new(bits: u8) -> Self {
                CALBC1_1MHZ_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CALBC1_1MHZ_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CALBC1_1MHZ` writer - BCSCTL1 Calibration Data register"]
        pub struct CALBC1_1MHZ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CALBC1_1MHZ_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | (value as u8 & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - BCSCTL1 Calibration Data register"]
            #[inline(always)]
            pub fn calbc1_1mhz(&self) -> CALBC1_1MHZ_R {
                CALBC1_1MHZ_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - BCSCTL1 Calibration Data register"]
            #[inline(always)]
            pub fn calbc1_1mhz(&mut self) -> CALBC1_1MHZ_W {
                CALBC1_1MHZ_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u8) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "BCSCTL1 Calibration Data for 1MHz\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [calbc1_1mhz](index.html) module"]
        pub struct CALBC1_1MHZ_SPEC;
        impl crate::RegisterSpec for CALBC1_1MHZ_SPEC {
            type Ux = u8;
        }
        #[doc = "`read()` method returns [calbc1_1mhz::R](R) reader structure"]
        impl crate::Readable for CALBC1_1MHZ_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [calbc1_1mhz::W](W) writer structure"]
        impl crate::Writable for CALBC1_1MHZ_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets CALBC1_1MHZ to value 0"]
        impl crate::Resettable for CALBC1_1MHZ_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "Watchdog Timer"]
pub struct WATCHDOG_TIMER {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for WATCHDOG_TIMER {}
impl WATCHDOG_TIMER {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const watchdog_timer::RegisterBlock = 0x0120 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const watchdog_timer::RegisterBlock {
        Self::PTR
    }
}
impl Deref for WATCHDOG_TIMER {
    type Target = watchdog_timer::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for WATCHDOG_TIMER {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WATCHDOG_TIMER").finish()
    }
}
#[doc = "Watchdog Timer"]
pub mod watchdog_timer {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Watchdog Timer Control"]
        pub wdtctl: crate::Reg<wdtctl::WDTCTL_SPEC>,
    }
    #[doc = "WDTCTL register accessor: an alias for `Reg<WDTCTL_SPEC>`"]
    pub type WDTCTL = crate::Reg<wdtctl::WDTCTL_SPEC>;
    #[doc = "Watchdog Timer Control"]
    pub mod wdtctl {
        #[doc = "Register `WDTCTL` reader"]
        pub struct R(crate::R<WDTCTL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<WDTCTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<WDTCTL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<WDTCTL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `WDTCTL` writer"]
        pub struct W(crate::W<WDTCTL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<WDTCTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<WDTCTL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<WDTCTL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `WDTSSEL` reader - WDTSSEL"]
        pub struct WDTSSEL_R(crate::FieldReader<bool, bool>);
        impl WDTSSEL_R {
            pub(crate) fn new(bits: bool) -> Self {
                WDTSSEL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WDTSSEL_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WDTSSEL` writer - WDTSSEL"]
        pub struct WDTSSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDTSSEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u16 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `WDTCNTCL` reader - WDTCNTCL"]
        pub struct WDTCNTCL_R(crate::FieldReader<bool, bool>);
        impl WDTCNTCL_R {
            pub(crate) fn new(bits: bool) -> Self {
                WDTCNTCL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WDTCNTCL_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WDTCNTCL` writer - WDTCNTCL"]
        pub struct WDTCNTCL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDTCNTCL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u16 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `WDTTMSEL` reader - WDTTMSEL"]
        pub struct WDTTMSEL_R(crate::FieldReader<bool, bool>);
        impl WDTTMSEL_R {
            pub(crate) fn new(bits: bool) -> Self {
                WDTTMSEL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WDTTMSEL_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WDTTMSEL` writer - WDTTMSEL"]
        pub struct WDTTMSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDTTMSEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u16 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `WDTNMI` reader - WDTNMI"]
        pub struct WDTNMI_R(crate::FieldReader<bool, bool>);
        impl WDTNMI_R {
            pub(crate) fn new(bits: bool) -> Self {
                WDTNMI_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WDTNMI_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WDTNMI` writer - WDTNMI"]
        pub struct WDTNMI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDTNMI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u16 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `WDTNMIES` reader - WDTNMIES"]
        pub struct WDTNMIES_R(crate::FieldReader<bool, bool>);
        impl WDTNMIES_R {
            pub(crate) fn new(bits: bool) -> Self {
                WDTNMIES_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WDTNMIES_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WDTNMIES` writer - WDTNMIES"]
        pub struct WDTNMIES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDTNMIES_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u16 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `WDTHOLD` reader - WDTHOLD"]
        pub struct WDTHOLD_R(crate::FieldReader<bool, bool>);
        impl WDTHOLD_R {
            pub(crate) fn new(bits: bool) -> Self {
                WDTHOLD_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WDTHOLD_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WDTHOLD` writer - WDTHOLD"]
        pub struct WDTHOLD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDTHOLD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u16 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Watchdog Timer Password\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum WDTPW_A {
            #[doc = "105: Value always read from the Watchdog Password register"]
            PASSWORD = 105,
        }
        impl From<WDTPW_A> for u8 {
            #[inline(always)]
            fn from(variant: WDTPW_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `WDTPW` reader - Watchdog Timer Password"]
        pub struct WDTPW_R(crate::FieldReader<u8, WDTPW_A>);
        impl WDTPW_R {
            pub(crate) fn new(bits: u8) -> Self {
                WDTPW_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> Option<WDTPW_A> {
                match self.bits {
                    105 => Some(WDTPW_A::PASSWORD),
                    _ => None,
                }
            }
            #[doc = "Checks if the value of the field is `PASSWORD`"]
            #[inline(always)]
            pub fn is_password(&self) -> bool {
                **self == WDTPW_A::PASSWORD
            }
        }
        impl core::ops::Deref for WDTPW_R {
            type Target = crate::FieldReader<u8, WDTPW_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Watchdog Timer Password\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum WDTPW_AW {
            #[doc = "90: Value which must be written to the Watchdog Password register"]
            PASSWORD = 90,
        }
        impl From<WDTPW_AW> for u8 {
            #[inline(always)]
            fn from(variant: WDTPW_AW) -> Self {
                variant as _
            }
        }
        #[doc = "Field `WDTPW` writer - Watchdog Timer Password"]
        pub struct WDTPW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDTPW_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: WDTPW_AW) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Value which must be written to the Watchdog Password register"]
            #[inline(always)]
            pub fn password(self) -> &'a mut W {
                self.variant(WDTPW_AW::PASSWORD)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | ((value as u16 & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Field `WDTIS` reader - WDTIS0"]
        pub struct WDTIS_R(crate::FieldReader<u8, u8>);
        impl WDTIS_R {
            pub(crate) fn new(bits: u8) -> Self {
                WDTIS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WDTIS_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WDTIS` writer - WDTIS0"]
        pub struct WDTIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDTIS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | (value as u16 & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - WDTSSEL"]
            #[inline(always)]
            pub fn wdtssel(&self) -> WDTSSEL_R {
                WDTSSEL_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - WDTCNTCL"]
            #[inline(always)]
            pub fn wdtcntcl(&self) -> WDTCNTCL_R {
                WDTCNTCL_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - WDTTMSEL"]
            #[inline(always)]
            pub fn wdttmsel(&self) -> WDTTMSEL_R {
                WDTTMSEL_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - WDTNMI"]
            #[inline(always)]
            pub fn wdtnmi(&self) -> WDTNMI_R {
                WDTNMI_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - WDTNMIES"]
            #[inline(always)]
            pub fn wdtnmies(&self) -> WDTNMIES_R {
                WDTNMIES_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - WDTHOLD"]
            #[inline(always)]
            pub fn wdthold(&self) -> WDTHOLD_R {
                WDTHOLD_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 8:15 - Watchdog Timer Password"]
            #[inline(always)]
            pub fn wdtpw(&self) -> WDTPW_R {
                WDTPW_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:1 - WDTIS0"]
            #[inline(always)]
            pub fn wdtis(&self) -> WDTIS_R {
                WDTIS_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 2 - WDTSSEL"]
            #[inline(always)]
            pub fn wdtssel(&mut self) -> WDTSSEL_W {
                WDTSSEL_W { w: self }
            }
            #[doc = "Bit 3 - WDTCNTCL"]
            #[inline(always)]
            pub fn wdtcntcl(&mut self) -> WDTCNTCL_W {
                WDTCNTCL_W { w: self }
            }
            #[doc = "Bit 4 - WDTTMSEL"]
            #[inline(always)]
            pub fn wdttmsel(&mut self) -> WDTTMSEL_W {
                WDTTMSEL_W { w: self }
            }
            #[doc = "Bit 5 - WDTNMI"]
            #[inline(always)]
            pub fn wdtnmi(&mut self) -> WDTNMI_W {
                WDTNMI_W { w: self }
            }
            #[doc = "Bit 6 - WDTNMIES"]
            #[inline(always)]
            pub fn wdtnmies(&mut self) -> WDTNMIES_W {
                WDTNMIES_W { w: self }
            }
            #[doc = "Bit 7 - WDTHOLD"]
            #[inline(always)]
            pub fn wdthold(&mut self) -> WDTHOLD_W {
                WDTHOLD_W { w: self }
            }
            #[doc = "Bits 8:15 - Watchdog Timer Password"]
            #[inline(always)]
            pub fn wdtpw(&mut self) -> WDTPW_W {
                WDTPW_W { w: self }
            }
            #[doc = "Bits 0:1 - WDTIS0"]
            #[inline(always)]
            pub fn wdtis(&mut self) -> WDTIS_W {
                WDTIS_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Watchdog Timer Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wdtctl](index.html) module"]
        pub struct WDTCTL_SPEC;
        impl crate::RegisterSpec for WDTCTL_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [wdtctl::R](R) reader structure"]
        impl crate::Readable for WDTCTL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [wdtctl::W](W) writer structure"]
        impl crate::Writable for WDTCTL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets WDTCTL to value 0"]
        impl crate::Resettable for WDTCTL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "Flash"]
pub struct FLASH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FLASH {}
impl FLASH {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const flash::RegisterBlock = 0x0128 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const flash::RegisterBlock {
        Self::PTR
    }
}
impl Deref for FLASH {
    type Target = flash::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for FLASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FLASH").finish()
    }
}
#[doc = "Flash"]
pub mod flash {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - FLASH Control 1"]
        pub fctl1: crate::Reg<fctl1::FCTL1_SPEC>,
        #[doc = "0x02 - FLASH Control 2"]
        pub fctl2: crate::Reg<fctl2::FCTL2_SPEC>,
        #[doc = "0x04 - FLASH Control 3"]
        pub fctl3: crate::Reg<fctl3::FCTL3_SPEC>,
    }
    #[doc = "FCTL1 register accessor: an alias for `Reg<FCTL1_SPEC>`"]
    pub type FCTL1 = crate::Reg<fctl1::FCTL1_SPEC>;
    #[doc = "FLASH Control 1"]
    pub mod fctl1 {
        #[doc = "Register `FCTL1` reader"]
        pub struct R(crate::R<FCTL1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<FCTL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<FCTL1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<FCTL1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `FCTL1` writer"]
        pub struct W(crate::W<FCTL1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<FCTL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<FCTL1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<FCTL1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `ERASE` reader - Enable bit for Flash segment erase"]
        pub struct ERASE_R(crate::FieldReader<bool, bool>);
        impl ERASE_R {
            pub(crate) fn new(bits: bool) -> Self {
                ERASE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ERASE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ERASE` writer - Enable bit for Flash segment erase"]
        pub struct ERASE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ERASE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u16 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `MERAS` reader - Enable bit for Flash mass erase"]
        pub struct MERAS_R(crate::FieldReader<bool, bool>);
        impl MERAS_R {
            pub(crate) fn new(bits: bool) -> Self {
                MERAS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for MERAS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MERAS` writer - Enable bit for Flash mass erase"]
        pub struct MERAS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MERAS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u16 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `WRT` reader - Enable bit for Flash write"]
        pub struct WRT_R(crate::FieldReader<bool, bool>);
        impl WRT_R {
            pub(crate) fn new(bits: bool) -> Self {
                WRT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WRT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WRT` writer - Enable bit for Flash write"]
        pub struct WRT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WRT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u16 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `BLKWRT` reader - Enable bit for Flash segment write"]
        pub struct BLKWRT_R(crate::FieldReader<bool, bool>);
        impl BLKWRT_R {
            pub(crate) fn new(bits: bool) -> Self {
                BLKWRT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BLKWRT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BLKWRT` writer - Enable bit for Flash segment write"]
        pub struct BLKWRT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BLKWRT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u16 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "FCTL1 Password\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FWKEY_A {
            #[doc = "150: Value always read from the FCTL1 Password register"]
            PASSWORD = 150,
        }
        impl From<FWKEY_A> for u8 {
            #[inline(always)]
            fn from(variant: FWKEY_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FWKEY` reader - FCTL1 Password"]
        pub struct FWKEY_R(crate::FieldReader<u8, FWKEY_A>);
        impl FWKEY_R {
            pub(crate) fn new(bits: u8) -> Self {
                FWKEY_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> Option<FWKEY_A> {
                match self.bits {
                    150 => Some(FWKEY_A::PASSWORD),
                    _ => None,
                }
            }
            #[doc = "Checks if the value of the field is `PASSWORD`"]
            #[inline(always)]
            pub fn is_password(&self) -> bool {
                **self == FWKEY_A::PASSWORD
            }
        }
        impl core::ops::Deref for FWKEY_R {
            type Target = crate::FieldReader<u8, FWKEY_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "FCTL1 Password\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FWKEY_AW {
            #[doc = "165: Value which must be written to the FCTL1 Password register"]
            PASSWORD = 165,
        }
        impl From<FWKEY_AW> for u8 {
            #[inline(always)]
            fn from(variant: FWKEY_AW) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FWKEY` writer - FCTL1 Password"]
        pub struct FWKEY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FWKEY_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FWKEY_AW) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Value which must be written to the FCTL1 Password register"]
            #[inline(always)]
            pub fn password(self) -> &'a mut W {
                self.variant(FWKEY_AW::PASSWORD)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | ((value as u16 & 0xff) << 8);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - Enable bit for Flash segment erase"]
            #[inline(always)]
            pub fn erase(&self) -> ERASE_R {
                ERASE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Enable bit for Flash mass erase"]
            #[inline(always)]
            pub fn meras(&self) -> MERAS_R {
                MERAS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Enable bit for Flash write"]
            #[inline(always)]
            pub fn wrt(&self) -> WRT_R {
                WRT_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Enable bit for Flash segment write"]
            #[inline(always)]
            pub fn blkwrt(&self) -> BLKWRT_R {
                BLKWRT_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 8:15 - FCTL1 Password"]
            #[inline(always)]
            pub fn fwkey(&self) -> FWKEY_R {
                FWKEY_R::new(((self.bits >> 8) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 1 - Enable bit for Flash segment erase"]
            #[inline(always)]
            pub fn erase(&mut self) -> ERASE_W {
                ERASE_W { w: self }
            }
            #[doc = "Bit 2 - Enable bit for Flash mass erase"]
            #[inline(always)]
            pub fn meras(&mut self) -> MERAS_W {
                MERAS_W { w: self }
            }
            #[doc = "Bit 6 - Enable bit for Flash write"]
            #[inline(always)]
            pub fn wrt(&mut self) -> WRT_W {
                WRT_W { w: self }
            }
            #[doc = "Bit 7 - Enable bit for Flash segment write"]
            #[inline(always)]
            pub fn blkwrt(&mut self) -> BLKWRT_W {
                BLKWRT_W { w: self }
            }
            #[doc = "Bits 8:15 - FCTL1 Password"]
            #[inline(always)]
            pub fn fwkey(&mut self) -> FWKEY_W {
                FWKEY_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "FLASH Control 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fctl1](index.html) module"]
        pub struct FCTL1_SPEC;
        impl crate::RegisterSpec for FCTL1_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [fctl1::R](R) reader structure"]
        impl crate::Readable for FCTL1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [fctl1::W](W) writer structure"]
        impl crate::Writable for FCTL1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets FCTL1 to value 0"]
        impl crate::Resettable for FCTL1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "FCTL2 register accessor: an alias for `Reg<FCTL2_SPEC>`"]
    pub type FCTL2 = crate::Reg<fctl2::FCTL2_SPEC>;
    #[doc = "FLASH Control 2"]
    pub mod fctl2 {
        #[doc = "Register `FCTL2` reader"]
        pub struct R(crate::R<FCTL2_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<FCTL2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<FCTL2_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<FCTL2_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `FCTL2` writer"]
        pub struct W(crate::W<FCTL2_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<FCTL2_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<FCTL2_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<FCTL2_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Flash clock select 0 */ /* to distinguish from USART SSELx\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FSSEL_A {
            #[doc = "0: Flash clock select: 0 - ACLK"]
            FSSEL_0 = 0,
            #[doc = "1: Flash clock select: 1 - MCLK"]
            FSSEL_1 = 1,
            #[doc = "2: Flash clock select: 2 - SMCLK"]
            FSSEL_2 = 2,
            #[doc = "3: Flash clock select: 3 - SMCLK"]
            FSSEL_3 = 3,
        }
        impl From<FSSEL_A> for u8 {
            #[inline(always)]
            fn from(variant: FSSEL_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FSSEL` reader - Flash clock select 0 */ /* to distinguish from USART SSELx"]
        pub struct FSSEL_R(crate::FieldReader<u8, FSSEL_A>);
        impl FSSEL_R {
            pub(crate) fn new(bits: u8) -> Self {
                FSSEL_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FSSEL_A {
                match self.bits {
                    0 => FSSEL_A::FSSEL_0,
                    1 => FSSEL_A::FSSEL_1,
                    2 => FSSEL_A::FSSEL_2,
                    3 => FSSEL_A::FSSEL_3,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `FSSEL_0`"]
            #[inline(always)]
            pub fn is_fssel_0(&self) -> bool {
                **self == FSSEL_A::FSSEL_0
            }
            #[doc = "Checks if the value of the field is `FSSEL_1`"]
            #[inline(always)]
            pub fn is_fssel_1(&self) -> bool {
                **self == FSSEL_A::FSSEL_1
            }
            #[doc = "Checks if the value of the field is `FSSEL_2`"]
            #[inline(always)]
            pub fn is_fssel_2(&self) -> bool {
                **self == FSSEL_A::FSSEL_2
            }
            #[doc = "Checks if the value of the field is `FSSEL_3`"]
            #[inline(always)]
            pub fn is_fssel_3(&self) -> bool {
                **self == FSSEL_A::FSSEL_3
            }
        }
        impl core::ops::Deref for FSSEL_R {
            type Target = crate::FieldReader<u8, FSSEL_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FSSEL` writer - Flash clock select 0 */ /* to distinguish from USART SSELx"]
        pub struct FSSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSSEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FSSEL_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Flash clock select: 0 - ACLK"]
            #[inline(always)]
            pub fn fssel_0(self) -> &'a mut W {
                self.variant(FSSEL_A::FSSEL_0)
            }
            #[doc = "Flash clock select: 1 - MCLK"]
            #[inline(always)]
            pub fn fssel_1(self) -> &'a mut W {
                self.variant(FSSEL_A::FSSEL_1)
            }
            #[doc = "Flash clock select: 2 - SMCLK"]
            #[inline(always)]
            pub fn fssel_2(self) -> &'a mut W {
                self.variant(FSSEL_A::FSSEL_2)
            }
            #[doc = "Flash clock select: 3 - SMCLK"]
            #[inline(always)]
            pub fn fssel_3(self) -> &'a mut W {
                self.variant(FSSEL_A::FSSEL_3)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | ((value as u16 & 0x03) << 6);
                self.w
            }
        }
        #[doc = "FCTL2 Password\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FWKEY_A {
            #[doc = "150: Value always read from the FCTL2 Password register"]
            PASSWORD = 150,
        }
        impl From<FWKEY_A> for u8 {
            #[inline(always)]
            fn from(variant: FWKEY_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FWKEY` reader - FCTL2 Password"]
        pub struct FWKEY_R(crate::FieldReader<u8, FWKEY_A>);
        impl FWKEY_R {
            pub(crate) fn new(bits: u8) -> Self {
                FWKEY_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> Option<FWKEY_A> {
                match self.bits {
                    150 => Some(FWKEY_A::PASSWORD),
                    _ => None,
                }
            }
            #[doc = "Checks if the value of the field is `PASSWORD`"]
            #[inline(always)]
            pub fn is_password(&self) -> bool {
                **self == FWKEY_A::PASSWORD
            }
        }
        impl core::ops::Deref for FWKEY_R {
            type Target = crate::FieldReader<u8, FWKEY_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "FCTL2 Password\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FWKEY_AW {
            #[doc = "165: Value which must be written to the FCTL2 Password register"]
            PASSWORD = 165,
        }
        impl From<FWKEY_AW> for u8 {
            #[inline(always)]
            fn from(variant: FWKEY_AW) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FWKEY` writer - FCTL2 Password"]
        pub struct FWKEY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FWKEY_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FWKEY_AW) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Value which must be written to the FCTL2 Password register"]
            #[inline(always)]
            pub fn password(self) -> &'a mut W {
                self.variant(FWKEY_AW::PASSWORD)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | ((value as u16 & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Field `FN` reader - Divide Flash clock by 1 to 64 using FN0 to FN5 according to:"]
        pub struct FN_R(crate::FieldReader<u8, u8>);
        impl FN_R {
            pub(crate) fn new(bits: u8) -> Self {
                FN_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FN_R {
            type Target = crate::FieldReader<u8, u8>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FN` writer - Divide Flash clock by 1 to 64 using FN0 to FN5 according to:"]
        pub struct FN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | (value as u16 & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 6:7 - Flash clock select 0 */ /* to distinguish from USART SSELx"]
            #[inline(always)]
            pub fn fssel(&self) -> FSSEL_R {
                FSSEL_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 8:15 - FCTL2 Password"]
            #[inline(always)]
            pub fn fwkey(&self) -> FWKEY_R {
                FWKEY_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:5 - Divide Flash clock by 1 to 64 using FN0 to FN5 according to:"]
            #[inline(always)]
            pub fn fn_(&self) -> FN_R {
                FN_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 6:7 - Flash clock select 0 */ /* to distinguish from USART SSELx"]
            #[inline(always)]
            pub fn fssel(&mut self) -> FSSEL_W {
                FSSEL_W { w: self }
            }
            #[doc = "Bits 8:15 - FCTL2 Password"]
            #[inline(always)]
            pub fn fwkey(&mut self) -> FWKEY_W {
                FWKEY_W { w: self }
            }
            #[doc = "Bits 0:5 - Divide Flash clock by 1 to 64 using FN0 to FN5 according to:"]
            #[inline(always)]
            pub fn fn_(&mut self) -> FN_W {
                FN_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "FLASH Control 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fctl2](index.html) module"]
        pub struct FCTL2_SPEC;
        impl crate::RegisterSpec for FCTL2_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [fctl2::R](R) reader structure"]
        impl crate::Readable for FCTL2_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [fctl2::W](W) writer structure"]
        impl crate::Writable for FCTL2_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets FCTL2 to value 0"]
        impl crate::Resettable for FCTL2_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "FCTL3 register accessor: an alias for `Reg<FCTL3_SPEC>`"]
    pub type FCTL3 = crate::Reg<fctl3::FCTL3_SPEC>;
    #[doc = "FLASH Control 3"]
    pub mod fctl3 {
        #[doc = "Register `FCTL3` reader"]
        pub struct R(crate::R<FCTL3_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<FCTL3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<FCTL3_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<FCTL3_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `FCTL3` writer"]
        pub struct W(crate::W<FCTL3_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<FCTL3_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<FCTL3_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<FCTL3_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `BUSY` reader - Flash busy: 1"]
        pub struct BUSY_R(crate::FieldReader<bool, bool>);
        impl BUSY_R {
            pub(crate) fn new(bits: bool) -> Self {
                BUSY_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for BUSY_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `BUSY` writer - Flash busy: 1"]
        pub struct BUSY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BUSY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u16 & 0x01);
                self.w
            }
        }
        #[doc = "Field `KEYV` reader - Flash Key violation flag"]
        pub struct KEYV_R(crate::FieldReader<bool, bool>);
        impl KEYV_R {
            pub(crate) fn new(bits: bool) -> Self {
                KEYV_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for KEYV_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `KEYV` writer - Flash Key violation flag"]
        pub struct KEYV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KEYV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u16 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `ACCVIFG` reader - Flash Access violation flag"]
        pub struct ACCVIFG_R(crate::FieldReader<bool, bool>);
        impl ACCVIFG_R {
            pub(crate) fn new(bits: bool) -> Self {
                ACCVIFG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for ACCVIFG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ACCVIFG` writer - Flash Access violation flag"]
        pub struct ACCVIFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ACCVIFG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u16 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `WAIT` reader - Wait flag for segment write"]
        pub struct WAIT_R(crate::FieldReader<bool, bool>);
        impl WAIT_R {
            pub(crate) fn new(bits: bool) -> Self {
                WAIT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for WAIT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `WAIT` writer - Wait flag for segment write"]
        pub struct WAIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAIT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u16 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `LOCK` reader - Lock bit: 1 - Flash is locked (read only)"]
        pub struct LOCK_R(crate::FieldReader<bool, bool>);
        impl LOCK_R {
            pub(crate) fn new(bits: bool) -> Self {
                LOCK_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LOCK_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LOCK` writer - Lock bit: 1 - Flash is locked (read only)"]
        pub struct LOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LOCK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u16 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Field `EMEX` reader - Flash Emergency Exit"]
        pub struct EMEX_R(crate::FieldReader<bool, bool>);
        impl EMEX_R {
            pub(crate) fn new(bits: bool) -> Self {
                EMEX_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for EMEX_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `EMEX` writer - Flash Emergency Exit"]
        pub struct EMEX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EMEX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | ((value as u16 & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Field `LOCKA` reader - Segment A Lock bit: read = 1 - Segment is locked (read only)"]
        pub struct LOCKA_R(crate::FieldReader<bool, bool>);
        impl LOCKA_R {
            pub(crate) fn new(bits: bool) -> Self {
                LOCKA_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for LOCKA_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `LOCKA` writer - Segment A Lock bit: read = 1 - Segment is locked (read only)"]
        pub struct LOCKA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LOCKA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | ((value as u16 & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Field `FAIL` reader - Last Program or Erase failed"]
        pub struct FAIL_R(crate::FieldReader<bool, bool>);
        impl FAIL_R {
            pub(crate) fn new(bits: bool) -> Self {
                FAIL_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for FAIL_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `FAIL` writer - Last Program or Erase failed"]
        pub struct FAIL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FAIL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | ((value as u16 & 0x01) << 7);
                self.w
            }
        }
        #[doc = "FCTL3 Password\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FWKEY_A {
            #[doc = "150: Value always read from the FCTL3 Password register"]
            PASSWORD = 150,
        }
        impl From<FWKEY_A> for u8 {
            #[inline(always)]
            fn from(variant: FWKEY_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FWKEY` reader - FCTL3 Password"]
        pub struct FWKEY_R(crate::FieldReader<u8, FWKEY_A>);
        impl FWKEY_R {
            pub(crate) fn new(bits: u8) -> Self {
                FWKEY_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> Option<FWKEY_A> {
                match self.bits {
                    150 => Some(FWKEY_A::PASSWORD),
                    _ => None,
                }
            }
            #[doc = "Checks if the value of the field is `PASSWORD`"]
            #[inline(always)]
            pub fn is_password(&self) -> bool {
                **self == FWKEY_A::PASSWORD
            }
        }
        impl core::ops::Deref for FWKEY_R {
            type Target = crate::FieldReader<u8, FWKEY_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "FCTL3 Password\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum FWKEY_AW {
            #[doc = "165: Value which must be written to the FCTL3 Password register"]
            PASSWORD = 165,
        }
        impl From<FWKEY_AW> for u8 {
            #[inline(always)]
            fn from(variant: FWKEY_AW) -> Self {
                variant as _
            }
        }
        #[doc = "Field `FWKEY` writer - FCTL3 Password"]
        pub struct FWKEY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FWKEY_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FWKEY_AW) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "Value which must be written to the FCTL3 Password register"]
            #[inline(always)]
            pub fn password(self) -> &'a mut W {
                self.variant(FWKEY_AW::PASSWORD)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | ((value as u16 & 0xff) << 8);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Flash busy: 1"]
            #[inline(always)]
            pub fn busy(&self) -> BUSY_R {
                BUSY_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Flash Key violation flag"]
            #[inline(always)]
            pub fn keyv(&self) -> KEYV_R {
                KEYV_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Flash Access violation flag"]
            #[inline(always)]
            pub fn accvifg(&self) -> ACCVIFG_R {
                ACCVIFG_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Wait flag for segment write"]
            #[inline(always)]
            pub fn wait(&self) -> WAIT_R {
                WAIT_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Lock bit: 1 - Flash is locked (read only)"]
            #[inline(always)]
            pub fn lock(&self) -> LOCK_R {
                LOCK_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Flash Emergency Exit"]
            #[inline(always)]
            pub fn emex(&self) -> EMEX_R {
                EMEX_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Segment A Lock bit: read = 1 - Segment is locked (read only)"]
            #[inline(always)]
            pub fn locka(&self) -> LOCKA_R {
                LOCKA_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Last Program or Erase failed"]
            #[inline(always)]
            pub fn fail(&self) -> FAIL_R {
                FAIL_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 8:15 - FCTL3 Password"]
            #[inline(always)]
            pub fn fwkey(&self) -> FWKEY_R {
                FWKEY_R::new(((self.bits >> 8) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - Flash busy: 1"]
            #[inline(always)]
            pub fn busy(&mut self) -> BUSY_W {
                BUSY_W { w: self }
            }
            #[doc = "Bit 1 - Flash Key violation flag"]
            #[inline(always)]
            pub fn keyv(&mut self) -> KEYV_W {
                KEYV_W { w: self }
            }
            #[doc = "Bit 2 - Flash Access violation flag"]
            #[inline(always)]
            pub fn accvifg(&mut self) -> ACCVIFG_W {
                ACCVIFG_W { w: self }
            }
            #[doc = "Bit 3 - Wait flag for segment write"]
            #[inline(always)]
            pub fn wait(&mut self) -> WAIT_W {
                WAIT_W { w: self }
            }
            #[doc = "Bit 4 - Lock bit: 1 - Flash is locked (read only)"]
            #[inline(always)]
            pub fn lock(&mut self) -> LOCK_W {
                LOCK_W { w: self }
            }
            #[doc = "Bit 5 - Flash Emergency Exit"]
            #[inline(always)]
            pub fn emex(&mut self) -> EMEX_W {
                EMEX_W { w: self }
            }
            #[doc = "Bit 6 - Segment A Lock bit: read = 1 - Segment is locked (read only)"]
            #[inline(always)]
            pub fn locka(&mut self) -> LOCKA_W {
                LOCKA_W { w: self }
            }
            #[doc = "Bit 7 - Last Program or Erase failed"]
            #[inline(always)]
            pub fn fail(&mut self) -> FAIL_W {
                FAIL_W { w: self }
            }
            #[doc = "Bits 8:15 - FCTL3 Password"]
            #[inline(always)]
            pub fn fwkey(&mut self) -> FWKEY_W {
                FWKEY_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "FLASH Control 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fctl3](index.html) module"]
        pub struct FCTL3_SPEC;
        impl crate::RegisterSpec for FCTL3_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [fctl3::R](R) reader structure"]
        impl crate::Readable for FCTL3_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [fctl3::W](W) writer structure"]
        impl crate::Writable for FCTL3_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets FCTL3 to value 0"]
        impl crate::Resettable for FCTL3_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[doc = "Timer A2"]
pub struct TIMER_A2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIMER_A2 {}
impl TIMER_A2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const timer_a2::RegisterBlock = 0x012e as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const timer_a2::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIMER_A2 {
    type Target = timer_a2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIMER_A2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIMER_A2").finish()
    }
}
#[doc = "Timer A2"]
pub mod timer_a2 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Timer A Interrupt Vector Word"]
        pub taiv: crate::Reg<taiv::TAIV_SPEC>,
        _reserved1: [u8; 0x30],
        #[doc = "0x32 - Timer A Control"]
        pub tactl: crate::Reg<tactl::TACTL_SPEC>,
        #[doc = "0x34 - Timer A Capture/Compare Control 0"]
        pub tacctl0: crate::Reg<tacctl0::TACCTL0_SPEC>,
        #[doc = "0x36 - Timer A Capture/Compare Control 1"]
        pub tacctl1: crate::Reg<tacctl1::TACCTL1_SPEC>,
        _reserved4: [u8; 0x0a],
        #[doc = "0x42 - Timer A Counter Register"]
        pub tar: crate::Reg<tar::TAR_SPEC>,
        #[doc = "0x44 - Timer A Capture/Compare 0"]
        pub taccr0: crate::Reg<taccr0::TACCR0_SPEC>,
        #[doc = "0x46 - Timer A Capture/Compare 1"]
        pub taccr1: crate::Reg<taccr1::TACCR1_SPEC>,
    }
    #[doc = "TAIV register accessor: an alias for `Reg<TAIV_SPEC>`"]
    pub type TAIV = crate::Reg<taiv::TAIV_SPEC>;
    #[doc = "Timer A Interrupt Vector Word"]
    pub mod taiv {
        #[doc = "Register `TAIV` reader"]
        pub struct R(crate::R<TAIV_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<TAIV_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<TAIV_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<TAIV_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `TAIV` writer"]
        pub struct W(crate::W<TAIV_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<TAIV_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<TAIV_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<TAIV_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Timer A Interrupt Vector value\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum TAIV_A {
            #[doc = "0: No interrupt pending"]
            NONE = 0,
            #[doc = "2: Capture/Compare 1"]
            TACCR1 = 2,
            #[doc = "10: Timer overflow"]
            TAIFG = 10,
        }
        impl From<TAIV_A> for u8 {
            #[inline(always)]
            fn from(variant: TAIV_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `TAIV` reader - Timer A Interrupt Vector value"]
        pub struct TAIV_R(crate::FieldReader<u8, TAIV_A>);
        impl TAIV_R {
            pub(crate) fn new(bits: u8) -> Self {
                TAIV_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> Option<TAIV_A> {
                match self.bits {
                    0 => Some(TAIV_A::NONE),
                    2 => Some(TAIV_A::TACCR1),
                    10 => Some(TAIV_A::TAIFG),
                    _ => None,
                }
            }
            #[doc = "Checks if the value of the field is `NONE`"]
            #[inline(always)]
            pub fn is_none(&self) -> bool {
                **self == TAIV_A::NONE
            }
            #[doc = "Checks if the value of the field is `TACCR1`"]
            #[inline(always)]
            pub fn is_taccr1(&self) -> bool {
                **self == TAIV_A::TACCR1
            }
            #[doc = "Checks if the value of the field is `TAIFG`"]
            #[inline(always)]
            pub fn is_taifg(&self) -> bool {
                **self == TAIV_A::TAIFG
            }
        }
        impl core::ops::Deref for TAIV_R {
            type Target = crate::FieldReader<u8, TAIV_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TAIV` writer - Timer A Interrupt Vector value"]
        pub struct TAIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAIV_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TAIV_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "No interrupt pending"]
            #[inline(always)]
            pub fn none(self) -> &'a mut W {
                self.variant(TAIV_A::NONE)
            }
            #[doc = "Capture/Compare 1"]
            #[inline(always)]
            pub fn taccr1(self) -> &'a mut W {
                self.variant(TAIV_A::TACCR1)
            }
            #[doc = "Timer overflow"]
            #[inline(always)]
            pub fn taifg(self) -> &'a mut W {
                self.variant(TAIV_A::TAIFG)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | (value as u16 & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Timer A Interrupt Vector value"]
            #[inline(always)]
            pub fn taiv(&self) -> TAIV_R {
                TAIV_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Timer A Interrupt Vector value"]
            #[inline(always)]
            pub fn taiv(&mut self) -> TAIV_W {
                TAIV_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Timer A Interrupt Vector Word\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [taiv](index.html) module"]
        pub struct TAIV_SPEC;
        impl crate::RegisterSpec for TAIV_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [taiv::R](R) reader structure"]
        impl crate::Readable for TAIV_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [taiv::W](W) writer structure"]
        impl crate::Writable for TAIV_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets TAIV to value 0"]
        impl crate::Resettable for TAIV_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "TACTL register accessor: an alias for `Reg<TACTL_SPEC>`"]
    pub type TACTL = crate::Reg<tactl::TACTL_SPEC>;
    #[doc = "Timer A Control"]
    pub mod tactl {
        #[doc = "Register `TACTL` reader"]
        pub struct R(crate::R<TACTL_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<TACTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<TACTL_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<TACTL_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `TACTL` writer"]
        pub struct W(crate::W<TACTL_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<TACTL_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<TACTL_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<TACTL_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TAIFG` reader - Timer A counter interrupt flag"]
        pub struct TAIFG_R(crate::FieldReader<bool, bool>);
        impl TAIFG_R {
            pub(crate) fn new(bits: bool) -> Self {
                TAIFG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TAIFG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TAIFG` writer - Timer A counter interrupt flag"]
        pub struct TAIFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAIFG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u16 & 0x01);
                self.w
            }
        }
        #[doc = "Field `TAIE` reader - Timer A counter interrupt enable"]
        pub struct TAIE_R(crate::FieldReader<bool, bool>);
        impl TAIE_R {
            pub(crate) fn new(bits: bool) -> Self {
                TAIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TAIE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TAIE` writer - Timer A counter interrupt enable"]
        pub struct TAIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u16 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `TACLR` reader - Timer A counter clear"]
        pub struct TACLR_R(crate::FieldReader<bool, bool>);
        impl TACLR_R {
            pub(crate) fn new(bits: bool) -> Self {
                TACLR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TACLR_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TACLR` writer - Timer A counter clear"]
        pub struct TACLR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TACLR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u16 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Timer A mode control 1\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum MC_A {
            #[doc = "0: Timer A mode control: 0 - Stop"]
            MC_0 = 0,
            #[doc = "1: Timer A mode control: 1 - Up to CCR0"]
            MC_1 = 1,
            #[doc = "2: Timer A mode control: 2 - Continous up"]
            MC_2 = 2,
            #[doc = "3: Timer A mode control: 3 - Up/Down"]
            MC_3 = 3,
        }
        impl From<MC_A> for u8 {
            #[inline(always)]
            fn from(variant: MC_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `MC` reader - Timer A mode control 1"]
        pub struct MC_R(crate::FieldReader<u8, MC_A>);
        impl MC_R {
            pub(crate) fn new(bits: u8) -> Self {
                MC_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> MC_A {
                match self.bits {
                    0 => MC_A::MC_0,
                    1 => MC_A::MC_1,
                    2 => MC_A::MC_2,
                    3 => MC_A::MC_3,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `MC_0`"]
            #[inline(always)]
            pub fn is_mc_0(&self) -> bool {
                **self == MC_A::MC_0
            }
            #[doc = "Checks if the value of the field is `MC_1`"]
            #[inline(always)]
            pub fn is_mc_1(&self) -> bool {
                **self == MC_A::MC_1
            }
            #[doc = "Checks if the value of the field is `MC_2`"]
            #[inline(always)]
            pub fn is_mc_2(&self) -> bool {
                **self == MC_A::MC_2
            }
            #[doc = "Checks if the value of the field is `MC_3`"]
            #[inline(always)]
            pub fn is_mc_3(&self) -> bool {
                **self == MC_A::MC_3
            }
        }
        impl core::ops::Deref for MC_R {
            type Target = crate::FieldReader<u8, MC_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `MC` writer - Timer A mode control 1"]
        pub struct MC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MC_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: MC_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Timer A mode control: 0 - Stop"]
            #[inline(always)]
            pub fn mc_0(self) -> &'a mut W {
                self.variant(MC_A::MC_0)
            }
            #[doc = "Timer A mode control: 1 - Up to CCR0"]
            #[inline(always)]
            pub fn mc_1(self) -> &'a mut W {
                self.variant(MC_A::MC_1)
            }
            #[doc = "Timer A mode control: 2 - Continous up"]
            #[inline(always)]
            pub fn mc_2(self) -> &'a mut W {
                self.variant(MC_A::MC_2)
            }
            #[doc = "Timer A mode control: 3 - Up/Down"]
            #[inline(always)]
            pub fn mc_3(self) -> &'a mut W {
                self.variant(MC_A::MC_3)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | ((value as u16 & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Timer A clock input divider 1\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum ID_A {
            #[doc = "0: Timer A input divider: 0 - /1"]
            ID_0 = 0,
            #[doc = "1: Timer A input divider: 1 - /2"]
            ID_1 = 1,
            #[doc = "2: Timer A input divider: 2 - /4"]
            ID_2 = 2,
            #[doc = "3: Timer A input divider: 3 - /8"]
            ID_3 = 3,
        }
        impl From<ID_A> for u8 {
            #[inline(always)]
            fn from(variant: ID_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `ID` reader - Timer A clock input divider 1"]
        pub struct ID_R(crate::FieldReader<u8, ID_A>);
        impl ID_R {
            pub(crate) fn new(bits: u8) -> Self {
                ID_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> ID_A {
                match self.bits {
                    0 => ID_A::ID_0,
                    1 => ID_A::ID_1,
                    2 => ID_A::ID_2,
                    3 => ID_A::ID_3,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `ID_0`"]
            #[inline(always)]
            pub fn is_id_0(&self) -> bool {
                **self == ID_A::ID_0
            }
            #[doc = "Checks if the value of the field is `ID_1`"]
            #[inline(always)]
            pub fn is_id_1(&self) -> bool {
                **self == ID_A::ID_1
            }
            #[doc = "Checks if the value of the field is `ID_2`"]
            #[inline(always)]
            pub fn is_id_2(&self) -> bool {
                **self == ID_A::ID_2
            }
            #[doc = "Checks if the value of the field is `ID_3`"]
            #[inline(always)]
            pub fn is_id_3(&self) -> bool {
                **self == ID_A::ID_3
            }
        }
        impl core::ops::Deref for ID_R {
            type Target = crate::FieldReader<u8, ID_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `ID` writer - Timer A clock input divider 1"]
        pub struct ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ID_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: ID_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Timer A input divider: 0 - /1"]
            #[inline(always)]
            pub fn id_0(self) -> &'a mut W {
                self.variant(ID_A::ID_0)
            }
            #[doc = "Timer A input divider: 1 - /2"]
            #[inline(always)]
            pub fn id_1(self) -> &'a mut W {
                self.variant(ID_A::ID_1)
            }
            #[doc = "Timer A input divider: 2 - /4"]
            #[inline(always)]
            pub fn id_2(self) -> &'a mut W {
                self.variant(ID_A::ID_2)
            }
            #[doc = "Timer A input divider: 3 - /8"]
            #[inline(always)]
            pub fn id_3(self) -> &'a mut W {
                self.variant(ID_A::ID_3)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | ((value as u16 & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Timer A clock source select 1\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum TASSEL_A {
            #[doc = "0: Timer A clock source select: 0 - TACLK"]
            TASSEL_0 = 0,
            #[doc = "1: Timer A clock source select: 1 - ACLK"]
            TASSEL_1 = 1,
            #[doc = "2: Timer A clock source select: 2 - SMCLK"]
            TASSEL_2 = 2,
            #[doc = "3: Timer A clock source select: 3 - INCLK"]
            TASSEL_3 = 3,
        }
        impl From<TASSEL_A> for u8 {
            #[inline(always)]
            fn from(variant: TASSEL_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `TASSEL` reader - Timer A clock source select 1"]
        pub struct TASSEL_R(crate::FieldReader<u8, TASSEL_A>);
        impl TASSEL_R {
            pub(crate) fn new(bits: u8) -> Self {
                TASSEL_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TASSEL_A {
                match self.bits {
                    0 => TASSEL_A::TASSEL_0,
                    1 => TASSEL_A::TASSEL_1,
                    2 => TASSEL_A::TASSEL_2,
                    3 => TASSEL_A::TASSEL_3,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `TASSEL_0`"]
            #[inline(always)]
            pub fn is_tassel_0(&self) -> bool {
                **self == TASSEL_A::TASSEL_0
            }
            #[doc = "Checks if the value of the field is `TASSEL_1`"]
            #[inline(always)]
            pub fn is_tassel_1(&self) -> bool {
                **self == TASSEL_A::TASSEL_1
            }
            #[doc = "Checks if the value of the field is `TASSEL_2`"]
            #[inline(always)]
            pub fn is_tassel_2(&self) -> bool {
                **self == TASSEL_A::TASSEL_2
            }
            #[doc = "Checks if the value of the field is `TASSEL_3`"]
            #[inline(always)]
            pub fn is_tassel_3(&self) -> bool {
                **self == TASSEL_A::TASSEL_3
            }
        }
        impl core::ops::Deref for TASSEL_R {
            type Target = crate::FieldReader<u8, TASSEL_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TASSEL` writer - Timer A clock source select 1"]
        pub struct TASSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TASSEL_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TASSEL_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Timer A clock source select: 0 - TACLK"]
            #[inline(always)]
            pub fn tassel_0(self) -> &'a mut W {
                self.variant(TASSEL_A::TASSEL_0)
            }
            #[doc = "Timer A clock source select: 1 - ACLK"]
            #[inline(always)]
            pub fn tassel_1(self) -> &'a mut W {
                self.variant(TASSEL_A::TASSEL_1)
            }
            #[doc = "Timer A clock source select: 2 - SMCLK"]
            #[inline(always)]
            pub fn tassel_2(self) -> &'a mut W {
                self.variant(TASSEL_A::TASSEL_2)
            }
            #[doc = "Timer A clock source select: 3 - INCLK"]
            #[inline(always)]
            pub fn tassel_3(self) -> &'a mut W {
                self.variant(TASSEL_A::TASSEL_3)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | ((value as u16 & 0x03) << 8);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Timer A counter interrupt flag"]
            #[inline(always)]
            pub fn taifg(&self) -> TAIFG_R {
                TAIFG_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Timer A counter interrupt enable"]
            #[inline(always)]
            pub fn taie(&self) -> TAIE_R {
                TAIE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Timer A counter clear"]
            #[inline(always)]
            pub fn taclr(&self) -> TACLR_R {
                TACLR_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 4:5 - Timer A mode control 1"]
            #[inline(always)]
            pub fn mc(&self) -> MC_R {
                MC_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Timer A clock input divider 1"]
            #[inline(always)]
            pub fn id(&self) -> ID_R {
                ID_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Timer A clock source select 1"]
            #[inline(always)]
            pub fn tassel(&self) -> TASSEL_R {
                TASSEL_R::new(((self.bits >> 8) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - Timer A counter interrupt flag"]
            #[inline(always)]
            pub fn taifg(&mut self) -> TAIFG_W {
                TAIFG_W { w: self }
            }
            #[doc = "Bit 1 - Timer A counter interrupt enable"]
            #[inline(always)]
            pub fn taie(&mut self) -> TAIE_W {
                TAIE_W { w: self }
            }
            #[doc = "Bit 2 - Timer A counter clear"]
            #[inline(always)]
            pub fn taclr(&mut self) -> TACLR_W {
                TACLR_W { w: self }
            }
            #[doc = "Bits 4:5 - Timer A mode control 1"]
            #[inline(always)]
            pub fn mc(&mut self) -> MC_W {
                MC_W { w: self }
            }
            #[doc = "Bits 6:7 - Timer A clock input divider 1"]
            #[inline(always)]
            pub fn id(&mut self) -> ID_W {
                ID_W { w: self }
            }
            #[doc = "Bits 8:9 - Timer A clock source select 1"]
            #[inline(always)]
            pub fn tassel(&mut self) -> TASSEL_W {
                TASSEL_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Timer A Control\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tactl](index.html) module"]
        pub struct TACTL_SPEC;
        impl crate::RegisterSpec for TACTL_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [tactl::R](R) reader structure"]
        impl crate::Readable for TACTL_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [tactl::W](W) writer structure"]
        impl crate::Writable for TACTL_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets TACTL to value 0"]
        impl crate::Resettable for TACTL_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "TACCTL0 register accessor: an alias for `Reg<TACCTL0_SPEC>`"]
    pub type TACCTL0 = crate::Reg<tacctl0::TACCTL0_SPEC>;
    #[doc = "Timer A Capture/Compare Control 0"]
    pub mod tacctl0 {
        #[doc = "Register `TACCTL0` reader"]
        pub struct R(crate::R<TACCTL0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<TACCTL0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<TACCTL0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<TACCTL0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `TACCTL0` writer"]
        pub struct W(crate::W<TACCTL0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<TACCTL0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<TACCTL0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<TACCTL0_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CCIFG` reader - Capture/compare interrupt flag"]
        pub struct CCIFG_R(crate::FieldReader<bool, bool>);
        impl CCIFG_R {
            pub(crate) fn new(bits: bool) -> Self {
                CCIFG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CCIFG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CCIFG` writer - Capture/compare interrupt flag"]
        pub struct CCIFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCIFG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u16 & 0x01);
                self.w
            }
        }
        #[doc = "Field `COV` reader - Capture/compare overflow flag"]
        pub struct COV_R(crate::FieldReader<bool, bool>);
        impl COV_R {
            pub(crate) fn new(bits: bool) -> Self {
                COV_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for COV_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `COV` writer - Capture/compare overflow flag"]
        pub struct COV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u16 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `OUT` reader - PWM Output signal if output mode 0"]
        pub struct OUT_R(crate::FieldReader<bool, bool>);
        impl OUT_R {
            pub(crate) fn new(bits: bool) -> Self {
                OUT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OUT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OUT` writer - PWM Output signal if output mode 0"]
        pub struct OUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OUT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u16 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `CCI` reader - Capture input signal (read)"]
        pub struct CCI_R(crate::FieldReader<bool, bool>);
        impl CCI_R {
            pub(crate) fn new(bits: bool) -> Self {
                CCI_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CCI_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CCI` writer - Capture input signal (read)"]
        pub struct CCI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u16 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `CCIE` reader - Capture/compare interrupt enable"]
        pub struct CCIE_R(crate::FieldReader<bool, bool>);
        impl CCIE_R {
            pub(crate) fn new(bits: bool) -> Self {
                CCIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CCIE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CCIE` writer - Capture/compare interrupt enable"]
        pub struct CCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u16 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Output mode 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum OUTMOD_A {
            #[doc = "0: PWM output mode: 0 - output only"]
            OUTMOD_0 = 0,
            #[doc = "1: PWM output mode: 1 - set"]
            OUTMOD_1 = 1,
            #[doc = "2: PWM output mode: 2 - PWM toggle/reset"]
            OUTMOD_2 = 2,
            #[doc = "3: PWM output mode: 3 - PWM set/reset"]
            OUTMOD_3 = 3,
            #[doc = "4: PWM output mode: 4 - toggle"]
            OUTMOD_4 = 4,
            #[doc = "5: PWM output mode: 5 - Reset"]
            OUTMOD_5 = 5,
            #[doc = "6: PWM output mode: 6 - PWM toggle/set"]
            OUTMOD_6 = 6,
            #[doc = "7: PWM output mode: 7 - PWM reset/set"]
            OUTMOD_7 = 7,
        }
        impl From<OUTMOD_A> for u8 {
            #[inline(always)]
            fn from(variant: OUTMOD_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `OUTMOD` reader - Output mode 2"]
        pub struct OUTMOD_R(crate::FieldReader<u8, OUTMOD_A>);
        impl OUTMOD_R {
            pub(crate) fn new(bits: u8) -> Self {
                OUTMOD_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OUTMOD_A {
                match self.bits {
                    0 => OUTMOD_A::OUTMOD_0,
                    1 => OUTMOD_A::OUTMOD_1,
                    2 => OUTMOD_A::OUTMOD_2,
                    3 => OUTMOD_A::OUTMOD_3,
                    4 => OUTMOD_A::OUTMOD_4,
                    5 => OUTMOD_A::OUTMOD_5,
                    6 => OUTMOD_A::OUTMOD_6,
                    7 => OUTMOD_A::OUTMOD_7,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `OUTMOD_0`"]
            #[inline(always)]
            pub fn is_outmod_0(&self) -> bool {
                **self == OUTMOD_A::OUTMOD_0
            }
            #[doc = "Checks if the value of the field is `OUTMOD_1`"]
            #[inline(always)]
            pub fn is_outmod_1(&self) -> bool {
                **self == OUTMOD_A::OUTMOD_1
            }
            #[doc = "Checks if the value of the field is `OUTMOD_2`"]
            #[inline(always)]
            pub fn is_outmod_2(&self) -> bool {
                **self == OUTMOD_A::OUTMOD_2
            }
            #[doc = "Checks if the value of the field is `OUTMOD_3`"]
            #[inline(always)]
            pub fn is_outmod_3(&self) -> bool {
                **self == OUTMOD_A::OUTMOD_3
            }
            #[doc = "Checks if the value of the field is `OUTMOD_4`"]
            #[inline(always)]
            pub fn is_outmod_4(&self) -> bool {
                **self == OUTMOD_A::OUTMOD_4
            }
            #[doc = "Checks if the value of the field is `OUTMOD_5`"]
            #[inline(always)]
            pub fn is_outmod_5(&self) -> bool {
                **self == OUTMOD_A::OUTMOD_5
            }
            #[doc = "Checks if the value of the field is `OUTMOD_6`"]
            #[inline(always)]
            pub fn is_outmod_6(&self) -> bool {
                **self == OUTMOD_A::OUTMOD_6
            }
            #[doc = "Checks if the value of the field is `OUTMOD_7`"]
            #[inline(always)]
            pub fn is_outmod_7(&self) -> bool {
                **self == OUTMOD_A::OUTMOD_7
            }
        }
        impl core::ops::Deref for OUTMOD_R {
            type Target = crate::FieldReader<u8, OUTMOD_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OUTMOD` writer - Output mode 2"]
        pub struct OUTMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OUTMOD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OUTMOD_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "PWM output mode: 0 - output only"]
            #[inline(always)]
            pub fn outmod_0(self) -> &'a mut W {
                self.variant(OUTMOD_A::OUTMOD_0)
            }
            #[doc = "PWM output mode: 1 - set"]
            #[inline(always)]
            pub fn outmod_1(self) -> &'a mut W {
                self.variant(OUTMOD_A::OUTMOD_1)
            }
            #[doc = "PWM output mode: 2 - PWM toggle/reset"]
            #[inline(always)]
            pub fn outmod_2(self) -> &'a mut W {
                self.variant(OUTMOD_A::OUTMOD_2)
            }
            #[doc = "PWM output mode: 3 - PWM set/reset"]
            #[inline(always)]
            pub fn outmod_3(self) -> &'a mut W {
                self.variant(OUTMOD_A::OUTMOD_3)
            }
            #[doc = "PWM output mode: 4 - toggle"]
            #[inline(always)]
            pub fn outmod_4(self) -> &'a mut W {
                self.variant(OUTMOD_A::OUTMOD_4)
            }
            #[doc = "PWM output mode: 5 - Reset"]
            #[inline(always)]
            pub fn outmod_5(self) -> &'a mut W {
                self.variant(OUTMOD_A::OUTMOD_5)
            }
            #[doc = "PWM output mode: 6 - PWM toggle/set"]
            #[inline(always)]
            pub fn outmod_6(self) -> &'a mut W {
                self.variant(OUTMOD_A::OUTMOD_6)
            }
            #[doc = "PWM output mode: 7 - PWM reset/set"]
            #[inline(always)]
            pub fn outmod_7(self) -> &'a mut W {
                self.variant(OUTMOD_A::OUTMOD_7)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 5)) | ((value as u16 & 0x07) << 5);
                self.w
            }
        }
        #[doc = "Field `CAP` reader - Capture mode: 1 /Compare mode : 0"]
        pub struct CAP_R(crate::FieldReader<bool, bool>);
        impl CAP_R {
            pub(crate) fn new(bits: bool) -> Self {
                CAP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CAP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CAP` writer - Capture mode: 1 /Compare mode : 0"]
        pub struct CAP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u16 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `SCCI` reader - Latched capture signal (read)"]
        pub struct SCCI_R(crate::FieldReader<bool, bool>);
        impl SCCI_R {
            pub(crate) fn new(bits: bool) -> Self {
                SCCI_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SCCI_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SCCI` writer - Latched capture signal (read)"]
        pub struct SCCI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCCI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u16 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `SCS` reader - Capture sychronize"]
        pub struct SCS_R(crate::FieldReader<bool, bool>);
        impl SCS_R {
            pub(crate) fn new(bits: bool) -> Self {
                SCS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SCS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SCS` writer - Capture sychronize"]
        pub struct SCS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u16 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Capture input select 1\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CCIS_A {
            #[doc = "0: Capture input select: 0 - CCIxA"]
            CCIS_0 = 0,
            #[doc = "1: Capture input select: 1 - CCIxB"]
            CCIS_1 = 1,
            #[doc = "2: Capture input select: 2 - GND"]
            CCIS_2 = 2,
            #[doc = "3: Capture input select: 3 - Vcc"]
            CCIS_3 = 3,
        }
        impl From<CCIS_A> for u8 {
            #[inline(always)]
            fn from(variant: CCIS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `CCIS` reader - Capture input select 1"]
        pub struct CCIS_R(crate::FieldReader<u8, CCIS_A>);
        impl CCIS_R {
            pub(crate) fn new(bits: u8) -> Self {
                CCIS_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CCIS_A {
                match self.bits {
                    0 => CCIS_A::CCIS_0,
                    1 => CCIS_A::CCIS_1,
                    2 => CCIS_A::CCIS_2,
                    3 => CCIS_A::CCIS_3,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `CCIS_0`"]
            #[inline(always)]
            pub fn is_ccis_0(&self) -> bool {
                **self == CCIS_A::CCIS_0
            }
            #[doc = "Checks if the value of the field is `CCIS_1`"]
            #[inline(always)]
            pub fn is_ccis_1(&self) -> bool {
                **self == CCIS_A::CCIS_1
            }
            #[doc = "Checks if the value of the field is `CCIS_2`"]
            #[inline(always)]
            pub fn is_ccis_2(&self) -> bool {
                **self == CCIS_A::CCIS_2
            }
            #[doc = "Checks if the value of the field is `CCIS_3`"]
            #[inline(always)]
            pub fn is_ccis_3(&self) -> bool {
                **self == CCIS_A::CCIS_3
            }
        }
        impl core::ops::Deref for CCIS_R {
            type Target = crate::FieldReader<u8, CCIS_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CCIS` writer - Capture input select 1"]
        pub struct CCIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCIS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CCIS_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Capture input select: 0 - CCIxA"]
            #[inline(always)]
            pub fn ccis_0(self) -> &'a mut W {
                self.variant(CCIS_A::CCIS_0)
            }
            #[doc = "Capture input select: 1 - CCIxB"]
            #[inline(always)]
            pub fn ccis_1(self) -> &'a mut W {
                self.variant(CCIS_A::CCIS_1)
            }
            #[doc = "Capture input select: 2 - GND"]
            #[inline(always)]
            pub fn ccis_2(self) -> &'a mut W {
                self.variant(CCIS_A::CCIS_2)
            }
            #[doc = "Capture input select: 3 - Vcc"]
            #[inline(always)]
            pub fn ccis_3(self) -> &'a mut W {
                self.variant(CCIS_A::CCIS_3)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | ((value as u16 & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Capture mode 1\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CM_A {
            #[doc = "0: Capture mode: 0 - disabled"]
            CM_0 = 0,
            #[doc = "1: Capture mode: 1 - pos. edge"]
            CM_1 = 1,
            #[doc = "2: Capture mode: 1 - neg. edge"]
            CM_2 = 2,
            #[doc = "3: Capture mode: 1 - both edges"]
            CM_3 = 3,
        }
        impl From<CM_A> for u8 {
            #[inline(always)]
            fn from(variant: CM_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `CM` reader - Capture mode 1"]
        pub struct CM_R(crate::FieldReader<u8, CM_A>);
        impl CM_R {
            pub(crate) fn new(bits: u8) -> Self {
                CM_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CM_A {
                match self.bits {
                    0 => CM_A::CM_0,
                    1 => CM_A::CM_1,
                    2 => CM_A::CM_2,
                    3 => CM_A::CM_3,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `CM_0`"]
            #[inline(always)]
            pub fn is_cm_0(&self) -> bool {
                **self == CM_A::CM_0
            }
            #[doc = "Checks if the value of the field is `CM_1`"]
            #[inline(always)]
            pub fn is_cm_1(&self) -> bool {
                **self == CM_A::CM_1
            }
            #[doc = "Checks if the value of the field is `CM_2`"]
            #[inline(always)]
            pub fn is_cm_2(&self) -> bool {
                **self == CM_A::CM_2
            }
            #[doc = "Checks if the value of the field is `CM_3`"]
            #[inline(always)]
            pub fn is_cm_3(&self) -> bool {
                **self == CM_A::CM_3
            }
        }
        impl core::ops::Deref for CM_R {
            type Target = crate::FieldReader<u8, CM_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CM` writer - Capture mode 1"]
        pub struct CM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CM_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Capture mode: 0 - disabled"]
            #[inline(always)]
            pub fn cm_0(self) -> &'a mut W {
                self.variant(CM_A::CM_0)
            }
            #[doc = "Capture mode: 1 - pos. edge"]
            #[inline(always)]
            pub fn cm_1(self) -> &'a mut W {
                self.variant(CM_A::CM_1)
            }
            #[doc = "Capture mode: 1 - neg. edge"]
            #[inline(always)]
            pub fn cm_2(self) -> &'a mut W {
                self.variant(CM_A::CM_2)
            }
            #[doc = "Capture mode: 1 - both edges"]
            #[inline(always)]
            pub fn cm_3(self) -> &'a mut W {
                self.variant(CM_A::CM_3)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | ((value as u16 & 0x03) << 14);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Capture/compare interrupt flag"]
            #[inline(always)]
            pub fn ccifg(&self) -> CCIFG_R {
                CCIFG_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/compare overflow flag"]
            #[inline(always)]
            pub fn cov(&self) -> COV_R {
                COV_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - PWM Output signal if output mode 0"]
            #[inline(always)]
            pub fn out(&self) -> OUT_R {
                OUT_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Capture input signal (read)"]
            #[inline(always)]
            pub fn cci(&self) -> CCI_R {
                CCI_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Capture/compare interrupt enable"]
            #[inline(always)]
            pub fn ccie(&self) -> CCIE_R {
                CCIE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bits 5:7 - Output mode 2"]
            #[inline(always)]
            pub fn outmod(&self) -> OUTMOD_R {
                OUTMOD_R::new(((self.bits >> 5) & 0x07) as u8)
            }
            #[doc = "Bit 8 - Capture mode: 1 /Compare mode : 0"]
            #[inline(always)]
            pub fn cap(&self) -> CAP_R {
                CAP_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Latched capture signal (read)"]
            #[inline(always)]
            pub fn scci(&self) -> SCCI_R {
                SCCI_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Capture sychronize"]
            #[inline(always)]
            pub fn scs(&self) -> SCS_R {
                SCS_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Capture input select 1"]
            #[inline(always)]
            pub fn ccis(&self) -> CCIS_R {
                CCIS_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Capture mode 1"]
            #[inline(always)]
            pub fn cm(&self) -> CM_R {
                CM_R::new(((self.bits >> 14) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - Capture/compare interrupt flag"]
            #[inline(always)]
            pub fn ccifg(&mut self) -> CCIFG_W {
                CCIFG_W { w: self }
            }
            #[doc = "Bit 1 - Capture/compare overflow flag"]
            #[inline(always)]
            pub fn cov(&mut self) -> COV_W {
                COV_W { w: self }
            }
            #[doc = "Bit 2 - PWM Output signal if output mode 0"]
            #[inline(always)]
            pub fn out(&mut self) -> OUT_W {
                OUT_W { w: self }
            }
            #[doc = "Bit 3 - Capture input signal (read)"]
            #[inline(always)]
            pub fn cci(&mut self) -> CCI_W {
                CCI_W { w: self }
            }
            #[doc = "Bit 4 - Capture/compare interrupt enable"]
            #[inline(always)]
            pub fn ccie(&mut self) -> CCIE_W {
                CCIE_W { w: self }
            }
            #[doc = "Bits 5:7 - Output mode 2"]
            #[inline(always)]
            pub fn outmod(&mut self) -> OUTMOD_W {
                OUTMOD_W { w: self }
            }
            #[doc = "Bit 8 - Capture mode: 1 /Compare mode : 0"]
            #[inline(always)]
            pub fn cap(&mut self) -> CAP_W {
                CAP_W { w: self }
            }
            #[doc = "Bit 10 - Latched capture signal (read)"]
            #[inline(always)]
            pub fn scci(&mut self) -> SCCI_W {
                SCCI_W { w: self }
            }
            #[doc = "Bit 11 - Capture sychronize"]
            #[inline(always)]
            pub fn scs(&mut self) -> SCS_W {
                SCS_W { w: self }
            }
            #[doc = "Bits 12:13 - Capture input select 1"]
            #[inline(always)]
            pub fn ccis(&mut self) -> CCIS_W {
                CCIS_W { w: self }
            }
            #[doc = "Bits 14:15 - Capture mode 1"]
            #[inline(always)]
            pub fn cm(&mut self) -> CM_W {
                CM_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Timer A Capture/Compare Control 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tacctl0](index.html) module"]
        pub struct TACCTL0_SPEC;
        impl crate::RegisterSpec for TACCTL0_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [tacctl0::R](R) reader structure"]
        impl crate::Readable for TACCTL0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [tacctl0::W](W) writer structure"]
        impl crate::Writable for TACCTL0_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets TACCTL0 to value 0"]
        impl crate::Resettable for TACCTL0_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "TACCTL1 register accessor: an alias for `Reg<TACCTL1_SPEC>`"]
    pub type TACCTL1 = crate::Reg<tacctl1::TACCTL1_SPEC>;
    #[doc = "Timer A Capture/Compare Control 1"]
    pub mod tacctl1 {
        #[doc = "Register `TACCTL1` reader"]
        pub struct R(crate::R<TACCTL1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<TACCTL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<TACCTL1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<TACCTL1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `TACCTL1` writer"]
        pub struct W(crate::W<TACCTL1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<TACCTL1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<TACCTL1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<TACCTL1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `CCIFG` reader - Capture/compare interrupt flag"]
        pub struct CCIFG_R(crate::FieldReader<bool, bool>);
        impl CCIFG_R {
            pub(crate) fn new(bits: bool) -> Self {
                CCIFG_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CCIFG_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CCIFG` writer - Capture/compare interrupt flag"]
        pub struct CCIFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCIFG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | (value as u16 & 0x01);
                self.w
            }
        }
        #[doc = "Field `COV` reader - Capture/compare overflow flag"]
        pub struct COV_R(crate::FieldReader<bool, bool>);
        impl COV_R {
            pub(crate) fn new(bits: bool) -> Self {
                COV_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for COV_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `COV` writer - Capture/compare overflow flag"]
        pub struct COV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | ((value as u16 & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Field `OUT` reader - PWM Output signal if output mode 0"]
        pub struct OUT_R(crate::FieldReader<bool, bool>);
        impl OUT_R {
            pub(crate) fn new(bits: bool) -> Self {
                OUT_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for OUT_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OUT` writer - PWM Output signal if output mode 0"]
        pub struct OUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OUT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | ((value as u16 & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Field `CCI` reader - Capture input signal (read)"]
        pub struct CCI_R(crate::FieldReader<bool, bool>);
        impl CCI_R {
            pub(crate) fn new(bits: bool) -> Self {
                CCI_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CCI_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CCI` writer - Capture input signal (read)"]
        pub struct CCI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | ((value as u16 & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Field `CCIE` reader - Capture/compare interrupt enable"]
        pub struct CCIE_R(crate::FieldReader<bool, bool>);
        impl CCIE_R {
            pub(crate) fn new(bits: bool) -> Self {
                CCIE_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CCIE_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CCIE` writer - Capture/compare interrupt enable"]
        pub struct CCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | ((value as u16 & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Output mode 2\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum OUTMOD_A {
            #[doc = "0: PWM output mode: 0 - output only"]
            OUTMOD_0 = 0,
            #[doc = "1: PWM output mode: 1 - set"]
            OUTMOD_1 = 1,
            #[doc = "2: PWM output mode: 2 - PWM toggle/reset"]
            OUTMOD_2 = 2,
            #[doc = "3: PWM output mode: 3 - PWM set/reset"]
            OUTMOD_3 = 3,
            #[doc = "4: PWM output mode: 4 - toggle"]
            OUTMOD_4 = 4,
            #[doc = "5: PWM output mode: 5 - Reset"]
            OUTMOD_5 = 5,
            #[doc = "6: PWM output mode: 6 - PWM toggle/set"]
            OUTMOD_6 = 6,
            #[doc = "7: PWM output mode: 7 - PWM reset/set"]
            OUTMOD_7 = 7,
        }
        impl From<OUTMOD_A> for u8 {
            #[inline(always)]
            fn from(variant: OUTMOD_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `OUTMOD` reader - Output mode 2"]
        pub struct OUTMOD_R(crate::FieldReader<u8, OUTMOD_A>);
        impl OUTMOD_R {
            pub(crate) fn new(bits: u8) -> Self {
                OUTMOD_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> OUTMOD_A {
                match self.bits {
                    0 => OUTMOD_A::OUTMOD_0,
                    1 => OUTMOD_A::OUTMOD_1,
                    2 => OUTMOD_A::OUTMOD_2,
                    3 => OUTMOD_A::OUTMOD_3,
                    4 => OUTMOD_A::OUTMOD_4,
                    5 => OUTMOD_A::OUTMOD_5,
                    6 => OUTMOD_A::OUTMOD_6,
                    7 => OUTMOD_A::OUTMOD_7,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `OUTMOD_0`"]
            #[inline(always)]
            pub fn is_outmod_0(&self) -> bool {
                **self == OUTMOD_A::OUTMOD_0
            }
            #[doc = "Checks if the value of the field is `OUTMOD_1`"]
            #[inline(always)]
            pub fn is_outmod_1(&self) -> bool {
                **self == OUTMOD_A::OUTMOD_1
            }
            #[doc = "Checks if the value of the field is `OUTMOD_2`"]
            #[inline(always)]
            pub fn is_outmod_2(&self) -> bool {
                **self == OUTMOD_A::OUTMOD_2
            }
            #[doc = "Checks if the value of the field is `OUTMOD_3`"]
            #[inline(always)]
            pub fn is_outmod_3(&self) -> bool {
                **self == OUTMOD_A::OUTMOD_3
            }
            #[doc = "Checks if the value of the field is `OUTMOD_4`"]
            #[inline(always)]
            pub fn is_outmod_4(&self) -> bool {
                **self == OUTMOD_A::OUTMOD_4
            }
            #[doc = "Checks if the value of the field is `OUTMOD_5`"]
            #[inline(always)]
            pub fn is_outmod_5(&self) -> bool {
                **self == OUTMOD_A::OUTMOD_5
            }
            #[doc = "Checks if the value of the field is `OUTMOD_6`"]
            #[inline(always)]
            pub fn is_outmod_6(&self) -> bool {
                **self == OUTMOD_A::OUTMOD_6
            }
            #[doc = "Checks if the value of the field is `OUTMOD_7`"]
            #[inline(always)]
            pub fn is_outmod_7(&self) -> bool {
                **self == OUTMOD_A::OUTMOD_7
            }
        }
        impl core::ops::Deref for OUTMOD_R {
            type Target = crate::FieldReader<u8, OUTMOD_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `OUTMOD` writer - Output mode 2"]
        pub struct OUTMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OUTMOD_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: OUTMOD_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "PWM output mode: 0 - output only"]
            #[inline(always)]
            pub fn outmod_0(self) -> &'a mut W {
                self.variant(OUTMOD_A::OUTMOD_0)
            }
            #[doc = "PWM output mode: 1 - set"]
            #[inline(always)]
            pub fn outmod_1(self) -> &'a mut W {
                self.variant(OUTMOD_A::OUTMOD_1)
            }
            #[doc = "PWM output mode: 2 - PWM toggle/reset"]
            #[inline(always)]
            pub fn outmod_2(self) -> &'a mut W {
                self.variant(OUTMOD_A::OUTMOD_2)
            }
            #[doc = "PWM output mode: 3 - PWM set/reset"]
            #[inline(always)]
            pub fn outmod_3(self) -> &'a mut W {
                self.variant(OUTMOD_A::OUTMOD_3)
            }
            #[doc = "PWM output mode: 4 - toggle"]
            #[inline(always)]
            pub fn outmod_4(self) -> &'a mut W {
                self.variant(OUTMOD_A::OUTMOD_4)
            }
            #[doc = "PWM output mode: 5 - Reset"]
            #[inline(always)]
            pub fn outmod_5(self) -> &'a mut W {
                self.variant(OUTMOD_A::OUTMOD_5)
            }
            #[doc = "PWM output mode: 6 - PWM toggle/set"]
            #[inline(always)]
            pub fn outmod_6(self) -> &'a mut W {
                self.variant(OUTMOD_A::OUTMOD_6)
            }
            #[doc = "PWM output mode: 7 - PWM reset/set"]
            #[inline(always)]
            pub fn outmod_7(self) -> &'a mut W {
                self.variant(OUTMOD_A::OUTMOD_7)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 5)) | ((value as u16 & 0x07) << 5);
                self.w
            }
        }
        #[doc = "Field `CAP` reader - Capture mode: 1 /Compare mode : 0"]
        pub struct CAP_R(crate::FieldReader<bool, bool>);
        impl CAP_R {
            pub(crate) fn new(bits: bool) -> Self {
                CAP_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for CAP_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CAP` writer - Capture mode: 1 /Compare mode : 0"]
        pub struct CAP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CAP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | ((value as u16 & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Field `SCCI` reader - Latched capture signal (read)"]
        pub struct SCCI_R(crate::FieldReader<bool, bool>);
        impl SCCI_R {
            pub(crate) fn new(bits: bool) -> Self {
                SCCI_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SCCI_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SCCI` writer - Latched capture signal (read)"]
        pub struct SCCI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCCI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | ((value as u16 & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Field `SCS` reader - Capture sychronize"]
        pub struct SCS_R(crate::FieldReader<bool, bool>);
        impl SCS_R {
            pub(crate) fn new(bits: bool) -> Self {
                SCS_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for SCS_R {
            type Target = crate::FieldReader<bool, bool>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `SCS` writer - Capture sychronize"]
        pub struct SCS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | ((value as u16 & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Capture input select 1\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CCIS_A {
            #[doc = "0: Capture input select: 0 - CCIxA"]
            CCIS_0 = 0,
            #[doc = "1: Capture input select: 1 - CCIxB"]
            CCIS_1 = 1,
            #[doc = "2: Capture input select: 2 - GND"]
            CCIS_2 = 2,
            #[doc = "3: Capture input select: 3 - Vcc"]
            CCIS_3 = 3,
        }
        impl From<CCIS_A> for u8 {
            #[inline(always)]
            fn from(variant: CCIS_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `CCIS` reader - Capture input select 1"]
        pub struct CCIS_R(crate::FieldReader<u8, CCIS_A>);
        impl CCIS_R {
            pub(crate) fn new(bits: u8) -> Self {
                CCIS_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CCIS_A {
                match self.bits {
                    0 => CCIS_A::CCIS_0,
                    1 => CCIS_A::CCIS_1,
                    2 => CCIS_A::CCIS_2,
                    3 => CCIS_A::CCIS_3,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `CCIS_0`"]
            #[inline(always)]
            pub fn is_ccis_0(&self) -> bool {
                **self == CCIS_A::CCIS_0
            }
            #[doc = "Checks if the value of the field is `CCIS_1`"]
            #[inline(always)]
            pub fn is_ccis_1(&self) -> bool {
                **self == CCIS_A::CCIS_1
            }
            #[doc = "Checks if the value of the field is `CCIS_2`"]
            #[inline(always)]
            pub fn is_ccis_2(&self) -> bool {
                **self == CCIS_A::CCIS_2
            }
            #[doc = "Checks if the value of the field is `CCIS_3`"]
            #[inline(always)]
            pub fn is_ccis_3(&self) -> bool {
                **self == CCIS_A::CCIS_3
            }
        }
        impl core::ops::Deref for CCIS_R {
            type Target = crate::FieldReader<u8, CCIS_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CCIS` writer - Capture input select 1"]
        pub struct CCIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCIS_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CCIS_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Capture input select: 0 - CCIxA"]
            #[inline(always)]
            pub fn ccis_0(self) -> &'a mut W {
                self.variant(CCIS_A::CCIS_0)
            }
            #[doc = "Capture input select: 1 - CCIxB"]
            #[inline(always)]
            pub fn ccis_1(self) -> &'a mut W {
                self.variant(CCIS_A::CCIS_1)
            }
            #[doc = "Capture input select: 2 - GND"]
            #[inline(always)]
            pub fn ccis_2(self) -> &'a mut W {
                self.variant(CCIS_A::CCIS_2)
            }
            #[doc = "Capture input select: 3 - Vcc"]
            #[inline(always)]
            pub fn ccis_3(self) -> &'a mut W {
                self.variant(CCIS_A::CCIS_3)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | ((value as u16 & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Capture mode 1\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum CM_A {
            #[doc = "0: Capture mode: 0 - disabled"]
            CM_0 = 0,
            #[doc = "1: Capture mode: 1 - pos. edge"]
            CM_1 = 1,
            #[doc = "2: Capture mode: 1 - neg. edge"]
            CM_2 = 2,
            #[doc = "3: Capture mode: 1 - both edges"]
            CM_3 = 3,
        }
        impl From<CM_A> for u8 {
            #[inline(always)]
            fn from(variant: CM_A) -> Self {
                variant as _
            }
        }
        #[doc = "Field `CM` reader - Capture mode 1"]
        pub struct CM_R(crate::FieldReader<u8, CM_A>);
        impl CM_R {
            pub(crate) fn new(bits: u8) -> Self {
                CM_R(crate::FieldReader::new(bits))
            }
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> CM_A {
                match self.bits {
                    0 => CM_A::CM_0,
                    1 => CM_A::CM_1,
                    2 => CM_A::CM_2,
                    3 => CM_A::CM_3,
                    _ => unreachable!(),
                }
            }
            #[doc = "Checks if the value of the field is `CM_0`"]
            #[inline(always)]
            pub fn is_cm_0(&self) -> bool {
                **self == CM_A::CM_0
            }
            #[doc = "Checks if the value of the field is `CM_1`"]
            #[inline(always)]
            pub fn is_cm_1(&self) -> bool {
                **self == CM_A::CM_1
            }
            #[doc = "Checks if the value of the field is `CM_2`"]
            #[inline(always)]
            pub fn is_cm_2(&self) -> bool {
                **self == CM_A::CM_2
            }
            #[doc = "Checks if the value of the field is `CM_3`"]
            #[inline(always)]
            pub fn is_cm_3(&self) -> bool {
                **self == CM_A::CM_3
            }
        }
        impl core::ops::Deref for CM_R {
            type Target = crate::FieldReader<u8, CM_A>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `CM` writer - Capture mode 1"]
        pub struct CM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CM_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: CM_A) -> &'a mut W {
                self.bits(variant.into())
            }
            #[doc = "Capture mode: 0 - disabled"]
            #[inline(always)]
            pub fn cm_0(self) -> &'a mut W {
                self.variant(CM_A::CM_0)
            }
            #[doc = "Capture mode: 1 - pos. edge"]
            #[inline(always)]
            pub fn cm_1(self) -> &'a mut W {
                self.variant(CM_A::CM_1)
            }
            #[doc = "Capture mode: 1 - neg. edge"]
            #[inline(always)]
            pub fn cm_2(self) -> &'a mut W {
                self.variant(CM_A::CM_2)
            }
            #[doc = "Capture mode: 1 - both edges"]
            #[inline(always)]
            pub fn cm_3(self) -> &'a mut W {
                self.variant(CM_A::CM_3)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | ((value as u16 & 0x03) << 14);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Capture/compare interrupt flag"]
            #[inline(always)]
            pub fn ccifg(&self) -> CCIFG_R {
                CCIFG_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/compare overflow flag"]
            #[inline(always)]
            pub fn cov(&self) -> COV_R {
                COV_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - PWM Output signal if output mode 0"]
            #[inline(always)]
            pub fn out(&self) -> OUT_R {
                OUT_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Capture input signal (read)"]
            #[inline(always)]
            pub fn cci(&self) -> CCI_R {
                CCI_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Capture/compare interrupt enable"]
            #[inline(always)]
            pub fn ccie(&self) -> CCIE_R {
                CCIE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bits 5:7 - Output mode 2"]
            #[inline(always)]
            pub fn outmod(&self) -> OUTMOD_R {
                OUTMOD_R::new(((self.bits >> 5) & 0x07) as u8)
            }
            #[doc = "Bit 8 - Capture mode: 1 /Compare mode : 0"]
            #[inline(always)]
            pub fn cap(&self) -> CAP_R {
                CAP_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Latched capture signal (read)"]
            #[inline(always)]
            pub fn scci(&self) -> SCCI_R {
                SCCI_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Capture sychronize"]
            #[inline(always)]
            pub fn scs(&self) -> SCS_R {
                SCS_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - Capture input select 1"]
            #[inline(always)]
            pub fn ccis(&self) -> CCIS_R {
                CCIS_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Capture mode 1"]
            #[inline(always)]
            pub fn cm(&self) -> CM_R {
                CM_R::new(((self.bits >> 14) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - Capture/compare interrupt flag"]
            #[inline(always)]
            pub fn ccifg(&mut self) -> CCIFG_W {
                CCIFG_W { w: self }
            }
            #[doc = "Bit 1 - Capture/compare overflow flag"]
            #[inline(always)]
            pub fn cov(&mut self) -> COV_W {
                COV_W { w: self }
            }
            #[doc = "Bit 2 - PWM Output signal if output mode 0"]
            #[inline(always)]
            pub fn out(&mut self) -> OUT_W {
                OUT_W { w: self }
            }
            #[doc = "Bit 3 - Capture input signal (read)"]
            #[inline(always)]
            pub fn cci(&mut self) -> CCI_W {
                CCI_W { w: self }
            }
            #[doc = "Bit 4 - Capture/compare interrupt enable"]
            #[inline(always)]
            pub fn ccie(&mut self) -> CCIE_W {
                CCIE_W { w: self }
            }
            #[doc = "Bits 5:7 - Output mode 2"]
            #[inline(always)]
            pub fn outmod(&mut self) -> OUTMOD_W {
                OUTMOD_W { w: self }
            }
            #[doc = "Bit 8 - Capture mode: 1 /Compare mode : 0"]
            #[inline(always)]
            pub fn cap(&mut self) -> CAP_W {
                CAP_W { w: self }
            }
            #[doc = "Bit 10 - Latched capture signal (read)"]
            #[inline(always)]
            pub fn scci(&mut self) -> SCCI_W {
                SCCI_W { w: self }
            }
            #[doc = "Bit 11 - Capture sychronize"]
            #[inline(always)]
            pub fn scs(&mut self) -> SCS_W {
                SCS_W { w: self }
            }
            #[doc = "Bits 12:13 - Capture input select 1"]
            #[inline(always)]
            pub fn ccis(&mut self) -> CCIS_W {
                CCIS_W { w: self }
            }
            #[doc = "Bits 14:15 - Capture mode 1"]
            #[inline(always)]
            pub fn cm(&mut self) -> CM_W {
                CM_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Timer A Capture/Compare Control 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tacctl1](index.html) module"]
        pub struct TACCTL1_SPEC;
        impl crate::RegisterSpec for TACCTL1_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [tacctl1::R](R) reader structure"]
        impl crate::Readable for TACCTL1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [tacctl1::W](W) writer structure"]
        impl crate::Writable for TACCTL1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets TACCTL1 to value 0"]
        impl crate::Resettable for TACCTL1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "TAR register accessor: an alias for `Reg<TAR_SPEC>`"]
    pub type TAR = crate::Reg<tar::TAR_SPEC>;
    #[doc = "Timer A Counter Register"]
    pub mod tar {
        #[doc = "Register `TAR` reader"]
        pub struct R(crate::R<TAR_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<TAR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<TAR_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<TAR_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `TAR` writer"]
        pub struct W(crate::W<TAR_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<TAR_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<TAR_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<TAR_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TAR` reader - Timer A Counter Register"]
        pub struct TAR_R(crate::FieldReader<u16, u16>);
        impl TAR_R {
            pub(crate) fn new(bits: u16) -> Self {
                TAR_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TAR_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TAR` writer - Timer A Counter Register"]
        pub struct TAR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u16 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Timer A Counter Register"]
            #[inline(always)]
            pub fn tar(&self) -> TAR_R {
                TAR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Timer A Counter Register"]
            #[inline(always)]
            pub fn tar(&mut self) -> TAR_W {
                TAR_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Timer A Counter Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tar](index.html) module"]
        pub struct TAR_SPEC;
        impl crate::RegisterSpec for TAR_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [tar::R](R) reader structure"]
        impl crate::Readable for TAR_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [tar::W](W) writer structure"]
        impl crate::Writable for TAR_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets TAR to value 0"]
        impl crate::Resettable for TAR_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "TACCR0 register accessor: an alias for `Reg<TACCR0_SPEC>`"]
    pub type TACCR0 = crate::Reg<taccr0::TACCR0_SPEC>;
    #[doc = "Timer A Capture/Compare 0"]
    pub mod taccr0 {
        #[doc = "Register `TACCR0` reader"]
        pub struct R(crate::R<TACCR0_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<TACCR0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<TACCR0_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<TACCR0_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `TACCR0` writer"]
        pub struct W(crate::W<TACCR0_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<TACCR0_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<TACCR0_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<TACCR0_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TACCR0` reader - Timer A Capture/Compare register 0"]
        pub struct TACCR0_R(crate::FieldReader<u16, u16>);
        impl TACCR0_R {
            pub(crate) fn new(bits: u16) -> Self {
                TACCR0_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TACCR0_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TACCR0` writer - Timer A Capture/Compare register 0"]
        pub struct TACCR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TACCR0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u16 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Timer A Capture/Compare register 0"]
            #[inline(always)]
            pub fn taccr0(&self) -> TACCR0_R {
                TACCR0_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Timer A Capture/Compare register 0"]
            #[inline(always)]
            pub fn taccr0(&mut self) -> TACCR0_W {
                TACCR0_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Timer A Capture/Compare 0\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [taccr0](index.html) module"]
        pub struct TACCR0_SPEC;
        impl crate::RegisterSpec for TACCR0_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [taccr0::R](R) reader structure"]
        impl crate::Readable for TACCR0_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [taccr0::W](W) writer structure"]
        impl crate::Writable for TACCR0_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets TACCR0 to value 0"]
        impl crate::Resettable for TACCR0_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
    #[doc = "TACCR1 register accessor: an alias for `Reg<TACCR1_SPEC>`"]
    pub type TACCR1 = crate::Reg<taccr1::TACCR1_SPEC>;
    #[doc = "Timer A Capture/Compare 1"]
    pub mod taccr1 {
        #[doc = "Register `TACCR1` reader"]
        pub struct R(crate::R<TACCR1_SPEC>);
        impl core::ops::Deref for R {
            type Target = crate::R<TACCR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl From<crate::R<TACCR1_SPEC>> for R {
            #[inline(always)]
            fn from(reader: crate::R<TACCR1_SPEC>) -> Self {
                R(reader)
            }
        }
        #[doc = "Register `TACCR1` writer"]
        pub struct W(crate::W<TACCR1_SPEC>);
        impl core::ops::Deref for W {
            type Target = crate::W<TACCR1_SPEC>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        impl core::ops::DerefMut for W {
            #[inline(always)]
            fn deref_mut(&mut self) -> &mut Self::Target {
                &mut self.0
            }
        }
        impl From<crate::W<TACCR1_SPEC>> for W {
            #[inline(always)]
            fn from(writer: crate::W<TACCR1_SPEC>) -> Self {
                W(writer)
            }
        }
        #[doc = "Field `TACCR1` reader - Timer A Capture/Compare register 1"]
        pub struct TACCR1_R(crate::FieldReader<u16, u16>);
        impl TACCR1_R {
            pub(crate) fn new(bits: u16) -> Self {
                TACCR1_R(crate::FieldReader::new(bits))
            }
        }
        impl core::ops::Deref for TACCR1_R {
            type Target = crate::FieldReader<u16, u16>;
            #[inline(always)]
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
        #[doc = "Field `TACCR1` writer - Timer A Capture/Compare register 1"]
        pub struct TACCR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TACCR1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | (value as u16 & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Timer A Capture/Compare register 1"]
            #[inline(always)]
            pub fn taccr1(&self) -> TACCR1_R {
                TACCR1_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Timer A Capture/Compare register 1"]
            #[inline(always)]
            pub fn taccr1(&mut self) -> TACCR1_W {
                TACCR1_W { w: self }
            }
            #[doc = "Writes raw bits to the register."]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u16) -> &mut Self {
                self.0.bits(bits);
                self
            }
        }
        #[doc = "Timer A Capture/Compare 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [taccr1](index.html) module"]
        pub struct TACCR1_SPEC;
        impl crate::RegisterSpec for TACCR1_SPEC {
            type Ux = u16;
        }
        #[doc = "`read()` method returns [taccr1::R](R) reader structure"]
        impl crate::Readable for TACCR1_SPEC {
            type Reader = R;
        }
        #[doc = "`write(|w| ..)` method takes [taccr1::W](W) writer structure"]
        impl crate::Writable for TACCR1_SPEC {
            type Writer = W;
        }
        #[doc = "`reset()` method sets TACCR1 to value 0"]
        impl crate::Resettable for TACCR1_SPEC {
            #[inline(always)]
            fn reset_value() -> Self::Ux {
                0
            }
        }
    }
}
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r"All the peripherals"]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "SPECIAL_FUNCTION"]
    pub SPECIAL_FUNCTION: SPECIAL_FUNCTION,
    #[doc = "PORT_1_2"]
    pub PORT_1_2: PORT_1_2,
    #[doc = "ADC10"]
    pub ADC10: ADC10,
    #[doc = "SYSTEM_CLOCK"]
    pub SYSTEM_CLOCK: SYSTEM_CLOCK,
    #[doc = "USI"]
    pub USI: USI,
    #[doc = "CALIBRATION_DATA"]
    pub CALIBRATION_DATA: CALIBRATION_DATA,
    #[doc = "WATCHDOG_TIMER"]
    pub WATCHDOG_TIMER: WATCHDOG_TIMER,
    #[doc = "FLASH"]
    pub FLASH: FLASH,
    #[doc = "TIMER_A2"]
    pub TIMER_A2: TIMER_A2,
}
impl Peripherals {
    #[doc = r"Returns all the peripherals *once*"]
    #[inline]
    pub fn take() -> Option<Self> {
        msp430::interrupt::free(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                None
            } else {
                Some(unsafe { Peripherals::steal() })
            }
        })
    }
    #[doc = r"Unchecked version of `Peripherals::take`"]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            SPECIAL_FUNCTION: SPECIAL_FUNCTION {
                _marker: PhantomData,
            },
            PORT_1_2: PORT_1_2 {
                _marker: PhantomData,
            },
            ADC10: ADC10 {
                _marker: PhantomData,
            },
            SYSTEM_CLOCK: SYSTEM_CLOCK {
                _marker: PhantomData,
            },
            USI: USI {
                _marker: PhantomData,
            },
            CALIBRATION_DATA: CALIBRATION_DATA {
                _marker: PhantomData,
            },
            WATCHDOG_TIMER: WATCHDOG_TIMER {
                _marker: PhantomData,
            },
            FLASH: FLASH {
                _marker: PhantomData,
            },
            TIMER_A2: TIMER_A2 {
                _marker: PhantomData,
            },
        }
    }
}
